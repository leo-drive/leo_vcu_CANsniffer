
Shift by wire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc28  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800be18  0800be18  0001be18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf94  0800bf94  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf9c  0800bf9c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf9c  0800bf9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfa0  0800bfa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800bfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ff4  20000180  0800c124  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004174  0800c124  00024174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d702  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c35  00000000  00000000  0003d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  000424e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00043e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a8d  00000000  00000000  000455d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4cb  00000000  00000000  0004c065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c55ac  00000000  00000000  0006a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fadc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c34  00000000  00000000  0012fb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000180 	.word	0x20000180
 800020c:	00000000 	.word	0x00000000
 8000210:	0800be00 	.word	0x0800be00

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000184 	.word	0x20000184
 800022c:	0800be00 	.word	0x0800be00

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2iz>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d215      	bcs.n	8000a02 <__aeabi_d2iz+0x36>
 80009d6:	d511      	bpl.n	80009fc <__aeabi_d2iz+0x30>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d912      	bls.n	8000a08 <__aeabi_d2iz+0x3c>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f2:	fa23 f002 	lsr.w	r0, r3, r2
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d105      	bne.n	8000a14 <__aeabi_d2iz+0x48>
 8000a08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	bf08      	it	eq
 8000a0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_frsub>:
 8000a1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a20:	e002      	b.n	8000a28 <__addsf3>
 8000a22:	bf00      	nop

08000a24 <__aeabi_fsub>:
 8000a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a28 <__addsf3>:
 8000a28:	0042      	lsls	r2, r0, #1
 8000a2a:	bf1f      	itttt	ne
 8000a2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a30:	ea92 0f03 	teqne	r2, r3
 8000a34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3c:	d06a      	beq.n	8000b14 <__addsf3+0xec>
 8000a3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a46:	bfc1      	itttt	gt
 8000a48:	18d2      	addgt	r2, r2, r3
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	4048      	eorgt	r0, r1
 8000a4e:	4041      	eorgt	r1, r0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	2b19      	cmp	r3, #25
 8000a56:	bf88      	it	hi
 8000a58:	4770      	bxhi	lr
 8000a5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4249      	negne	r1, r1
 8000a7a:	ea92 0f03 	teq	r2, r3
 8000a7e:	d03f      	beq.n	8000b00 <__addsf3+0xd8>
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	fa41 fc03 	asr.w	ip, r1, r3
 8000a88:	eb10 000c 	adds.w	r0, r0, ip
 8000a8c:	f1c3 0320 	rsb	r3, r3, #32
 8000a90:	fa01 f103 	lsl.w	r1, r1, r3
 8000a94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__addsf3+0x78>
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa4:	d313      	bcc.n	8000ace <__addsf3+0xa6>
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aaa:	d306      	bcc.n	8000aba <__addsf3+0x92>
 8000aac:	0840      	lsrs	r0, r0, #1
 8000aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ab2:	f102 0201 	add.w	r2, r2, #1
 8000ab6:	2afe      	cmp	r2, #254	; 0xfe
 8000ab8:	d251      	bcs.n	8000b5e <__addsf3+0x136>
 8000aba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000abe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ac2:	bf08      	it	eq
 8000ac4:	f020 0001 	biceq.w	r0, r0, #1
 8000ac8:	ea40 0003 	orr.w	r0, r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	eb40 0000 	adc.w	r0, r0, r0
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000adc:	d2ed      	bcs.n	8000aba <__addsf3+0x92>
 8000ade:	fab0 fc80 	clz	ip, r0
 8000ae2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aee:	bfaa      	itet	ge
 8000af0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af4:	4252      	neglt	r2, r2
 8000af6:	4318      	orrge	r0, r3
 8000af8:	bfbc      	itt	lt
 8000afa:	40d0      	lsrlt	r0, r2
 8000afc:	4318      	orrlt	r0, r3
 8000afe:	4770      	bx	lr
 8000b00:	f092 0f00 	teq	r2, #0
 8000b04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b08:	bf06      	itte	eq
 8000b0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0e:	3201      	addeq	r2, #1
 8000b10:	3b01      	subne	r3, #1
 8000b12:	e7b5      	b.n	8000a80 <__addsf3+0x58>
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d021      	beq.n	8000b68 <__addsf3+0x140>
 8000b24:	ea92 0f03 	teq	r2, r3
 8000b28:	d004      	beq.n	8000b34 <__addsf3+0x10c>
 8000b2a:	f092 0f00 	teq	r2, #0
 8000b2e:	bf08      	it	eq
 8000b30:	4608      	moveq	r0, r1
 8000b32:	4770      	bx	lr
 8000b34:	ea90 0f01 	teq	r0, r1
 8000b38:	bf1c      	itt	ne
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	4770      	bxne	lr
 8000b3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b42:	d104      	bne.n	8000b4e <__addsf3+0x126>
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	bf28      	it	cs
 8000b48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b52:	bf3c      	itt	cc
 8000b54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bxcc	lr
 8000b5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	4770      	bx	lr
 8000b68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b6c:	bf16      	itet	ne
 8000b6e:	4608      	movne	r0, r1
 8000b70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b74:	4601      	movne	r1, r0
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	bf06      	itte	eq
 8000b7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7e:	ea90 0f01 	teqeq	r0, r1
 8000b82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_ui2f>:
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e004      	b.n	8000b98 <__aeabi_i2f+0x8>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_i2f>:
 8000b90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	bf48      	it	mi
 8000b96:	4240      	negmi	r0, r0
 8000b98:	ea5f 0c00 	movs.w	ip, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	e01c      	b.n	8000be6 <__aeabi_l2f+0x2a>

08000bac <__aeabi_ul2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <__aeabi_l2f+0x14>
 8000bba:	bf00      	nop

08000bbc <__aeabi_l2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_l2f+0x14>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	ea5f 0c01 	movs.w	ip, r1
 8000bd4:	bf02      	ittt	eq
 8000bd6:	4684      	moveq	ip, r0
 8000bd8:	4601      	moveq	r1, r0
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000be0:	bf08      	it	eq
 8000be2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bea:	fabc f28c 	clz	r2, ip
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf4:	db10      	blt.n	8000c18 <__aeabi_l2f+0x5c>
 8000bf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f102 0220 	add.w	r2, r2, #32
 8000c1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c28:	fa21 f202 	lsr.w	r2, r1, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_fmul>:
 8000c38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c40:	bf1e      	ittt	ne
 8000c42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c46:	ea92 0f0c 	teqne	r2, ip
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d06f      	beq.n	8000d30 <__aeabi_fmul+0xf8>
 8000c50:	441a      	add	r2, r3
 8000c52:	ea80 0c01 	eor.w	ip, r0, r1
 8000c56:	0240      	lsls	r0, r0, #9
 8000c58:	bf18      	it	ne
 8000c5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5e:	d01e      	beq.n	8000c9e <__aeabi_fmul+0x66>
 8000c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c78:	bf3e      	ittt	cc
 8000c7a:	0049      	lslcc	r1, r1, #1
 8000c7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	ea40 0001 	orr.w	r0, r0, r1
 8000c86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c8a:	2afd      	cmp	r2, #253	; 0xfd
 8000c8c:	d81d      	bhi.n	8000cca <__aeabi_fmul+0x92>
 8000c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	f090 0f00 	teq	r0, #0
 8000ca2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	0249      	lsleq	r1, r1, #9
 8000caa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cb2:	3a7f      	subs	r2, #127	; 0x7f
 8000cb4:	bfc2      	ittt	gt
 8000cb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cbe:	4770      	bxgt	lr
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	dc5d      	bgt.n	8000d88 <__aeabi_fmul+0x150>
 8000ccc:	f112 0f19 	cmn.w	r2, #25
 8000cd0:	bfdc      	itt	le
 8000cd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cd6:	4770      	bxle	lr
 8000cd8:	f1c2 0200 	rsb	r2, r2, #0
 8000cdc:	0041      	lsls	r1, r0, #1
 8000cde:	fa21 f102 	lsr.w	r1, r1, r2
 8000ce2:	f1c2 0220 	rsb	r2, r2, #32
 8000ce6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cee:	f140 0000 	adc.w	r0, r0, #0
 8000cf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf6:	bf08      	it	eq
 8000cf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfc:	4770      	bx	lr
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xce>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xe6>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fmul+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	bf18      	it	ne
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d00a      	beq.n	8000d56 <__aeabi_fmul+0x11e>
 8000d40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d44:	bf18      	it	ne
 8000d46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	d1d8      	bne.n	8000cfe <__aeabi_fmul+0xc6>
 8000d4c:	ea80 0001 	eor.w	r0, r0, r1
 8000d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	bf17      	itett	ne
 8000d5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d60:	4608      	moveq	r0, r1
 8000d62:	f091 0f00 	teqne	r1, #0
 8000d66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d6a:	d014      	beq.n	8000d96 <__aeabi_fmul+0x15e>
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	d101      	bne.n	8000d76 <__aeabi_fmul+0x13e>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d10f      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d76:	ea93 0f0c 	teq	r3, ip
 8000d7a:	d103      	bne.n	8000d84 <__aeabi_fmul+0x14c>
 8000d7c:	024b      	lsls	r3, r1, #9
 8000d7e:	bf18      	it	ne
 8000d80:	4608      	movne	r0, r1
 8000d82:	d108      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_fdiv>:
 8000da0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da8:	bf1e      	ittt	ne
 8000daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dae:	ea92 0f0c 	teqne	r2, ip
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d069      	beq.n	8000e8c <__aeabi_fdiv+0xec>
 8000db8:	eba2 0203 	sub.w	r2, r2, r3
 8000dbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc6:	d037      	beq.n	8000e38 <__aeabi_fdiv+0x98>
 8000dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf38      	it	cc
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000de2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000de6:	428b      	cmp	r3, r1
 8000de8:	bf24      	itt	cs
 8000dea:	1a5b      	subcs	r3, r3, r1
 8000dec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df4:	bf24      	itt	cs
 8000df6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e02:	bf24      	itt	cs
 8000e04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e22:	d1e0      	bne.n	8000de6 <__aeabi_fdiv+0x46>
 8000e24:	2afd      	cmp	r2, #253	; 0xfd
 8000e26:	f63f af50 	bhi.w	8000cca <__aeabi_fmul+0x92>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e40:	327f      	adds	r2, #127	; 0x7f
 8000e42:	bfc2      	ittt	gt
 8000e44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4c:	4770      	bxgt	lr
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	3a01      	subs	r2, #1
 8000e58:	e737      	b.n	8000cca <__aeabi_fmul+0x92>
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xc2>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xda>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e795      	b.n	8000db8 <__aeabi_fdiv+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d108      	bne.n	8000ea8 <__aeabi_fdiv+0x108>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	f47f af7d 	bne.w	8000d96 <__aeabi_fmul+0x15e>
 8000e9c:	ea93 0f0c 	teq	r3, ip
 8000ea0:	f47f af70 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e776      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fdiv+0x118>
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	f43f af4c 	beq.w	8000d4c <__aeabi_fmul+0x114>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e76e      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000eb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ebc:	bf18      	it	ne
 8000ebe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	d1ca      	bne.n	8000e5a <__aeabi_fdiv+0xba>
 8000ec4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec8:	f47f af5c 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ecc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ed0:	f47f af3c 	bne.w	8000d4c <__aeabi_fmul+0x114>
 8000ed4:	e75f      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ed6:	bf00      	nop

08000ed8 <__gesf2>:
 8000ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8000edc:	e006      	b.n	8000eec <__cmpsf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__lesf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	e002      	b.n	8000eec <__cmpsf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__cmpsf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	bf18      	it	ne
 8000efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f02:	d011      	beq.n	8000f28 <__cmpsf2+0x40>
 8000f04:	b001      	add	sp, #4
 8000f06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f0a:	bf18      	it	ne
 8000f0c:	ea90 0f01 	teqne	r0, r1
 8000f10:	bf58      	it	pl
 8000f12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f16:	bf88      	it	hi
 8000f18:	17c8      	asrhi	r0, r1, #31
 8000f1a:	bf38      	it	cc
 8000f1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f20:	bf18      	it	ne
 8000f22:	f040 0001 	orrne.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	d102      	bne.n	8000f34 <__cmpsf2+0x4c>
 8000f2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f32:	d105      	bne.n	8000f40 <__cmpsf2+0x58>
 8000f34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f38:	d1e4      	bne.n	8000f04 <__cmpsf2+0x1c>
 8000f3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f3e:	d0e1      	beq.n	8000f04 <__cmpsf2+0x1c>
 8000f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__aeabi_cfrcmple>:
 8000f48:	4684      	mov	ip, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4661      	mov	r1, ip
 8000f4e:	e7ff      	b.n	8000f50 <__aeabi_cfcmpeq>

08000f50 <__aeabi_cfcmpeq>:
 8000f50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f52:	f7ff ffc9 	bl	8000ee8 <__cmpsf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf48      	it	mi
 8000f5a:	f110 0f00 	cmnmi.w	r0, #0
 8000f5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f60 <__aeabi_fcmpeq>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff fff4 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f68:	bf0c      	ite	eq
 8000f6a:	2001      	moveq	r0, #1
 8000f6c:	2000      	movne	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmplt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffea 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmple>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffe0 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f90:	bf94      	ite	ls
 8000f92:	2001      	movls	r0, #1
 8000f94:	2000      	movhi	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpge>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffd2 	bl	8000f48 <__aeabi_cfrcmple>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpgt>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffc8 	bl	8000f48 <__aeabi_cfrcmple>
 8000fb8:	bf34      	ite	cc
 8000fba:	2001      	movcc	r0, #1
 8000fbc:	2000      	movcs	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b976 	b.w	80012c8 <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f806 	bl	8000ff4 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9e08      	ldr	r6, [sp, #32]
 8000ffa:	460d      	mov	r5, r1
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	4688      	mov	r8, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d14d      	bne.n	80010a0 <__udivmoddi4+0xac>
 8001004:	428a      	cmp	r2, r1
 8001006:	4694      	mov	ip, r2
 8001008:	d968      	bls.n	80010dc <__udivmoddi4+0xe8>
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b152      	cbz	r2, 8001026 <__udivmoddi4+0x32>
 8001010:	fa01 f302 	lsl.w	r3, r1, r2
 8001014:	f1c2 0120 	rsb	r1, r2, #32
 8001018:	fa20 f101 	lsr.w	r1, r0, r1
 800101c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001020:	ea41 0803 	orr.w	r8, r1, r3
 8001024:	4094      	lsls	r4, r2
 8001026:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800102a:	fbb8 f7f1 	udiv	r7, r8, r1
 800102e:	fa1f fe8c 	uxth.w	lr, ip
 8001032:	fb01 8817 	mls	r8, r1, r7, r8
 8001036:	fb07 f00e 	mul.w	r0, r7, lr
 800103a:	0c23      	lsrs	r3, r4, #16
 800103c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001040:	4298      	cmp	r0, r3
 8001042:	d90a      	bls.n	800105a <__udivmoddi4+0x66>
 8001044:	eb1c 0303 	adds.w	r3, ip, r3
 8001048:	f107 35ff 	add.w	r5, r7, #4294967295
 800104c:	f080 811e 	bcs.w	800128c <__udivmoddi4+0x298>
 8001050:	4298      	cmp	r0, r3
 8001052:	f240 811b 	bls.w	800128c <__udivmoddi4+0x298>
 8001056:	3f02      	subs	r7, #2
 8001058:	4463      	add	r3, ip
 800105a:	1a1b      	subs	r3, r3, r0
 800105c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001060:	fb01 3310 	mls	r3, r1, r0, r3
 8001064:	fb00 fe0e 	mul.w	lr, r0, lr
 8001068:	b2a4      	uxth	r4, r4
 800106a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800106e:	45a6      	cmp	lr, r4
 8001070:	d90a      	bls.n	8001088 <__udivmoddi4+0x94>
 8001072:	eb1c 0404 	adds.w	r4, ip, r4
 8001076:	f100 33ff 	add.w	r3, r0, #4294967295
 800107a:	f080 8109 	bcs.w	8001290 <__udivmoddi4+0x29c>
 800107e:	45a6      	cmp	lr, r4
 8001080:	f240 8106 	bls.w	8001290 <__udivmoddi4+0x29c>
 8001084:	4464      	add	r4, ip
 8001086:	3802      	subs	r0, #2
 8001088:	2100      	movs	r1, #0
 800108a:	eba4 040e 	sub.w	r4, r4, lr
 800108e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001092:	b11e      	cbz	r6, 800109c <__udivmoddi4+0xa8>
 8001094:	2300      	movs	r3, #0
 8001096:	40d4      	lsrs	r4, r2
 8001098:	e9c6 4300 	strd	r4, r3, [r6]
 800109c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0xc2>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	f000 80ee 	beq.w	8001286 <__udivmoddi4+0x292>
 80010aa:	2100      	movs	r1, #0
 80010ac:	e9c6 0500 	strd	r0, r5, [r6]
 80010b0:	4608      	mov	r0, r1
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	fab3 f183 	clz	r1, r3
 80010ba:	2900      	cmp	r1, #0
 80010bc:	d14a      	bne.n	8001154 <__udivmoddi4+0x160>
 80010be:	42ab      	cmp	r3, r5
 80010c0:	d302      	bcc.n	80010c8 <__udivmoddi4+0xd4>
 80010c2:	4282      	cmp	r2, r0
 80010c4:	f200 80fc 	bhi.w	80012c0 <__udivmoddi4+0x2cc>
 80010c8:	1a84      	subs	r4, r0, r2
 80010ca:	eb65 0303 	sbc.w	r3, r5, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	4698      	mov	r8, r3
 80010d2:	2e00      	cmp	r6, #0
 80010d4:	d0e2      	beq.n	800109c <__udivmoddi4+0xa8>
 80010d6:	e9c6 4800 	strd	r4, r8, [r6]
 80010da:	e7df      	b.n	800109c <__udivmoddi4+0xa8>
 80010dc:	b902      	cbnz	r2, 80010e0 <__udivmoddi4+0xec>
 80010de:	deff      	udf	#255	; 0xff
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	f040 8091 	bne.w	800120c <__udivmoddi4+0x218>
 80010ea:	eba1 000c 	sub.w	r0, r1, ip
 80010ee:	2101      	movs	r1, #1
 80010f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f4:	fa1f fe8c 	uxth.w	lr, ip
 80010f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80010fc:	fb07 0013 	mls	r0, r7, r3, r0
 8001100:	0c25      	lsrs	r5, r4, #16
 8001102:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001106:	fb0e f003 	mul.w	r0, lr, r3
 800110a:	42a8      	cmp	r0, r5
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x12c>
 800110e:	eb1c 0505 	adds.w	r5, ip, r5
 8001112:	f103 38ff 	add.w	r8, r3, #4294967295
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x12a>
 8001118:	42a8      	cmp	r0, r5
 800111a:	f200 80ce 	bhi.w	80012ba <__udivmoddi4+0x2c6>
 800111e:	4643      	mov	r3, r8
 8001120:	1a2d      	subs	r5, r5, r0
 8001122:	fbb5 f0f7 	udiv	r0, r5, r7
 8001126:	fb07 5510 	mls	r5, r7, r0, r5
 800112a:	fb0e fe00 	mul.w	lr, lr, r0
 800112e:	b2a4      	uxth	r4, r4
 8001130:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x156>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x154>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80b6 	bhi.w	80012b4 <__udivmoddi4+0x2c0>
 8001148:	4628      	mov	r0, r5
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001152:	e79e      	b.n	8001092 <__udivmoddi4+0x9e>
 8001154:	f1c1 0720 	rsb	r7, r1, #32
 8001158:	408b      	lsls	r3, r1
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa25 fa07 	lsr.w	sl, r5, r7
 8001166:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800116a:	fbba f8f9 	udiv	r8, sl, r9
 800116e:	fa20 f307 	lsr.w	r3, r0, r7
 8001172:	fb09 aa18 	mls	sl, r9, r8, sl
 8001176:	408d      	lsls	r5, r1
 8001178:	fa1f fe8c 	uxth.w	lr, ip
 800117c:	431d      	orrs	r5, r3
 800117e:	fa00 f301 	lsl.w	r3, r0, r1
 8001182:	fb08 f00e 	mul.w	r0, r8, lr
 8001186:	0c2c      	lsrs	r4, r5, #16
 8001188:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800118c:	42a0      	cmp	r0, r4
 800118e:	fa02 f201 	lsl.w	r2, r2, r1
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b8>
 8001194:	eb1c 0404 	adds.w	r4, ip, r4
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295
 800119c:	f080 8088 	bcs.w	80012b0 <__udivmoddi4+0x2bc>
 80011a0:	42a0      	cmp	r0, r4
 80011a2:	f240 8085 	bls.w	80012b0 <__udivmoddi4+0x2bc>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4464      	add	r4, ip
 80011ac:	1a24      	subs	r4, r4, r0
 80011ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80011b2:	fb09 4410 	mls	r4, r9, r0, r4
 80011b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ba:	b2ad      	uxth	r5, r5
 80011bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011c0:	45a6      	cmp	lr, r4
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1e2>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011cc:	d26c      	bcs.n	80012a8 <__udivmoddi4+0x2b4>
 80011ce:	45a6      	cmp	lr, r4
 80011d0:	d96a      	bls.n	80012a8 <__udivmoddi4+0x2b4>
 80011d2:	3802      	subs	r0, #2
 80011d4:	4464      	add	r4, ip
 80011d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011da:	fba0 9502 	umull	r9, r5, r0, r2
 80011de:	eba4 040e 	sub.w	r4, r4, lr
 80011e2:	42ac      	cmp	r4, r5
 80011e4:	46c8      	mov	r8, r9
 80011e6:	46ae      	mov	lr, r5
 80011e8:	d356      	bcc.n	8001298 <__udivmoddi4+0x2a4>
 80011ea:	d053      	beq.n	8001294 <__udivmoddi4+0x2a0>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d069      	beq.n	80012c4 <__udivmoddi4+0x2d0>
 80011f0:	ebb3 0208 	subs.w	r2, r3, r8
 80011f4:	eb64 040e 	sbc.w	r4, r4, lr
 80011f8:	fa22 f301 	lsr.w	r3, r2, r1
 80011fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001200:	431f      	orrs	r7, r3
 8001202:	40cc      	lsrs	r4, r1
 8001204:	e9c6 7400 	strd	r7, r4, [r6]
 8001208:	2100      	movs	r1, #0
 800120a:	e747      	b.n	800109c <__udivmoddi4+0xa8>
 800120c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001210:	f1c2 0120 	rsb	r1, r2, #32
 8001214:	fa25 f301 	lsr.w	r3, r5, r1
 8001218:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800121c:	fa20 f101 	lsr.w	r1, r0, r1
 8001220:	4095      	lsls	r5, r2
 8001222:	430d      	orrs	r5, r1
 8001224:	fbb3 f1f7 	udiv	r1, r3, r7
 8001228:	fb07 3311 	mls	r3, r7, r1, r3
 800122c:	fa1f fe8c 	uxth.w	lr, ip
 8001230:	0c28      	lsrs	r0, r5, #16
 8001232:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001236:	fb01 f30e 	mul.w	r3, r1, lr
 800123a:	4283      	cmp	r3, r0
 800123c:	fa04 f402 	lsl.w	r4, r4, r2
 8001240:	d908      	bls.n	8001254 <__udivmoddi4+0x260>
 8001242:	eb1c 0000 	adds.w	r0, ip, r0
 8001246:	f101 38ff 	add.w	r8, r1, #4294967295
 800124a:	d22f      	bcs.n	80012ac <__udivmoddi4+0x2b8>
 800124c:	4283      	cmp	r3, r0
 800124e:	d92d      	bls.n	80012ac <__udivmoddi4+0x2b8>
 8001250:	3902      	subs	r1, #2
 8001252:	4460      	add	r0, ip
 8001254:	1ac0      	subs	r0, r0, r3
 8001256:	fbb0 f3f7 	udiv	r3, r0, r7
 800125a:	fb07 0013 	mls	r0, r7, r3, r0
 800125e:	b2ad      	uxth	r5, r5
 8001260:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001264:	fb03 f00e 	mul.w	r0, r3, lr
 8001268:	42a8      	cmp	r0, r5
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0x28a>
 800126c:	eb1c 0505 	adds.w	r5, ip, r5
 8001270:	f103 38ff 	add.w	r8, r3, #4294967295
 8001274:	d216      	bcs.n	80012a4 <__udivmoddi4+0x2b0>
 8001276:	42a8      	cmp	r0, r5
 8001278:	d914      	bls.n	80012a4 <__udivmoddi4+0x2b0>
 800127a:	3b02      	subs	r3, #2
 800127c:	4465      	add	r5, ip
 800127e:	1a28      	subs	r0, r5, r0
 8001280:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001284:	e738      	b.n	80010f8 <__udivmoddi4+0x104>
 8001286:	4631      	mov	r1, r6
 8001288:	4630      	mov	r0, r6
 800128a:	e707      	b.n	800109c <__udivmoddi4+0xa8>
 800128c:	462f      	mov	r7, r5
 800128e:	e6e4      	b.n	800105a <__udivmoddi4+0x66>
 8001290:	4618      	mov	r0, r3
 8001292:	e6f9      	b.n	8001088 <__udivmoddi4+0x94>
 8001294:	454b      	cmp	r3, r9
 8001296:	d2a9      	bcs.n	80011ec <__udivmoddi4+0x1f8>
 8001298:	ebb9 0802 	subs.w	r8, r9, r2
 800129c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012a0:	3801      	subs	r0, #1
 80012a2:	e7a3      	b.n	80011ec <__udivmoddi4+0x1f8>
 80012a4:	4643      	mov	r3, r8
 80012a6:	e7ea      	b.n	800127e <__udivmoddi4+0x28a>
 80012a8:	4628      	mov	r0, r5
 80012aa:	e794      	b.n	80011d6 <__udivmoddi4+0x1e2>
 80012ac:	4641      	mov	r1, r8
 80012ae:	e7d1      	b.n	8001254 <__udivmoddi4+0x260>
 80012b0:	46d0      	mov	r8, sl
 80012b2:	e77b      	b.n	80011ac <__udivmoddi4+0x1b8>
 80012b4:	4464      	add	r4, ip
 80012b6:	3802      	subs	r0, #2
 80012b8:	e747      	b.n	800114a <__udivmoddi4+0x156>
 80012ba:	3b02      	subs	r3, #2
 80012bc:	4465      	add	r5, ip
 80012be:	e72f      	b.n	8001120 <__udivmoddi4+0x12c>
 80012c0:	4608      	mov	r0, r1
 80012c2:	e706      	b.n	80010d2 <__udivmoddi4+0xde>
 80012c4:	4631      	mov	r1, r6
 80012c6:	e6e9      	b.n	800109c <__udivmoddi4+0xa8>

080012c8 <__aeabi_idiv0>:
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <toyota_checksum>:
    checksum += data[i];
  }
  return checksum;
}

uint8_t toyota_checksum(uint32_t address, uint64_t d, uint8_t lenght) {
 80012cc:	b4f0      	push	{r4, r5, r6, r7}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	e9c7 2300 	strd	r2, r3, [r7]
   // D = d;
    d >>= ((8 - lenght) * 8); // remove padding
 80012d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012dc:	f1c3 0308 	rsb	r3, r3, #8
 80012e0:	00d9      	lsls	r1, r3, #3
 80012e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e6:	f1c1 0620 	rsb	r6, r1, #32
 80012ea:	f1a1 0020 	sub.w	r0, r1, #32
 80012ee:	fa22 f401 	lsr.w	r4, r2, r1
 80012f2:	fa03 f606 	lsl.w	r6, r3, r6
 80012f6:	4334      	orrs	r4, r6
 80012f8:	fa23 f000 	lsr.w	r0, r3, r0
 80012fc:	4304      	orrs	r4, r0
 80012fe:	fa23 f501 	lsr.w	r5, r3, r1
 8001302:	e9c7 4500 	strd	r4, r5, [r7]
    d >>= 8; // remove checksum
 8001306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0a02      	lsrs	r2, r0, #8
 8001314:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001318:	0a0b      	lsrs	r3, r1, #8
 800131a:	e9c7 2300 	strd	r2, r3, [r7]

    unsigned int s = lenght;
 800131e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001322:	617b      	str	r3, [r7, #20]
    while (address) { s += address & 0xFF; address >>= 8; }
 8001324:	e007      	b.n	8001336 <toyota_checksum+0x6a>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4413      	add	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f4      	bne.n	8001326 <toyota_checksum+0x5a>
    while (d) { s += d & 0xFF; d >>= 8; }
 800133c:	e010      	b.n	8001360 <toyota_checksum+0x94>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4413      	add	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	0a02      	lsrs	r2, r0, #8
 8001356:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800135a:	0a0b      	lsrs	r3, r1, #8
 800135c:	e9c7 2300 	strd	r2, r3, [r7]
 8001360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001364:	4313      	orrs	r3, r2
 8001366:	d1ea      	bne.n	800133e <toyota_checksum+0x72>

    return s & 0xFF;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	b2db      	uxtb	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	4770      	bx	lr
	...

08001378 <CAN_FilterConfig>:
    CAN_Error_Struct Can1;
    CAN_Error_Struct Can2;
} myErrorFlag;

void CAN_FilterConfig(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001382:	2301      	movs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = (uint32_t)0;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = (uint32_t)0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = (uint32_t)0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = (uint32_t)0;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FilterFIFO0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
		sFilterConfig.SlaveStartFilterBank = 13;
 80013a2:	230d      	movs	r3, #13
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24

    // ### Configurate CAN 1 ###
    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4826      	ldr	r0, [pc, #152]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013ac:	f001 ff94 	bl	80032d8 <HAL_CAN_ConfigFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <CAN_FilterConfig+0x48>
    {

        myErrorFlag.Can1.ConfigFilter = true;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	70da      	strb	r2, [r3, #3]
        Error_Handler();
 80013bc:	f001 f8a4 	bl	8002508 <Error_Handler>
    }

    if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80013c0:	4820      	ldr	r0, [pc, #128]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013c2:	f002 f869 	bl	8003498 <HAL_CAN_Start>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <CAN_FilterConfig+0x5e>
    {
        myErrorFlag.Can1.Start = true;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	709a      	strb	r2, [r3, #2]
        Error_Handler();
 80013d2:	f001 f899 	bl	8002508 <Error_Handler>
    }

    if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80013d6:	2103      	movs	r1, #3
 80013d8:	481a      	ldr	r0, [pc, #104]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013da:	f002 fac5 	bl	8003968 <HAL_CAN_ActivateNotification>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <CAN_FilterConfig+0x76>
    {
        myErrorFlag.Can1.Act_Notif = true;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
        Error_Handler();
 80013ea:	f001 f88d 	bl	8002508 <Error_Handler>
    }



    // ### Configurate CAN 2 ###
		sFilterConfig.FilterBank = 13;
 80013ee:	230d      	movs	r3, #13
 80013f0:	617b      	str	r3, [r7, #20]
    if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <CAN_FilterConfig+0xd4>)
 80013f8:	f001 ff6e 	bl	80032d8 <HAL_CAN_ConfigFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <CAN_FilterConfig+0x94>
    {
        /* Filter configuration Error */
        myErrorFlag.Can2.ConfigFilter = true;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <CAN_FilterConfig+0xd0>)
 8001404:	2201      	movs	r2, #1
 8001406:	729a      	strb	r2, [r3, #10]
        Error_Handler();
 8001408:	f001 f87e 	bl	8002508 <Error_Handler>
    }

    if(HAL_CAN_Start(&hcan2) != HAL_OK)
 800140c:	480f      	ldr	r0, [pc, #60]	; (800144c <CAN_FilterConfig+0xd4>)
 800140e:	f002 f843 	bl	8003498 <HAL_CAN_Start>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <CAN_FilterConfig+0xaa>
    {
        myErrorFlag.Can2.Start = true;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <CAN_FilterConfig+0xd0>)
 800141a:	2201      	movs	r2, #1
 800141c:	725a      	strb	r2, [r3, #9]
        Error_Handler();
 800141e:	f001 f873 	bl	8002508 <Error_Handler>
    }
    
    if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001422:	2113      	movs	r1, #19
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <CAN_FilterConfig+0xd4>)
 8001426:	f002 fa9f 	bl	8003968 <HAL_CAN_ActivateNotification>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <CAN_FilterConfig+0xc2>
    {
        myErrorFlag.Can2.Act_Notif = true;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <CAN_FilterConfig+0xd0>)
 8001432:	2201      	movs	r2, #1
 8001434:	71da      	strb	r2, [r3, #7]
        Error_Handler();
 8001436:	f001 f867 	bl	8002508 <Error_Handler>
    }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20001b60 	.word	0x20001b60
 8001448:	200010b8 	.word	0x200010b8
 800144c:	20001b88 	.word	0x20001b88

08001450 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e043      	b.n	80014e6 <HAL_CAN_TxMailbox0CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 800145e:	4926      	ldr	r1, [pc, #152]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3324      	adds	r3, #36	; 0x24
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d135      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 8001474:	4920      	ldr	r1, [pc, #128]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d12a      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014a6:	4413      	add	r3, r2
 80014a8:	1d19      	adds	r1, r3, #4
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	3318      	adds	r3, #24
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014b8:	4413      	add	r3, r2
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	f002 f82e 	bl	8003520 <HAL_CAN_AddTxMessage>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 80014ca:	490b      	ldr	r1, [pc, #44]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	3324      	adds	r3, #36	; 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    break;
 80014de:	e006      	b.n	80014ee <HAL_CAN_TxMailbox0CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	ddb8      	ble.n	800145e <HAL_CAN_TxMailbox0CompleteCallback+0xe>
        }

    }


}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000019c 	.word	0x2000019c

080014fc <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e043      	b.n	8001592 <HAL_CAN_TxMailbox1CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 800150a:	4926      	ldr	r1, [pc, #152]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	3324      	adds	r3, #36	; 0x24
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d135      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 8001520:	4920      	ldr	r1, [pc, #128]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d12a      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 8001536:	491b      	ldr	r1, [pc, #108]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001552:	4413      	add	r3, r2
 8001554:	1d19      	adds	r1, r3, #4
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	3318      	adds	r3, #24
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001564:	4413      	add	r3, r2
 8001566:	1d1a      	adds	r2, r3, #4
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	f001 ffd8 	bl	8003520 <HAL_CAN_AddTxMessage>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10a      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 8001576:	490b      	ldr	r1, [pc, #44]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3324      	adds	r3, #36	; 0x24
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
                    break;
 800158a:	e006      	b.n	800159a <HAL_CAN_TxMailbox1CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b13      	cmp	r3, #19
 8001596:	ddb8      	ble.n	800150a <HAL_CAN_TxMailbox1CompleteCallback+0xe>
            }
        }

    }

}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000019c 	.word	0x2000019c

080015a8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e043      	b.n	800163e <HAL_CAN_TxMailbox2CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 80015b6:	4926      	ldr	r1, [pc, #152]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3324      	adds	r3, #36	; 0x24
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d135      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 80015cc:	4920      	ldr	r1, [pc, #128]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d12a      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 80015e2:	491b      	ldr	r1, [pc, #108]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015fe:	4413      	add	r3, r2
 8001600:	1d19      	adds	r1, r3, #4
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	3318      	adds	r3, #24
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 8001610:	4413      	add	r3, r2
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	f001 ff82 	bl	8003520 <HAL_CAN_AddTxMessage>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10a      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 8001622:	490b      	ldr	r1, [pc, #44]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3324      	adds	r3, #36	; 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
                    break;
 8001636:	e006      	b.n	8001646 <HAL_CAN_TxMailbox2CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b13      	cmp	r3, #19
 8001642:	ddb8      	ble.n	80015b6 <HAL_CAN_TxMailbox2CompleteCallback+0xe>
            }
        }

    }

}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000019c 	.word	0x2000019c

08001654 <CAN_SendMessage>:




void CAN_SendMessage(CAN_HandleTypeDef *hcan,uint32_t ID,uint32_t DLC, uint8_t *data)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
    uint32_t pTxMailbox;

    if(IS_CAN_STDID(ID))
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001668:	d206      	bcs.n	8001678 <CAN_SendMessage+0x24>
    {
        pHeader.IDE = CAN_ID_STD;
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <CAN_SendMessage+0x164>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
        pHeader.StdId = ID;
 8001670:	4a51      	ldr	r2, [pc, #324]	; (80017b8 <CAN_SendMessage+0x164>)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e019      	b.n	80016ac <CAN_SendMessage+0x58>
    }
    else if (IS_CAN_EXTID(ID))
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167e:	d206      	bcs.n	800168e <CAN_SendMessage+0x3a>
    {
        pHeader.IDE = CAN_ID_EXT;
 8001680:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <CAN_SendMessage+0x164>)
 8001682:	2204      	movs	r2, #4
 8001684:	609a      	str	r2, [r3, #8]
        pHeader.ExtId = ID;
 8001686:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <CAN_SendMessage+0x164>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	6053      	str	r3, [r2, #4]
 800168c:	e00e      	b.n	80016ac <CAN_SendMessage+0x58>
    }
    else
    {
        if (hcan == &hcan1) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <CAN_SendMessage+0x168>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d103      	bne.n	800169e <CAN_SendMessage+0x4a>
            myErrorFlag.Can1.Send.noProperId = true;
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <CAN_SendMessage+0x16c>)
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
 800169c:	e006      	b.n	80016ac <CAN_SendMessage+0x58>
        }
        else if (hcan == &hcan2) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <CAN_SendMessage+0x170>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d102      	bne.n	80016ac <CAN_SendMessage+0x58>
            myErrorFlag.Can2.Send.noProperId = true;
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	72da      	strb	r2, [r3, #11]
        }
    }

    if (DLC <= 8)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d803      	bhi.n	80016ba <CAN_SendMessage+0x66>
    {
        pHeader.DLC = DLC;
 80016b2:	4a41      	ldr	r2, [pc, #260]	; (80017b8 <CAN_SendMessage+0x164>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6113      	str	r3, [r2, #16]
 80016b8:	e00e      	b.n	80016d8 <CAN_SendMessage+0x84>
    }
    else
    {
        if (hcan == &hcan1) {
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <CAN_SendMessage+0x168>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d103      	bne.n	80016ca <CAN_SendMessage+0x76>
            myErrorFlag.Can1.Send.noValidDLC = true;
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	715a      	strb	r2, [r3, #5]
 80016c8:	e006      	b.n	80016d8 <CAN_SendMessage+0x84>
        }
        else if (hcan == &hcan2) {
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4a3d      	ldr	r2, [pc, #244]	; (80017c4 <CAN_SendMessage+0x170>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d102      	bne.n	80016d8 <CAN_SendMessage+0x84>
            myErrorFlag.Can2.Send.noValidDLC = true;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	731a      	strb	r2, [r3, #12]
        }
    }

    if(HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0)// check mailboxes
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f001 fff0 	bl	80036be <HAL_CAN_GetTxMailboxesFreeLevel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <CAN_SendMessage+0xa0>
    {
        HAL_CAN_AddTxMessage(hcan, &pHeader, data, &pTxMailbox);
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4933      	ldr	r1, [pc, #204]	; (80017b8 <CAN_SendMessage+0x164>)
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f001 ff17 	bl	8003520 <HAL_CAN_AddTxMessage>
        {
            Canbuffer[indx].data[i] = *data++;
        }
        Canbuffer[indx].Tr = 1;
    }
}
 80016f2:	e05d      	b.n	80017b0 <CAN_SendMessage+0x15c>
        if(Canbuffer[indx].Tr == 1)
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <CAN_SendMessage+0x174>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4a34      	ldr	r2, [pc, #208]	; (80017cc <CAN_SendMessage+0x178>)
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	3324      	adds	r3, #36	; 0x24
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <CAN_SendMessage+0xc6>
            indx++;
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <CAN_SendMessage+0x174>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <CAN_SendMessage+0x174>)
 8001718:	701a      	strb	r2, [r3, #0]
        if(indx >= (CAN_TX_BUFFER_SIZE -1) )
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <CAN_SendMessage+0x174>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b12      	cmp	r3, #18
 8001720:	d902      	bls.n	8001728 <CAN_SendMessage+0xd4>
            indx = 0;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <CAN_SendMessage+0x174>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
        Canbuffer[indx].hcan = hcan;
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <CAN_SendMessage+0x174>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <CAN_SendMessage+0x178>)
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]
        Canbuffer[indx].pHeader = pHeader;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <CAN_SendMessage+0x174>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <CAN_SendMessage+0x178>)
 8001746:	460b      	mov	r3, r1
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <CAN_SendMessage+0x164>)
 8001752:	1d1c      	adds	r4, r3, #4
 8001754:	4615      	mov	r5, r2
 8001756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800175e:	e884 0003 	stmia.w	r4, {r0, r1}
        for(int i = 0; i<8; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e014      	b.n	8001792 <CAN_SendMessage+0x13e>
            Canbuffer[indx].data[i] = *data++;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	603a      	str	r2, [r7, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <CAN_SendMessage+0x174>)
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4611      	mov	r1, r2
 8001774:	7818      	ldrb	r0, [r3, #0]
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <CAN_SendMessage+0x178>)
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	441a      	add	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	331c      	adds	r3, #28
 8001788:	4602      	mov	r2, r0
 800178a:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i<8; i++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b07      	cmp	r3, #7
 8001796:	dde7      	ble.n	8001768 <CAN_SendMessage+0x114>
        Canbuffer[indx].Tr = 1;
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <CAN_SendMessage+0x174>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <CAN_SendMessage+0x178>)
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	3324      	adds	r3, #36	; 0x24
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	200004bc 	.word	0x200004bc
 80017bc:	20001b60 	.word	0x20001b60
 80017c0:	200010b8 	.word	0x200010b8
 80017c4:	20001b88 	.word	0x20001b88
 80017c8:	200004d4 	.word	0x200004d4
 80017cc:	2000019c 	.word	0x2000019c

080017d0 <CAN_GetMessage>:



void CAN_GetMessage(CAN_HandleTypeDef *hcan) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	; 0x50
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef myRxHeader;
    uint8_t CAN_Rx_Buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80017d8:	4a9c      	ldr	r2, [pc, #624]	; (8001a4c <CAN_GetMessage+0x27c>)
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e2:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_CAN_GetRxMessage(hcan, CAN_FilterFIFO0, &myRxHeader, CAN_Rx_Buffer);
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	f107 0220 	add.w	r2, r7, #32
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f001 ff98 	bl	8003726 <HAL_CAN_GetRxMessage>
    uint32_t ID;
    if(hcan == &hcan1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a95      	ldr	r2, [pc, #596]	; (8001a50 <CAN_GetMessage+0x280>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	f040 8081 	bne.w	8001902 <CAN_GetMessage+0x132>
    {
			if(myRxHeader.StdId == 0)// if recieved message id is 0x343, add this message into queue
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10b      	bne.n	800181e <CAN_GetMessage+0x4e>
				{
					BaseType_t pxHigherPriorityTaskWoken = pdFALSE; 
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
					xQueueSendToBackFromISR( myQueue01Handle, (typedef_343h*)CAN_Rx_Buffer, &pxHigherPriorityTaskWoken );
 800180a:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <CAN_GetMessage+0x284>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	f107 0214 	add.w	r2, r7, #20
 8001812:	f107 0118 	add.w	r1, r7, #24
 8001816:	2300      	movs	r3, #0
 8001818:	f008 f8d4 	bl	80099c4 <xQueueGenericSendFromISR>
					}

    }


}
 800181c:	e111      	b.n	8001a42 <CAN_GetMessage+0x272>
        if (myRxHeader.IDE == CAN_ID_STD)
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10e      	bne.n	8001842 <CAN_GetMessage+0x72>
            CAN_SendMessage(&hcan2,myRxHeader.StdId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	488a      	ldr	r0, [pc, #552]	; (8001a58 <CAN_GetMessage+0x288>)
 800182e:	f7ff ff11 	bl	8001654 <CAN_SendMessage>
            StoreCANID(myRxHeader.StdId, 1);
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	2101      	movs	r1, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f914 	bl	8001a64 <StoreCANID>
            ID = myRxHeader.StdId;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001840:	e010      	b.n	8001864 <CAN_GetMessage+0x94>
        else if (myRxHeader.IDE == CAN_ID_EXT)
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	2b04      	cmp	r3, #4
 8001846:	d10d      	bne.n	8001864 <CAN_GetMessage+0x94>
            CAN_SendMessage(&hcan2,myRxHeader.ExtId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4881      	ldr	r0, [pc, #516]	; (8001a58 <CAN_GetMessage+0x288>)
 8001852:	f7ff feff 	bl	8001654 <CAN_SendMessage>
            ID = myRxHeader.ExtId;
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	64fb      	str	r3, [r7, #76]	; 0x4c
            StoreCANID(myRxHeader.ExtId, 1);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	2101      	movs	r1, #1
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f900 	bl	8001a64 <StoreCANID>
        for(int i = 0; i<CAN1_Buffer_size; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	64bb      	str	r3, [r7, #72]	; 0x48
 8001868:	e047      	b.n	80018fa <CAN_GetMessage+0x12a>
            if(CAN_Bridge_MSG.CAN1_MSG[i].ID == ID || CAN_Bridge_MSG.CAN1_MSG[i].ID == 0x00)
 800186a:	4a7c      	ldr	r2, [pc, #496]	; (8001a5c <CAN_GetMessage+0x28c>)
 800186c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001876:	429a      	cmp	r2, r3
 8001878:	d006      	beq.n	8001888 <CAN_GetMessage+0xb8>
 800187a:	4a78      	ldr	r2, [pc, #480]	; (8001a5c <CAN_GetMessage+0x28c>)
 800187c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4413      	add	r3, r2
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d135      	bne.n	80018f4 <CAN_GetMessage+0x124>
				CAN_Bridge_MSG.CAN1_MSG[i].DLC = myRxHeader.DLC;
 8001888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188a:	b2d9      	uxtb	r1, r3
 800188c:	4a73      	ldr	r2, [pc, #460]	; (8001a5c <CAN_GetMessage+0x28c>)
 800188e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	330c      	adds	r3, #12
 8001896:	460a      	mov	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
                CAN_Bridge_MSG.CAN1_MSG[i].ID = ID;
 800189a:	4a70      	ldr	r2, [pc, #448]	; (8001a5c <CAN_GetMessage+0x28c>)
 800189c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018a4:	601a      	str	r2, [r3, #0]
                CAN_Bridge_MSG.CAN1_MSG[i].cnt++;
 80018a6:	4a6d      	ldr	r2, [pc, #436]	; (8001a5c <CAN_GetMessage+0x28c>)
 80018a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	330d      	adds	r3, #13
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2d9      	uxtb	r1, r3
 80018b6:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <CAN_GetMessage+0x28c>)
 80018b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	330d      	adds	r3, #13
 80018c0:	460a      	mov	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
                for(int j = 0; j<8; j++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44
 80018c8:	e010      	b.n	80018ec <CAN_GetMessage+0x11c>
                    CAN_Bridge_MSG.CAN1_MSG[i].Data[j] = CAN_Rx_Buffer[j];
 80018ca:	f107 0218 	add.w	r2, r7, #24
 80018ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d0:	4413      	add	r3, r2
 80018d2:	7819      	ldrb	r1, [r3, #0]
 80018d4:	4a61      	ldr	r2, [pc, #388]	; (8001a5c <CAN_GetMessage+0x28c>)
 80018d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	441a      	add	r2, r3
 80018dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	460a      	mov	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
                for(int j = 0; j<8; j++)
 80018e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e8:	3301      	adds	r3, #1
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
 80018ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	ddeb      	ble.n	80018ca <CAN_GetMessage+0xfa>
                break;
 80018f2:	e0a6      	b.n	8001a42 <CAN_GetMessage+0x272>
        for(int i = 0; i<CAN1_Buffer_size; i++)
 80018f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018f6:	3301      	adds	r3, #1
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018fc:	2b27      	cmp	r3, #39	; 0x27
 80018fe:	ddb4      	ble.n	800186a <CAN_GetMessage+0x9a>
}
 8001900:	e09f      	b.n	8001a42 <CAN_GetMessage+0x272>
    else if(hcan == &hcan2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <CAN_GetMessage+0x288>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 809b 	bne.w	8001a42 <CAN_GetMessage+0x272>
				if(myRxHeader.StdId == 0x343)// if recieved message id is ShiftCommand_ID, add this message into queue
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	f240 3243 	movw	r2, #835	; 0x343
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <CAN_GetMessage+0x15e>
					BaseType_t pxHigherPriorityTaskWoken = pdFALSE; 
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
					xQueueSendToBackFromISR( myQueue02Handle, CAN_Rx_Buffer, &pxHigherPriorityTaskWoken );
 800191a:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <CAN_GetMessage+0x290>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 0210 	add.w	r2, r7, #16
 8001922:	f107 0118 	add.w	r1, r7, #24
 8001926:	2300      	movs	r3, #0
 8001928:	f008 f84c 	bl	80099c4 <xQueueGenericSendFromISR>
 800192c:	e033      	b.n	8001996 <CAN_GetMessage+0x1c6>
				else if(myRxHeader.StdId == 0x191)// if recieved message id is ShiftCommand_ID, add this message into queue
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f240 1291 	movw	r2, #401	; 0x191
 8001934:	4293      	cmp	r3, r2
 8001936:	d10b      	bne.n	8001950 <CAN_GetMessage+0x180>
					BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
					xQueueSendToBackFromISR( myQueue01Handle, CAN_Rx_Buffer, &pxHigherPriorityTaskWoken );
 800193c:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <CAN_GetMessage+0x284>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	f107 020c 	add.w	r2, r7, #12
 8001944:	f107 0118 	add.w	r1, r7, #24
 8001948:	2300      	movs	r3, #0
 800194a:	f008 f83b 	bl	80099c4 <xQueueGenericSendFromISR>
 800194e:	e022      	b.n	8001996 <CAN_GetMessage+0x1c6>
					if (myRxHeader.IDE == CAN_ID_STD)
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10e      	bne.n	8001974 <CAN_GetMessage+0x1a4>
							CAN_SendMessage(&hcan1,myRxHeader.StdId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001956:	6a39      	ldr	r1, [r7, #32]
 8001958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	483c      	ldr	r0, [pc, #240]	; (8001a50 <CAN_GetMessage+0x280>)
 8001960:	f7ff fe78 	bl	8001654 <CAN_SendMessage>
							ID = myRxHeader.StdId;
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
							StoreCANID(myRxHeader.StdId, 2);
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	2102      	movs	r1, #2
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f879 	bl	8001a64 <StoreCANID>
 8001972:	e010      	b.n	8001996 <CAN_GetMessage+0x1c6>
					else if (myRxHeader.IDE == CAN_ID_EXT)
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	2b04      	cmp	r3, #4
 8001978:	d10d      	bne.n	8001996 <CAN_GetMessage+0x1c6>
							CAN_SendMessage(&hcan1,myRxHeader.ExtId,myRxHeader.DLC, CAN_Rx_Buffer);
 800197a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800197e:	f107 0318 	add.w	r3, r7, #24
 8001982:	4833      	ldr	r0, [pc, #204]	; (8001a50 <CAN_GetMessage+0x280>)
 8001984:	f7ff fe66 	bl	8001654 <CAN_SendMessage>
							ID = myRxHeader.ExtId;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	64fb      	str	r3, [r7, #76]	; 0x4c
							StoreCANID(myRxHeader.ExtId, 2);
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	2102      	movs	r1, #2
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f867 	bl	8001a64 <StoreCANID>
				for(int i = 0; i<CAN2_Buffer_size; i++)
 8001996:	2300      	movs	r3, #0
 8001998:	643b      	str	r3, [r7, #64]	; 0x40
 800199a:	e04e      	b.n	8001a3a <CAN_GetMessage+0x26a>
							if(CAN_Bridge_MSG.CAN2_MSG[i].ID == ID || CAN_Bridge_MSG.CAN2_MSG[i].ID == 0x00)
 800199c:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <CAN_GetMessage+0x28c>)
 800199e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a0:	3328      	adds	r3, #40	; 0x28
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d007      	beq.n	80019be <CAN_GetMessage+0x1ee>
 80019ae:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <CAN_GetMessage+0x28c>)
 80019b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b2:	3328      	adds	r3, #40	; 0x28
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d13a      	bne.n	8001a34 <CAN_GetMessage+0x264>
									CAN_Bridge_MSG.CAN2_MSG[i].DLC = myRxHeader.DLC;
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c0:	b2d9      	uxtb	r1, r3
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <CAN_GetMessage+0x28c>)
 80019c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80019ce:	460a      	mov	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
									CAN_Bridge_MSG.CAN2_MSG[i].ID = ID;
 80019d2:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <CAN_GetMessage+0x28c>)
 80019d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d6:	3328      	adds	r3, #40	; 0x28
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4413      	add	r3, r2
 80019dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019de:	601a      	str	r2, [r3, #0]
									CAN_Bridge_MSG.CAN2_MSG[i].cnt++;
 80019e0:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <CAN_GetMessage+0x28c>)
 80019e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	4413      	add	r3, r2
 80019e8:	f203 238d 	addw	r3, r3, #653	; 0x28d
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	b2d9      	uxtb	r1, r3
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <CAN_GetMessage+0x28c>)
 80019f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f203 238d 	addw	r3, r3, #653	; 0x28d
 80019fe:	460a      	mov	r2, r1
 8001a00:	701a      	strb	r2, [r3, #0]
									for(int j = 0; j<8; j++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a06:	e011      	b.n	8001a2c <CAN_GetMessage+0x25c>
											CAN_Bridge_MSG.CAN2_MSG[i].Data[j] = CAN_Rx_Buffer[j];
 8001a08:	f107 0218 	add.w	r2, r7, #24
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0e:	4413      	add	r3, r2
 8001a10:	7819      	ldrb	r1, [r3, #0]
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <CAN_GetMessage+0x28c>)
 8001a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	441a      	add	r2, r3
 8001a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001a22:	460a      	mov	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
									for(int j = 0; j<8; j++)
 8001a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a28:	3301      	adds	r3, #1
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2e:	2b07      	cmp	r3, #7
 8001a30:	ddea      	ble.n	8001a08 <CAN_GetMessage+0x238>
									break;
 8001a32:	e006      	b.n	8001a42 <CAN_GetMessage+0x272>
				for(int i = 0; i<CAN2_Buffer_size; i++)
 8001a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a36:	3301      	adds	r3, #1
 8001a38:	643b      	str	r3, [r7, #64]	; 0x40
 8001a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a3c:	2b95      	cmp	r3, #149	; 0x95
 8001a3e:	ddad      	ble.n	800199c <CAN_GetMessage+0x1cc>
}
 8001a40:	e7ff      	b.n	8001a42 <CAN_GetMessage+0x272>
 8001a42:	bf00      	nop
 8001a44:	3750      	adds	r7, #80	; 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	0800be18 	.word	0x0800be18
 8001a50:	20001b60 	.word	0x20001b60
 8001a54:	20001bc4 	.word	0x20001bc4
 8001a58:	20001b88 	.word	0x20001b88
 8001a5c:	200004d8 	.word	0x200004d8
 8001a60:	20001bc8 	.word	0x20001bc8

08001a64 <StoreCANID>:

uint32_t IDlist1[250],IDlist2[250];
uint8_t StoreCANID(uint32_t ID, uint8_t Port)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
	static uint16_t index1=0,index2=0;
	if(Port == 1)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d11c      	bne.n	8001ab0 <StoreCANID+0x4c>
	{
		for(int i=0;i<250;i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e00b      	b.n	8001a94 <StoreCANID+0x30>
		{
			if(IDlist1[i]==ID)
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <StoreCANID+0x98>)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d101      	bne.n	8001a8e <StoreCANID+0x2a>
				return 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e031      	b.n	8001af2 <StoreCANID+0x8e>
		for(int i=0;i<250;i++)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2bf9      	cmp	r3, #249	; 0xf9
 8001a98:	ddf0      	ble.n	8001a7c <StoreCANID+0x18>
		}
		IDlist1[index1++] = ID;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <StoreCANID+0x9c>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	b291      	uxth	r1, r2
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <StoreCANID+0x9c>)
 8001aa4:	8011      	strh	r1, [r2, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <StoreCANID+0x98>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	}
	if(Port == 2)
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d11c      	bne.n	8001af0 <StoreCANID+0x8c>
	{
		for(int i=0;i<250;i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	e00b      	b.n	8001ad4 <StoreCANID+0x70>
		{
			if(IDlist2[i]==ID)
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <StoreCANID+0xa0>)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d101      	bne.n	8001ace <StoreCANID+0x6a>
				return 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e011      	b.n	8001af2 <StoreCANID+0x8e>
		for(int i=0;i<250;i++)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2bf9      	cmp	r3, #249	; 0xf9
 8001ad8:	ddf0      	ble.n	8001abc <StoreCANID+0x58>
		}
		IDlist2[index2++] = ID;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <StoreCANID+0xa4>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	b291      	uxth	r1, r2
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <StoreCANID+0xa4>)
 8001ae4:	8011      	strh	r1, [r2, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <StoreCANID+0xa0>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	}


	return 1;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	200010c8 	.word	0x200010c8
 8001b00:	20001898 	.word	0x20001898
 8001b04:	200014b0 	.word	0x200014b0
 8001b08:	2000189a 	.word	0x2000189a

08001b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <vApplicationGetIdleTaskMemory+0x28>)
 8001b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	2000189c 	.word	0x2000189c
 8001b38:	200018f0 	.word	0x200018f0

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b5b0      	push	{r4, r5, r7, lr}
 8001b3e:	b0b2      	sub	sp, #200	; 0xc8
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b42:	f000 ff53 	bl	80029ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b46:	f000 f8dd 	bl	8001d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4a:	f000 f9eb 	bl	8001f24 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001b4e:	f000 f97d 	bl	8001e4c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001b52:	f000 f9b1 	bl	8001eb8 <MX_CAN2_Init>
  MX_ADC1_Init();
 8001b56:	f000 f93b 	bl	8001dd0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig();
 8001b5a:	f7ff fc0d 	bl	8001378 <CAN_FilterConfig>
  HAL_ADC_Start(&hadc1);
 8001b5e:	4857      	ldr	r0, [pc, #348]	; (8001cbc <main+0x180>)
 8001b60:	f001 f872 	bl	8002c48 <HAL_ADC_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SartStopSem01 */
  osSemaphoreDef(SartStopSem01);
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  SartStopSem01Handle = osSemaphoreCreate(osSemaphore(SartStopSem01), 1);
 8001b70:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b74:	2101      	movs	r1, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f007 fbe1 	bl	800933e <osSemaphoreCreate>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <main+0x184>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* definition and creation of HandBrakeSem02 */
  osSemaphoreDef(HandBrakeSem02);
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HandBrakeSem02Handle = osSemaphoreCreate(osSemaphore(HandBrakeSem02), 1);
 8001b8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b92:	2101      	movs	r1, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f007 fbd2 	bl	800933e <osSemaphoreCreate>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <main+0x188>)
 8001b9e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ParkBrakeSem03 */
  osSemaphoreDef(ParkBrakeSem03);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ParkBrakeSem03Handle = osSemaphoreCreate(osSemaphore(ParkBrakeSem03), 1);
 8001bac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 fbc3 	bl	800933e <osSemaphoreCreate>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <main+0x18c>)
 8001bbc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 8, uint8_t[8]);
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <main+0x190>)
 8001bc0:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001bca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f007 fbe6 	bl	80093a2 <osMessageCreate>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a3d      	ldr	r2, [pc, #244]	; (8001cd0 <main+0x194>)
 8001bda:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 8, typedef_Command);
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <main+0x198>)
 8001bde:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8001be8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f007 fbd7 	bl	80093a2 <osMessageCreate>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <main+0x19c>)
 8001bf8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <main+0x1a0>)
 8001bfc:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001c00:	461d      	mov	r5, r3
 8001c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f007 fb32 	bl	800927e <osThreadCreate>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a30      	ldr	r2, [pc, #192]	; (8001ce0 <main+0x1a4>)
 8001c1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myButtonTask */
  osThreadDef(myButtonTask, StartTask02, osPriorityBelowNormal, 0, 128);
 8001c20:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <main+0x1a8>)
 8001c22:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001c26:	461d      	mov	r5, r3
 8001c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myButtonTaskHandle = osThreadCreate(osThread(myButtonTask), NULL);
 8001c34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f007 fb1f 	bl	800927e <osThreadCreate>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <main+0x1ac>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, HandBrake, osPriorityLow, 0, 128);
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <main+0x1b0>)
 8001c48:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001c5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 fb0c 	bl	800927e <osThreadCreate>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <main+0x1b4>)
 8001c6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartStop, osPriorityLow, 0, 128);
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <main+0x1b8>)
 8001c6e:	f107 0420 	add.w	r4, r7, #32
 8001c72:	461d      	mov	r5, r3
 8001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f007 faf9 	bl	800927e <osThreadCreate>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <main+0x1bc>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, ParkBrake, osPriorityLow, 0, 128);
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <main+0x1c0>)
 8001c94:	1d3c      	adds	r4, r7, #4
 8001c96:	461d      	mov	r5, r3
 8001c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ca0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f007 fae8 	bl	800927e <osThreadCreate>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <main+0x1c4>)
 8001cb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001cb4:	f007 fadc 	bl	8009270 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <main+0x17c>
 8001cba:	bf00      	nop
 8001cbc:	20001b30 	.word	0x20001b30
 8001cc0:	20001bcc 	.word	0x20001bcc
 8001cc4:	20001bd0 	.word	0x20001bd0
 8001cc8:	20001bd4 	.word	0x20001bd4
 8001ccc:	0800be60 	.word	0x0800be60
 8001cd0:	20001bc4 	.word	0x20001bc4
 8001cd4:	0800be70 	.word	0x0800be70
 8001cd8:	20001bc8 	.word	0x20001bc8
 8001cdc:	0800be80 	.word	0x0800be80
 8001ce0:	20001bb0 	.word	0x20001bb0
 8001ce4:	0800be9c 	.word	0x0800be9c
 8001ce8:	20001bb4 	.word	0x20001bb4
 8001cec:	0800beb8 	.word	0x0800beb8
 8001cf0:	20001bb8 	.word	0x20001bb8
 8001cf4:	0800bed4 	.word	0x0800bed4
 8001cf8:	20001bbc 	.word	0x20001bbc
 8001cfc:	0800bef0 	.word	0x0800bef0
 8001d00:	20001bc0 	.word	0x20001bc0

08001d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b09c      	sub	sp, #112	; 0x70
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d0e:	2238      	movs	r2, #56	; 0x38
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f00a f86c 	bl	800bdf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00a f85e 	bl	800bdf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d42:	2301      	movs	r3, #1
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d54:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fbe4 	bl	8005530 <HAL_RCC_OscConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001d6e:	f000 fbcb 	bl	8002508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d72:	230f      	movs	r3, #15
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d76:	2302      	movs	r3, #2
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fee4 	bl	8005b5c <HAL_RCC_ClockConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d9a:	f000 fbb5 	bl	8002508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001d9e:	2312      	movs	r3, #18
 8001da0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 f91e 	bl	8005ff0 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001dba:	f000 fba5 	bl	8002508 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001dbe:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <SystemClock_Config+0xc8>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	3770      	adds	r7, #112	; 0x70
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	42420070 	.word	0x42420070

08001dd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <MX_ADC1_Init+0x78>)
 8001de4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001dfa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001e0e:	f000 fe43 	bl	8002a98 <HAL_ADC_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001e18:	f000 fb76 	bl	8002508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_ADC1_Init+0x74>)
 8001e2e:	f000 ffc5 	bl	8002dbc <HAL_ADC_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e38:	f000 fb66 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20001b30 	.word	0x20001b30
 8001e48:	40012400 	.word	0x40012400

08001e4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e52:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <MX_CAN1_Init+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e58:	2209      	movs	r2, #9
 8001e5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e6a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001e6e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_CAN1_Init+0x64>)
 8001e9c:	f001 f921 	bl	80030e2 <HAL_CAN_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001ea6:	f000 fb2f 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20001b60 	.word	0x20001b60
 8001eb4:	40006400 	.word	0x40006400

08001eb8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <MX_CAN2_Init+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ec4:	2209      	movs	r2, #9
 8001ec6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ed6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001eda:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_CAN2_Init+0x64>)
 8001f08:	f001 f8eb 	bl	80030e2 <HAL_CAN_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001f12:	f000 faf9 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20001b88 	.word	0x20001b88
 8001f20:	40006800 	.word	0x40006800

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f38:	4b37      	ldr	r3, [pc, #220]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a36      	ldr	r2, [pc, #216]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f3e:	f043 0320 	orr.w	r3, r3, #32
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f56:	f043 0310 	orr.w	r3, r3, #16
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <MX_GPIO_Init+0xf4>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_COIL_Pin|LS_SWITCH_2_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	210a      	movs	r1, #10
 8001f9c:	481f      	ldr	r0, [pc, #124]	; (800201c <MX_GPIO_Init+0xf8>)
 8001f9e:	f002 f97d 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LS_SWITCH_1_GPIO_Port, LS_SWITCH_1_Pin, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	481e      	ldr	r0, [pc, #120]	; (8002020 <MX_GPIO_Init+0xfc>)
 8001fa8:	f002 f978 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_PULL_Pin|HB_PUSH_Pin|CAN2_STBY_Pin|CAN1_STBY_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f243 0190 	movw	r1, #12432	; 0x3090
 8001fb2:	481c      	ldr	r0, [pc, #112]	; (8002024 <MX_GPIO_Init+0x100>)
 8001fb4:	f002 f972 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_COIL_Pin LS_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = RELAY_COIL_Pin|LS_SWITCH_2_Pin;
 8001fb8:	230a      	movs	r3, #10
 8001fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4813      	ldr	r0, [pc, #76]	; (800201c <MX_GPIO_Init+0xf8>)
 8001fd0:	f001 ffe0 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LS_SWITCH_1_Pin;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_GPIO_Init+0xfc>)
 8001fec:	f001 ffd2 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_PULL_Pin HB_PUSH_Pin CAN2_STBY_Pin CAN1_STBY_Pin */
  GPIO_InitStruct.Pin = HB_PULL_Pin|HB_PUSH_Pin|CAN2_STBY_Pin|CAN1_STBY_Pin;
 8001ff0:	f243 0390 	movw	r3, #12432	; 0x3090
 8001ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4619      	mov	r1, r3
 8002008:	4806      	ldr	r0, [pc, #24]	; (8002024 <MX_GPIO_Init+0x100>)
 800200a:	f001 ffc3 	bl	8003f94 <HAL_GPIO_Init>

}
 800200e:	bf00      	nop
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40011000 	.word	0x40011000
 8002020:	40010800 	.word	0x40010800
 8002024:	40010c00 	.word	0x40010c00

08002028 <CDC_ReceiveCallback>:

/* USER CODE BEGIN 4 */
uint8_t data[64];
float SetSteering,  setAcc;
void CDC_ReceiveCallback(uint8_t *buf, uint32_t len) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	memcpy((void *)receive,(const void *)buf,(size_t)len);
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <CDC_ReceiveCallback+0x34>)
 8002038:	f009 fecc 	bl	800bdd4 <memcpy>
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <CDC_ReceiveCallback+0x34>)
 800203e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002042:	461a      	mov	r2, r3
	memcpy((void *)&SetSteering,(const void *)&receive[2],(size_t)4);
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <CDC_ReceiveCallback+0x38>)
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <CDC_ReceiveCallback+0x34>)
 800204a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800204e:	461a      	mov	r2, r3
	memcpy((void *)&setAcc,(const void *)&receive[6],(size_t)4);
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <CDC_ReceiveCallback+0x3c>)
 8002052:	601a      	str	r2, [r3, #0]

}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20001af0 	.word	0x20001af0
 8002060:	20001be8 	.word	0x20001be8
 8002064:	20001bec 	.word	0x20001bec

08002068 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002070:	f009 f9c4 	bl	800b3fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  xQueueReceive( myQueue02Handle, bytes, portMAX_DELAY );//Task will be blocked until CAN frame is recieved
 8002074:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <StartDefaultTask+0x140>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	494b      	ldr	r1, [pc, #300]	; (80021ac <StartDefaultTask+0x144>)
 800207e:	4618      	mov	r0, r3
 8002080:	f007 fd38 	bl	8009af4 <xQueueReceive>





	  			memcpy((void *)bytesc,(const void *)bytes,(size_t)8);
 8002084:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <StartDefaultTask+0x148>)
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <StartDefaultTask+0x144>)
 8002088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800208c:	e883 0003 	stmia.w	r3, {r0, r1}
	  			byte3.LKA_ACTIVE = 0;
	  		 	 	 */


	  			//SetSteerAngle = (int16_t)(Commandstruct.SetSteerAngle / 0.0573);
	  			SetACC = (int16_t)(setAcc / 0.001);
 8002090:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <StartDefaultTask+0x14c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa2f 	bl	80004f8 <__aeabi_f2d>
 800209a:	a341      	add	r3, pc, #260	; (adr r3, 80021a0 <StartDefaultTask+0x138>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fbac 	bl	80007fc <__aeabi_ddiv>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fc8e 	bl	80009cc <__aeabi_d2iz>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <StartDefaultTask+0x150>)
 80020b6:	801a      	strh	r2, [r3, #0]
	  			bytesc[2] = SetSteerAngle & 0x00FF;
	  			bytesc[3] = *(uint8_t*)&byte3;
				bytesc[4] = PERCENTAGE;
				bytesc[5] = SETME_X64;
				bytesc[6] = ANGLE;*/
	  			bytesc[0] = SetACC >> 8;
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <StartDefaultTask+0x150>)
 80020ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020be:	121b      	asrs	r3, r3, #8
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <StartDefaultTask+0x148>)
 80020c6:	701a      	strb	r2, [r3, #0]
	  			bytesc[1] = SetACC & 0x00FF;
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <StartDefaultTask+0x150>)
 80020ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <StartDefaultTask+0x148>)
 80020d2:	705a      	strb	r2, [r3, #1]
	  			bytesc[2] &= 0x40;
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <StartDefaultTask+0x148>)
 80020d6:	789b      	ldrb	r3, [r3, #2]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <StartDefaultTask+0x148>)
 80020e0:	709a      	strb	r2, [r3, #2]
	  			bytesc[3] |= 0x40;// permit braking
 80020e2:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <StartDefaultTask+0x148>)
 80020e4:	78db      	ldrb	r3, [r3, #3]
 80020e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <StartDefaultTask+0x148>)
 80020ee:	70da      	strb	r2, [r3, #3]

	  			uint8_t temp[8];
	  			for(int i= 0;i<8;i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e00d      	b.n	8002112 <StartDefaultTask+0xaa>
	  			{
	  				temp[i] = bytesc[7-i];
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f1c3 0307 	rsb	r3, r3, #7
 80020fc:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <StartDefaultTask+0x148>)
 80020fe:	5cd1      	ldrb	r1, [r2, r3]
 8002100:	f107 0210 	add.w	r2, r7, #16
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	460a      	mov	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
	  			for(int i= 0;i<8;i++)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b07      	cmp	r3, #7
 8002116:	ddee      	ble.n	80020f6 <StartDefaultTask+0x8e>
	  			}
	  			bytesc[7] = toyota_checksum(0x343, *(uint64_t*)temp, 8);
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	2108      	movs	r1, #8
 8002122:	9100      	str	r1, [sp, #0]
 8002124:	f240 3043 	movw	r0, #835	; 0x343
 8002128:	f7ff f8d0 	bl	80012cc <toyota_checksum>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <StartDefaultTask+0x148>)
 8002132:	71da      	strb	r2, [r3, #7]
	  			//Checksum = toyota_checksum(0x191, *(uint64_t*)bytesc, 8);
	  			//bytesc[7] = Checksum;
	  		if(Commandstruct.AutonomuosMode){
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <StartDefaultTask+0x154>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <StartDefaultTask+0xe4>

	  			CAN_SendMessage(&hcan1,0x343,8, bytesc);
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <StartDefaultTask+0x148>)
 800213e:	2208      	movs	r2, #8
 8002140:	f240 3143 	movw	r1, #835	; 0x343
 8002144:	481e      	ldr	r0, [pc, #120]	; (80021c0 <StartDefaultTask+0x158>)
 8002146:	f7ff fa85 	bl	8001654 <CAN_SendMessage>
 800214a:	e793      	b.n	8002074 <StartDefaultTask+0xc>

	  		}
	  		else
	  		{
	  			uint8_t temp[8];
	  			for(int i= 0;i<8;i++)
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e00d      	b.n	800216e <StartDefaultTask+0x106>
	  			{
	  				temp[i] = bytes[7-i];
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f1c3 0307 	rsb	r3, r3, #7
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <StartDefaultTask+0x144>)
 800215a:	5cd1      	ldrb	r1, [r2, r3]
 800215c:	f107 0208 	add.w	r2, r7, #8
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4413      	add	r3, r2
 8002164:	460a      	mov	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
	  			for(int i= 0;i<8;i++)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	3301      	adds	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b07      	cmp	r3, #7
 8002172:	ddee      	ble.n	8002152 <StartDefaultTask+0xea>
	  			}
	  			bytes[7] = toyota_checksum(0x343, *(uint64_t*)temp, 8);
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	2108      	movs	r1, #8
 800217e:	9100      	str	r1, [sp, #0]
 8002180:	f240 3043 	movw	r0, #835	; 0x343
 8002184:	f7ff f8a2 	bl	80012cc <toyota_checksum>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <StartDefaultTask+0x144>)
 800218e:	71da      	strb	r2, [r3, #7]


	  			CAN_SendMessage(&hcan1,0x343,8, bytes);
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <StartDefaultTask+0x144>)
 8002192:	2208      	movs	r2, #8
 8002194:	f240 3143 	movw	r1, #835	; 0x343
 8002198:	4809      	ldr	r0, [pc, #36]	; (80021c0 <StartDefaultTask+0x158>)
 800219a:	f7ff fa5b 	bl	8001654 <CAN_SendMessage>
  {
 800219e:	e769      	b.n	8002074 <StartDefaultTask+0xc>
 80021a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80021a4:	3f50624d 	.word	0x3f50624d
 80021a8:	20001bc8 	.word	0x20001bc8
 80021ac:	20001bf0 	.word	0x20001bf0
 80021b0:	20001bf8 	.word	0x20001bf8
 80021b4:	20001bec 	.word	0x20001bec
 80021b8:	20001c0a 	.word	0x20001c0a
 80021bc:	20001bd8 	.word	0x20001bd8
 80021c0:	20001b60 	.word	0x20001b60

080021c4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	adc = HAL_ADC_GetValue(&hadc1);
 80021cc:	4827      	ldr	r0, [pc, #156]	; (800226c <StartTask02+0xa8>)
 80021ce:	f000 fde9 	bl	8002da4 <HAL_ADC_GetValue>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a26      	ldr	r2, [pc, #152]	; (8002270 <StartTask02+0xac>)
 80021d6:	6013      	str	r3, [r2, #0]
	float min = -100;
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <StartTask02+0xb0>)
 80021da:	60fb      	str	r3, [r7, #12]
	float max = 100;
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <StartTask02+0xb4>)
 80021de:	60bb      	str	r3, [r7, #8]
	Commandstruct.SetSteerAngle = (float)((float)adc - 100.0f) * (float)(max - min) / (float)(2015.0f - 100.0f) + min;
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <StartTask02+0xac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fccf 	bl	8000b88 <__aeabi_ui2f>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4922      	ldr	r1, [pc, #136]	; (8002278 <StartTask02+0xb4>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fc18 	bl	8000a24 <__aeabi_fsub>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461c      	mov	r4, r3
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	68b8      	ldr	r0, [r7, #8]
 80021fc:	f7fe fc12 	bl	8000a24 <__aeabi_fsub>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	4620      	mov	r0, r4
 8002206:	f7fe fd17 	bl	8000c38 <__aeabi_fmul>
 800220a:	4603      	mov	r3, r0
 800220c:	491b      	ldr	r1, [pc, #108]	; (800227c <StartTask02+0xb8>)
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fdc6 	bl	8000da0 <__aeabi_fdiv>
 8002214:	4603      	mov	r3, r0
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fc05 	bl	8000a28 <__addsf3>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <StartTask02+0xbc>)
 8002224:	605a      	str	r2, [r3, #4]
	Commandstruct.SetSteerAngle = Commandstruct.SetSteerAngle > 540 ? 540 : Commandstruct.SetSteerAngle;
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <StartTask02+0xbc>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4916      	ldr	r1, [pc, #88]	; (8002284 <StartTask02+0xc0>)
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe febf 	bl	8000fb0 <__aeabi_fcmpgt>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <StartTask02+0x78>
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <StartTask02+0xc0>)
 800223a:	e001      	b.n	8002240 <StartTask02+0x7c>
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <StartTask02+0xbc>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <StartTask02+0xbc>)
 8002242:	6053      	str	r3, [r2, #4]
	Commandstruct.SetSteerAngle = Commandstruct.SetSteerAngle < -540 ? -540 : Commandstruct.SetSteerAngle;
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <StartTask02+0xbc>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	490f      	ldr	r1, [pc, #60]	; (8002288 <StartTask02+0xc4>)
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fe92 	bl	8000f74 <__aeabi_fcmplt>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <StartTask02+0x96>
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <StartTask02+0xc4>)
 8002258:	e001      	b.n	800225e <StartTask02+0x9a>
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <StartTask02+0xbc>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <StartTask02+0xbc>)
 8002260:	6053      	str	r3, [r2, #4]
	osDelay(1);
 8002262:	2001      	movs	r0, #1
 8002264:	f007 f857 	bl	8009316 <osDelay>
  {
 8002268:	e7b0      	b.n	80021cc <StartTask02+0x8>
 800226a:	bf00      	nop
 800226c:	20001b30 	.word	0x20001b30
 8002270:	20001be4 	.word	0x20001be4
 8002274:	c2c80000 	.word	0xc2c80000
 8002278:	42c80000 	.word	0x42c80000
 800227c:	44ef6000 	.word	0x44ef6000
 8002280:	20001bd8 	.word	0x20001bd8
 8002284:	44070000 	.word	0x44070000
 8002288:	c4070000 	.word	0xc4070000

0800228c <HandBrake>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandBrake */
void HandBrake(void const * argument)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	 //uint8_t usb_txbuffer[6] ="txxx" ;
	 // CDC_Transmit_FS(usb_txbuffer, 6);
    osDelay(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f007 f83e 	bl	8009316 <osDelay>
 800229a:	e7fb      	b.n	8002294 <HandBrake+0x8>
 800229c:	0000      	movs	r0, r0
	...

080022a0 <StartStop>:
* @retval None
*/
uint8_t byteD[8],bytesE[8];
/* USER CODE END Header_StartStop */
void StartStop(void const * argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStop */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive( myQueue01Handle, byteD, portMAX_DELAY );
 80022a8:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <StartStop+0x1f8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	497a      	ldr	r1, [pc, #488]	; (800249c <StartStop+0x1fc>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f007 fc1e 	bl	8009af4 <xQueueReceive>
		memcpy((void *)bytesE,(const void *)byteD,(size_t)8);
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <StartStop+0x200>)
 80022ba:	4a78      	ldr	r2, [pc, #480]	; (800249c <StartStop+0x1fc>)
 80022bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c0:	e883 0003 	stmia.w	r3, {r0, r1}
		  			byte0.set_me_X1 = 1;
 80022c4:	4a77      	ldr	r2, [pc, #476]	; (80024a4 <StartStop+0x204>)
 80022c6:	7813      	ldrb	r3, [r2, #0]
 80022c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022cc:	7013      	strb	r3, [r2, #0]
		  			byte0.steer_request = 1;
 80022ce:	4a75      	ldr	r2, [pc, #468]	; (80024a4 <StartStop+0x204>)
 80022d0:	7813      	ldrb	r3, [r2, #0]
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	7013      	strb	r3, [r2, #0]
		  			byte0.cnt = (bytes[0] >> 1) & 0x3F;
 80022d8:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <StartStop+0x208>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e4:	b2d9      	uxtb	r1, r3
 80022e6:	4a6f      	ldr	r2, [pc, #444]	; (80024a4 <StartStop+0x204>)
 80022e8:	7813      	ldrb	r3, [r2, #0]
 80022ea:	f361 0346 	bfi	r3, r1, #1, #6
 80022ee:	7013      	strb	r3, [r2, #0]
		  			SETME_X64 = 100;
 80022f0:	4b6e      	ldr	r3, [pc, #440]	; (80024ac <StartStop+0x20c>)
 80022f2:	2264      	movs	r2, #100	; 0x64
 80022f4:	701a      	strb	r2, [r3, #0]
		  			ANGLE = 0;
 80022f6:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <StartStop+0x210>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
		  			PERCENTAGE = 100;
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <StartStop+0x214>)
 80022fe:	2264      	movs	r2, #100	; 0x64
 8002300:	701a      	strb	r2, [r3, #0]
		  			byte3.SETME_X3 = 3;
 8002302:	4a6d      	ldr	r2, [pc, #436]	; (80024b8 <StartStop+0x218>)
 8002304:	7813      	ldrb	r3, [r2, #0]
 8002306:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800230a:	7013      	strb	r3, [r2, #0]
		  			byte3.STEER_REQUEST_2 = 1;
 800230c:	4a6a      	ldr	r2, [pc, #424]	; (80024b8 <StartStop+0x218>)
 800230e:	7813      	ldrb	r3, [r2, #0]
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	7013      	strb	r3, [r2, #0]
		  			byte3.BIT = 0;
 8002316:	4a68      	ldr	r2, [pc, #416]	; (80024b8 <StartStop+0x218>)
 8002318:	7813      	ldrb	r3, [r2, #0]
 800231a:	f36f 1386 	bfc	r3, #6, #1
 800231e:	7013      	strb	r3, [r2, #0]
		  			byte3.LKA_ACTIVE = 0;
 8002320:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <StartStop+0x218>)
 8002322:	7813      	ldrb	r3, [r2, #0]
 8002324:	f36f 0382 	bfc	r3, #2, #1
 8002328:	7013      	strb	r3, [r2, #0]


		  			SetSteering = SetSteering > 99 ? 99 : SetSteering;
 800232a:	4b64      	ldr	r3, [pc, #400]	; (80024bc <StartStop+0x21c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4964      	ldr	r1, [pc, #400]	; (80024c0 <StartStop+0x220>)
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fe3d 	bl	8000fb0 <__aeabi_fcmpgt>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <StartStop+0xa0>
 800233c:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <StartStop+0x220>)
 800233e:	e001      	b.n	8002344 <StartStop+0xa4>
 8002340:	4b5e      	ldr	r3, [pc, #376]	; (80024bc <StartStop+0x21c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <StartStop+0x21c>)
 8002346:	6013      	str	r3, [r2, #0]
		  			SetSteering = SetSteering < -99 ? -99 : SetSteering;
 8002348:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <StartStop+0x21c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	495d      	ldr	r1, [pc, #372]	; (80024c4 <StartStop+0x224>)
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fe10 	bl	8000f74 <__aeabi_fcmplt>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <StartStop+0xbe>
 800235a:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <StartStop+0x224>)
 800235c:	e001      	b.n	8002362 <StartStop+0xc2>
 800235e:	4b57      	ldr	r3, [pc, #348]	; (80024bc <StartStop+0x21c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a56      	ldr	r2, [pc, #344]	; (80024bc <StartStop+0x21c>)
 8002364:	6013      	str	r3, [r2, #0]
		  			SetSteerAngle = -(int16_t)(SetSteering / 0.0573);
 8002366:	4b55      	ldr	r3, [pc, #340]	; (80024bc <StartStop+0x21c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f8c4 	bl	80004f8 <__aeabi_f2d>
 8002370:	a347      	add	r3, pc, #284	; (adr r3, 8002490 <StartStop+0x1f0>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe fa41 	bl	80007fc <__aeabi_ddiv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7fe fb23 	bl	80009cc <__aeabi_d2iz>
 8002386:	4603      	mov	r3, r0
 8002388:	b21b      	sxth	r3, r3
 800238a:	b29b      	uxth	r3, r3
 800238c:	425b      	negs	r3, r3
 800238e:	b29b      	uxth	r3, r3
 8002390:	b21a      	sxth	r2, r3
 8002392:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <StartStop+0x228>)
 8002394:	801a      	strh	r2, [r3, #0]
		  			//SetACC = (int16_t)(Commandstruct.SetSteerAngle / 0.02);
		  			bytesE[0] = *(uint8_t*)&byte0;
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <StartStop+0x204>)
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <StartStop+0x200>)
 800239c:	701a      	strb	r2, [r3, #0]
		  			bytesE[1] = SetSteerAngle >> 8;
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <StartStop+0x228>)
 80023a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a4:	121b      	asrs	r3, r3, #8
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <StartStop+0x200>)
 80023ac:	705a      	strb	r2, [r3, #1]
		  			bytesE[2] = SetSteerAngle & 0x00FF;
 80023ae:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <StartStop+0x228>)
 80023b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <StartStop+0x200>)
 80023b8:	709a      	strb	r2, [r3, #2]
		  			bytesE[3] = *(uint8_t*)&byte3;
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <StartStop+0x218>)
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <StartStop+0x200>)
 80023c0:	70da      	strb	r2, [r3, #3]
		  			bytesE[4] = PERCENTAGE;
 80023c2:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <StartStop+0x214>)
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <StartStop+0x200>)
 80023c8:	711a      	strb	r2, [r3, #4]
		  			bytesE[5] = SETME_X64;
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <StartStop+0x20c>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <StartStop+0x200>)
 80023d0:	715a      	strb	r2, [r3, #5]
					bytesE[6] = ANGLE;
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <StartStop+0x210>)
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <StartStop+0x200>)
 80023d8:	719a      	strb	r2, [r3, #6]


		  			uint8_t temp[8];
		  			for(int i= 0;i<8;i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e00d      	b.n	80023fc <StartStop+0x15c>
		  			{
		  				temp[i] = bytesE[7-i];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	4a2e      	ldr	r2, [pc, #184]	; (80024a0 <StartStop+0x200>)
 80023e8:	5cd1      	ldrb	r1, [r2, r3]
 80023ea:	f107 0210 	add.w	r2, r7, #16
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	460a      	mov	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
		  			for(int i= 0;i<8;i++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b07      	cmp	r3, #7
 8002400:	ddee      	ble.n	80023e0 <StartStop+0x140>
		  			}
		  			bytesE[7] = toyota_checksum(0x191, *(uint64_t*)temp, 8);
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	2108      	movs	r1, #8
 800240c:	9100      	str	r1, [sp, #0]
 800240e:	f240 1091 	movw	r0, #401	; 0x191
 8002412:	f7fe ff5b 	bl	80012cc <toyota_checksum>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <StartStop+0x200>)
 800241c:	71da      	strb	r2, [r3, #7]
		  			//Checksum = toyota_checksum(0x191, *(uint64_t*)bytesc, 8);
		  			//bytesc[7] = Checksum;
		  		if(Commandstruct.AutonomuosMode){
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <StartStop+0x22c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <StartStop+0x196>

		  			CAN_SendMessage(&hcan1,0x191,8, bytesE);
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <StartStop+0x200>)
 8002428:	2208      	movs	r2, #8
 800242a:	f240 1191 	movw	r1, #401	; 0x191
 800242e:	4828      	ldr	r0, [pc, #160]	; (80024d0 <StartStop+0x230>)
 8002430:	f7ff f910 	bl	8001654 <CAN_SendMessage>
 8002434:	e028      	b.n	8002488 <StartStop+0x1e8>

		  		}
		  		else
		  		{
		  			uint8_t temp[8];
		  			for(int i= 0;i<8;i++)
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	e00d      	b.n	8002458 <StartStop+0x1b8>
		  			{
		  				temp[i] = byteD[7-i];
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	4a16      	ldr	r2, [pc, #88]	; (800249c <StartStop+0x1fc>)
 8002444:	5cd1      	ldrb	r1, [r2, r3]
 8002446:	f107 0208 	add.w	r2, r7, #8
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	460a      	mov	r2, r1
 8002450:	701a      	strb	r2, [r3, #0]
		  			for(int i= 0;i<8;i++)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3301      	adds	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b07      	cmp	r3, #7
 800245c:	ddee      	ble.n	800243c <StartStop+0x19c>
		  			}
		  			bytes[7] = toyota_checksum(0x191, *(uint64_t*)temp, 8);
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	2108      	movs	r1, #8
 8002468:	9100      	str	r1, [sp, #0]
 800246a:	f240 1091 	movw	r0, #401	; 0x191
 800246e:	f7fe ff2d 	bl	80012cc <toyota_checksum>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <StartStop+0x208>)
 8002478:	71da      	strb	r2, [r3, #7]


		  			CAN_SendMessage(&hcan1,0x191,8, byteD);
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <StartStop+0x1fc>)
 800247c:	2208      	movs	r2, #8
 800247e:	f240 1191 	movw	r1, #401	; 0x191
 8002482:	4813      	ldr	r0, [pc, #76]	; (80024d0 <StartStop+0x230>)
 8002484:	f7ff f8e6 	bl	8001654 <CAN_SendMessage>

		  		}

    osDelay(1);
 8002488:	2001      	movs	r0, #1
 800248a:	f006 ff44 	bl	8009316 <osDelay>
  {
 800248e:	e70b      	b.n	80022a8 <StartStop+0x8>
 8002490:	f41f212d 	.word	0xf41f212d
 8002494:	3fad566c 	.word	0x3fad566c
 8002498:	20001bc4 	.word	0x20001bc4
 800249c:	20001c0c 	.word	0x20001c0c
 80024a0:	20001c14 	.word	0x20001c14
 80024a4:	20001c04 	.word	0x20001c04
 80024a8:	20001bf0 	.word	0x20001bf0
 80024ac:	20001c05 	.word	0x20001c05
 80024b0:	20001c06 	.word	0x20001c06
 80024b4:	20001c07 	.word	0x20001c07
 80024b8:	20001c00 	.word	0x20001c00
 80024bc:	20001be8 	.word	0x20001be8
 80024c0:	42c60000 	.word	0x42c60000
 80024c4:	c2c60000 	.word	0xc2c60000
 80024c8:	20001c08 	.word	0x20001c08
 80024cc:	20001bd8 	.word	0x20001bd8
 80024d0:	20001b60 	.word	0x20001b60

080024d4 <ParkBrake>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ParkBrake */
void ParkBrake(void const * argument)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ParkBrake */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024dc:	2001      	movs	r0, #1
 80024de:	f006 ff1a 	bl	8009316 <osDelay>
 80024e2:	e7fb      	b.n	80024dc <ParkBrake+0x8>

080024e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024f6:	f000 fa8f 	bl	8002a18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40001000 	.word	0x40001000

08002508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002510:	e7fe      	b.n	8002510 <Error_Handler+0x8>
	...

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_MspInit+0x68>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_MspInit+0x68>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6193      	str	r3, [r2, #24]
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_MspInit+0x68>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_MspInit+0x68>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_MspInit+0x68>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_MspInit+0x68>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	210f      	movs	r1, #15
 800254e:	f06f 0001 	mvn.w	r0, #1
 8002552:	f001 fcf4 	bl	8003f3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_MspInit+0x6c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_MspInit+0x6c>)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000

08002584 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_ADC_MspInit+0x6c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d121      	bne.n	80025e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_ADC_MspInit+0x70>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_ADC_MspInit+0x70>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_ADC_MspInit+0x70>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_ADC_MspInit+0x70>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_ADC_MspInit+0x70>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_ADC_MspInit+0x70>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025d4:	2340      	movs	r3, #64	; 0x40
 80025d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d8:	2303      	movs	r3, #3
 80025da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4619      	mov	r1, r3
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <HAL_ADC_MspInit+0x74>)
 80025e4:	f001 fcd6 	bl	8003f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025e8:	bf00      	nop
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40012400 	.word	0x40012400
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010800 	.word	0x40010800

080025fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0320 	add.w	r3, r7, #32
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_CAN_MspInit+0x1c4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d15d      	bne.n	80026d8 <HAL_CAN_MspInit+0xdc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800261c:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_CAN_MspInit+0x1c8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a68      	ldr	r2, [pc, #416]	; (80027c4 <HAL_CAN_MspInit+0x1c8>)
 8002624:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <HAL_CAN_MspInit+0x1c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10b      	bne.n	8002646 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800262e:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 8002634:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	4b60      	ldr	r3, [pc, #384]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	4a5f      	ldr	r2, [pc, #380]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	6193      	str	r3, [r2, #24]
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800265e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	f107 0320 	add.w	r3, r7, #32
 8002670:	4619      	mov	r1, r3
 8002672:	4856      	ldr	r0, [pc, #344]	; (80027cc <HAL_CAN_MspInit+0x1d0>)
 8002674:	f001 fc8e 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4619      	mov	r1, r3
 800268c:	484f      	ldr	r0, [pc, #316]	; (80027cc <HAL_CAN_MspInit+0x1d0>)
 800268e:	f001 fc81 	bl	8003f94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002692:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_CAN_MspInit+0x1d4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
 80026b0:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_CAN_MspInit+0x1d4>)
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	2013      	movs	r0, #19
 80026bc:	f001 fc3f 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80026c0:	2013      	movs	r0, #19
 80026c2:	f001 fc58 	bl	8003f76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2105      	movs	r1, #5
 80026ca:	2014      	movs	r0, #20
 80026cc:	f001 fc37 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80026d0:	2014      	movs	r0, #20
 80026d2:	f001 fc50 	bl	8003f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80026d6:	e06f      	b.n	80027b8 <HAL_CAN_MspInit+0x1bc>
  else if(hcan->Instance==CAN2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3d      	ldr	r2, [pc, #244]	; (80027d4 <HAL_CAN_MspInit+0x1d8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d16a      	bne.n	80027b8 <HAL_CAN_MspInit+0x1bc>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 80026e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_CAN_MspInit+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a30      	ldr	r2, [pc, #192]	; (80027c4 <HAL_CAN_MspInit+0x1c8>)
 8002702:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002704:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_CAN_MspInit+0x1c8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10b      	bne.n	8002724 <HAL_CAN_MspInit+0x128>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 8002712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002716:	61d3      	str	r3, [r2, #28]
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	6193      	str	r3, [r2, #24]
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_CAN_MspInit+0x1cc>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800273c:	2320      	movs	r3, #32
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	4619      	mov	r1, r3
 800274e:	481f      	ldr	r0, [pc, #124]	; (80027cc <HAL_CAN_MspInit+0x1d0>)
 8002750:	f001 fc20 	bl	8003f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002754:	2340      	movs	r3, #64	; 0x40
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4619      	mov	r1, r3
 8002766:	4819      	ldr	r0, [pc, #100]	; (80027cc <HAL_CAN_MspInit+0x1d0>)
 8002768:	f001 fc14 	bl	8003f94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_CAN_MspInit+0x1d4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
 8002782:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_CAN_MspInit+0x1d4>)
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2105      	movs	r1, #5
 800278c:	203f      	movs	r0, #63	; 0x3f
 800278e:	f001 fbd6 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002792:	203f      	movs	r0, #63	; 0x3f
 8002794:	f001 fbef 	bl	8003f76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	2105      	movs	r1, #5
 800279c:	2040      	movs	r0, #64	; 0x40
 800279e:	f001 fbce 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80027a2:	2040      	movs	r0, #64	; 0x40
 80027a4:	f001 fbe7 	bl	8003f76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2105      	movs	r1, #5
 80027ac:	2041      	movs	r0, #65	; 0x41
 80027ae:	f001 fbc6 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80027b2:	2041      	movs	r0, #65	; 0x41
 80027b4:	f001 fbdf 	bl	8003f76 <HAL_NVIC_EnableIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	3738      	adds	r7, #56	; 0x38
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40006400 	.word	0x40006400
 80027c4:	20001c1c 	.word	0x20001c1c
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010c00 	.word	0x40010c00
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40006800 	.word	0x40006800

080027d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08e      	sub	sp, #56	; 0x38
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_InitTick+0xe8>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <HAL_InitTick+0xe8>)
 80027f4:	f043 0310 	orr.w	r3, r3, #16
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_InitTick+0xe8>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002806:	f107 0210 	add.w	r2, r7, #16
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f003 fb9f 	bl	8005f54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002820:	f003 fb84 	bl	8005f2c <HAL_RCC_GetPCLK1Freq>
 8002824:	6378      	str	r0, [r7, #52]	; 0x34
 8002826:	e004      	b.n	8002832 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002828:	f003 fb80 	bl	8005f2c <HAL_RCC_GetPCLK1Freq>
 800282c:	4603      	mov	r3, r0
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002834:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <HAL_InitTick+0xec>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	0c9b      	lsrs	r3, r3, #18
 800283c:	3b01      	subs	r3, #1
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_InitTick+0xf0>)
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_InitTick+0xf4>)
 8002844:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_InitTick+0xf0>)
 8002848:	f240 32e7 	movw	r2, #999	; 0x3e7
 800284c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_InitTick+0xf0>)
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_InitTick+0xf0>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_InitTick+0xf0>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_InitTick+0xf0>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002866:	4818      	ldr	r0, [pc, #96]	; (80028c8 <HAL_InitTick+0xf0>)
 8002868:	f003 fcf4 	bl	8006254 <HAL_TIM_Base_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11b      	bne.n	80028b2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800287a:	4813      	ldr	r0, [pc, #76]	; (80028c8 <HAL_InitTick+0xf0>)
 800287c:	f003 fd42 	bl	8006304 <HAL_TIM_Base_Start_IT>
 8002880:	4603      	mov	r3, r0
 8002882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002886:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800288a:	2b00      	cmp	r3, #0
 800288c:	d111      	bne.n	80028b2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800288e:	2036      	movs	r0, #54	; 0x36
 8002890:	f001 fb71 	bl	8003f76 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	d808      	bhi.n	80028ac <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800289a:	2200      	movs	r2, #0
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	2036      	movs	r0, #54	; 0x36
 80028a0:	f001 fb4d 	bl	8003f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_InitTick+0xf8>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e002      	b.n	80028b2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80028b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3738      	adds	r7, #56	; 0x38
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	431bde83 	.word	0x431bde83
 80028c8:	20001c20 	.word	0x20001c20
 80028cc:	40001000 	.word	0x40001000
 80028d0:	20000004 	.word	0x20000004

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <NMI_Handler+0x4>

080028da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <MemManage_Handler+0x4>

080028e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
	...

08002900 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <CAN1_TX_IRQHandler+0x10>)
 8002906:	f001 f854 	bl	80039b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20001b60 	.word	0x20001b60

08002914 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	CAN_GetMessage(&hcan1);
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <CAN1_RX0_IRQHandler+0x14>)
 800291a:	f7fe ff59 	bl	80017d0 <CAN_GetMessage>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800291e:	4802      	ldr	r0, [pc, #8]	; (8002928 <CAN1_RX0_IRQHandler+0x14>)
 8002920:	f001 f847 	bl	80039b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20001b60 	.word	0x20001b60

0800292c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <TIM6_IRQHandler+0x10>)
 8002932:	f003 fd41 	bl	80063b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20001c20 	.word	0x20001c20

08002940 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <CAN2_TX_IRQHandler+0x10>)
 8002946:	f001 f834 	bl	80039b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20001b88 	.word	0x20001b88

08002954 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	CAN_GetMessage(&hcan2);
 8002958:	4803      	ldr	r0, [pc, #12]	; (8002968 <CAN2_RX0_IRQHandler+0x14>)
 800295a:	f7fe ff39 	bl	80017d0 <CAN_GetMessage>
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800295e:	4802      	ldr	r0, [pc, #8]	; (8002968 <CAN2_RX0_IRQHandler+0x14>)
 8002960:	f001 f827 	bl	80039b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20001b88 	.word	0x20001b88

0800296c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <CAN2_RX1_IRQHandler+0x10>)
 8002972:	f001 f81e 	bl	80039b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20001b88 	.word	0x20001b88

08002980 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <OTG_FS_IRQHandler+0x10>)
 8002986:	f001 fde0 	bl	800454a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20003a50 	.word	0x20003a50

08002994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029a0:	f7ff fff8 	bl	8002994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a4:	480b      	ldr	r0, [pc, #44]	; (80029d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029a6:	490c      	ldr	r1, [pc, #48]	; (80029d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029a8:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80029bc:	4c09      	ldr	r4, [pc, #36]	; (80029e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029ca:	f009 f9df 	bl	800bd8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ce:	f7ff f8b5 	bl	8001b3c <main>
  bx lr
 80029d2:	4770      	bx	lr
  ldr r0, =_sdata
 80029d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80029dc:	0800bfa4 	.word	0x0800bfa4
  ldr r2, =_sbss
 80029e0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80029e4:	20004174 	.word	0x20004174

080029e8 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e8:	e7fe      	b.n	80029e8 <ADC1_2_IRQHandler>
	...

080029ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_Init+0x28>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <HAL_Init+0x28>)
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029fc:	2003      	movs	r0, #3
 80029fe:	f001 fa93 	bl	8003f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7ff fee8 	bl	80027d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a08:	f7ff fd84 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40022000 	.word	0x40022000

08002a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_IncTick+0x1c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_IncTick+0x20>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_IncTick+0x20>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20001c68 	.word	0x20001c68

08002a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <HAL_GetTick+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	20001c68 	.word	0x20001c68

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffe0 	bl	8002a3c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008

08002a98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0be      	b.n	8002c38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fd54 	bl	8002584 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fabf 	bl	8003060 <ADC_ConversionStop_Disable>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8099 	bne.w	8002c26 <HAL_ADC_Init+0x18e>
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 8095 	bne.w	8002c26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b04:	f023 0302 	bic.w	r3, r3, #2
 8002b08:	f043 0202 	orr.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7b1b      	ldrb	r3, [r3, #12]
 8002b1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b30:	d003      	beq.n	8002b3a <HAL_ADC_Init+0xa2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d102      	bne.n	8002b40 <HAL_ADC_Init+0xa8>
 8002b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b3e:	e000      	b.n	8002b42 <HAL_ADC_Init+0xaa>
 8002b40:	2300      	movs	r3, #0
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7d1b      	ldrb	r3, [r3, #20]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d119      	bne.n	8002b84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7b1b      	ldrb	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	035a      	lsls	r2, r3, #13
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e00b      	b.n	8002b84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_ADC_Init+0x1a8>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb4:	d003      	beq.n	8002bbe <HAL_ADC_Init+0x126>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d104      	bne.n	8002bc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_ADC_Init+0x1ac>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c02:	e018      	b.n	8002c36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f023 0312 	bic.w	r3, r3, #18
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c24:	e007      	b.n	8002c36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f043 0210 	orr.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	ffe1f7fd 	.word	0xffe1f7fd
 8002c44:	ff1f0efe 	.word	0xff1f0efe

08002c48 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_Start+0x1a>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e098      	b.n	8002d94 <HAL_ADC_Start+0x14c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f99e 	bl	8002fac <ADC_Enable>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 8087 	bne.w	8002d8a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_ADC_Start+0x154>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d105      	bne.n	8002ca6 <HAL_ADC_Start+0x5e>
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d115      	bne.n	8002cd2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d026      	beq.n	8002d0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cd0:	e01d      	b.n	8002d0e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_Start+0xaa>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <HAL_ADC_Start+0x154>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10d      	bne.n	8002d0e <HAL_ADC_Start+0xc6>
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	f023 0206 	bic.w	r2, r3, #6
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d26:	e002      	b.n	8002d2e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0202 	mvn.w	r2, #2
 8002d3e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d4e:	d113      	bne.n	8002d78 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d54:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <HAL_ADC_Start+0x154>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d105      	bne.n	8002d66 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	e00c      	b.n	8002d92 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	e003      	b.n	8002d92 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40012800 	.word	0x40012800
 8002da0:	40012400 	.word	0x40012400

08002da4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x20>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0dc      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x1da>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d81c      	bhi.n	8002e26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3b05      	subs	r3, #5
 8002dfe:	221f      	movs	r2, #31
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	4019      	ands	r1, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	3b05      	subs	r3, #5
 8002e18:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34
 8002e24:	e03c      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d81c      	bhi.n	8002e68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b23      	subs	r3, #35	; 0x23
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	4019      	ands	r1, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	3b23      	subs	r3, #35	; 0x23
 8002e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	e01b      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	3b41      	subs	r3, #65	; 0x41
 8002e7a:	221f      	movs	r2, #31
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	3b41      	subs	r3, #65	; 0x41
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b09      	cmp	r3, #9
 8002ea6:	d91c      	bls.n	8002ee2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68d9      	ldr	r1, [r3, #12]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b1e      	subs	r3, #30
 8002eba:	2207      	movs	r2, #7
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	4019      	ands	r1, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6898      	ldr	r0, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b1e      	subs	r3, #30
 8002ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	60da      	str	r2, [r3, #12]
 8002ee0:	e019      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6919      	ldr	r1, [r3, #16]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4019      	ands	r1, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6898      	ldr	r0, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d003      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f22:	2b11      	cmp	r3, #17
 8002f24:	d132      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d125      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d126      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d11a      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	0c9a      	lsrs	r2, r3, #18
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f6c:	e002      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f9      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x1b2>
 8002f7a:	e007      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40012400 	.word	0x40012400
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d040      	beq.n	800304c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <ADC_Enable+0xac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <ADC_Enable+0xb0>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	0c9b      	lsrs	r3, r3, #18
 8002fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fe8:	e002      	b.n	8002ff0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f9      	bne.n	8002fea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ff6:	f7ff fd21 	bl	8002a3c <HAL_GetTick>
 8002ffa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ffc:	e01f      	b.n	800303e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ffe:	f7ff fd1d 	bl	8002a3c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d918      	bls.n	800303e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d011      	beq.n	800303e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e007      	b.n	800304e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d1d8      	bne.n	8002ffe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000000 	.word	0x20000000
 800305c:	431bde83 	.word	0x431bde83

08003060 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d12e      	bne.n	80030d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800308a:	f7ff fcd7 	bl	8002a3c <HAL_GetTick>
 800308e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003090:	e01b      	b.n	80030ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003092:	f7ff fcd3 	bl	8002a3c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d914      	bls.n	80030ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10d      	bne.n	80030ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	f043 0210 	orr.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e007      	b.n	80030da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d0dc      	beq.n	8003092 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0ed      	b.n	80032d0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fa7b 	bl	80025fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003116:	f7ff fc91 	bl	8002a3c <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800311c:	e012      	b.n	8003144 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800311e:	f7ff fc8d 	bl	8002a3c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b0a      	cmp	r3, #10
 800312a:	d90b      	bls.n	8003144 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2205      	movs	r2, #5
 800313c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0c5      	b.n	80032d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0e5      	beq.n	800311e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0202 	bic.w	r2, r2, #2
 8003160:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003162:	f7ff fc6b 	bl	8002a3c <HAL_GetTick>
 8003166:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003168:	e012      	b.n	8003190 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800316a:	f7ff fc67 	bl	8002a3c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b0a      	cmp	r3, #10
 8003176:	d90b      	bls.n	8003190 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2205      	movs	r2, #5
 8003188:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e09f      	b.n	80032d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7e1b      	ldrb	r3, [r3, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e007      	b.n	80031c8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e5b      	ldrb	r3, [r3, #25]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e007      	b.n	80031f2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7e9b      	ldrb	r3, [r3, #26]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0220 	orr.w	r2, r2, #32
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e007      	b.n	800321c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0220 	bic.w	r2, r2, #32
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7edb      	ldrb	r3, [r3, #27]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0210 	bic.w	r2, r2, #16
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e007      	b.n	8003246 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0210 	orr.w	r2, r2, #16
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7f1b      	ldrb	r3, [r3, #28]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0208 	orr.w	r2, r2, #8
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e007      	b.n	8003270 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0208 	bic.w	r2, r2, #8
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7f5b      	ldrb	r3, [r3, #29]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0204 	orr.w	r2, r2, #4
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e007      	b.n	800329a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0204 	bic.w	r2, r2, #4
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	ea42 0103 	orr.w	r1, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	1e5a      	subs	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d003      	beq.n	80032fe <HAL_CAN_ConfigFilter+0x26>
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	f040 80be 	bne.w	800347a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_CAN_ConfigFilter+0x1bc>)
 8003300:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003318:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	431a      	orrs	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2201      	movs	r2, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43db      	mvns	r3, r3
 8003350:	401a      	ands	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d123      	bne.n	80033a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003382:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3248      	adds	r2, #72	; 0x48
 8003388:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800339c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	3348      	adds	r3, #72	; 0x48
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d122      	bne.n	80033f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3248      	adds	r2, #72	; 0x48
 80033d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ec:	6979      	ldr	r1, [r7, #20]
 80033ee:	3348      	adds	r3, #72	; 0x48
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	401a      	ands	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003410:	e007      	b.n	8003422 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	431a      	orrs	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	401a      	ands	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800343c:	e007      	b.n	800344e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	431a      	orrs	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	431a      	orrs	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800346c:	f023 0201 	bic.w	r2, r3, #1
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e006      	b.n	8003488 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40006400 	.word	0x40006400

08003498 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d12e      	bne.n	800350a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034c4:	f7ff faba 	bl	8002a3c <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034ca:	e012      	b.n	80034f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034cc:	f7ff fab6 	bl	8002a3c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b0a      	cmp	r3, #10
 80034d8:	d90b      	bls.n	80034f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2205      	movs	r2, #5
 80034ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e012      	b.n	8003518 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e006      	b.n	8003518 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
  }
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003534:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d003      	beq.n	800354c <HAL_CAN_AddTxMessage+0x2c>
 8003544:	7ffb      	ldrb	r3, [r7, #31]
 8003546:	2b02      	cmp	r3, #2
 8003548:	f040 80ad 	bne.w	80036a6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8095 	beq.w	8003696 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	0e1b      	lsrs	r3, r3, #24
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003576:	2201      	movs	r2, #1
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	6809      	ldr	r1, [r1, #0]
 8003596:	431a      	orrs	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3318      	adds	r3, #24
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	440b      	add	r3, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e00f      	b.n	80035c4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035b4:	68f9      	ldr	r1, [r7, #12]
 80035b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3318      	adds	r3, #24
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	440b      	add	r3, r1
 80035c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3318      	adds	r3, #24
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	440b      	add	r3, r1
 80035d4:	3304      	adds	r3, #4
 80035d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	7d1b      	ldrb	r3, [r3, #20]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d111      	bne.n	8003604 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3318      	adds	r3, #24
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	6811      	ldr	r1, [r2, #0]
 80035f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3318      	adds	r3, #24
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	440b      	add	r3, r1
 8003600:	3304      	adds	r3, #4
 8003602:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3307      	adds	r3, #7
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	061a      	lsls	r2, r3, #24
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3306      	adds	r3, #6
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3305      	adds	r3, #5
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	4313      	orrs	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	3204      	adds	r2, #4
 8003624:	7812      	ldrb	r2, [r2, #0]
 8003626:	4610      	mov	r0, r2
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	6811      	ldr	r1, [r2, #0]
 800362c:	ea43 0200 	orr.w	r2, r3, r0
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	440b      	add	r3, r1
 8003636:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800363a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3303      	adds	r3, #3
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	061a      	lsls	r2, r3, #24
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3302      	adds	r3, #2
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3301      	adds	r3, #1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	4313      	orrs	r3, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	4610      	mov	r0, r2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	ea43 0200 	orr.w	r2, r3, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	440b      	add	r3, r1
 800366c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003670:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3318      	adds	r3, #24
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6811      	ldr	r1, [r2, #0]
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3318      	adds	r3, #24
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	440b      	add	r3, r1
 8003690:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e00e      	b.n	80036b4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e006      	b.n	80036b4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
  }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3724      	adds	r7, #36	; 0x24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d002      	beq.n	80036de <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80036d8:	7afb      	ldrb	r3, [r7, #11]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d11d      	bne.n	800371a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3301      	adds	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003726:	b480      	push	{r7}
 8003728:	b087      	sub	sp, #28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d003      	beq.n	800374a <HAL_CAN_GetRxMessage+0x24>
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 8103 	bne.w	8003950 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10e      	bne.n	800376e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0f7      	b.n	800395e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0e8      	b.n	800395e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	331b      	adds	r3, #27
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	4413      	add	r3, r2
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0204 	and.w	r2, r3, #4
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	331b      	adds	r3, #27
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4413      	add	r3, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0d5b      	lsrs	r3, r3, #21
 80037ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	331b      	adds	r3, #27
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	331b      	adds	r3, #27
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4413      	add	r3, r2
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0202 	and.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	331b      	adds	r3, #27
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2208      	movs	r2, #8
 800380e:	611a      	str	r2, [r3, #16]
 8003810:	e00b      	b.n	800382a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	331b      	adds	r3, #27
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	331b      	adds	r3, #27
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4413      	add	r3, r2
 8003836:	3304      	adds	r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	b2da      	uxtb	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	331b      	adds	r3, #27
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	4413      	add	r3, r2
 800384e:	3304      	adds	r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4413      	add	r3, r2
 800387a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0a1a      	lsrs	r2, r3, #8
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	4413      	add	r3, r2
 8003894:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0c1a      	lsrs	r2, r3, #16
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	3302      	adds	r3, #2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e1a      	lsrs	r2, r3, #24
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	3303      	adds	r3, #3
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	3304      	adds	r3, #4
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	4413      	add	r3, r2
 80038e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0a1a      	lsrs	r2, r3, #8
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	3305      	adds	r3, #5
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0c1a      	lsrs	r2, r3, #16
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	3306      	adds	r3, #6
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	4413      	add	r3, r2
 8003914:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0e1a      	lsrs	r2, r3, #24
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	3307      	adds	r3, #7
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0220 	orr.w	r2, r2, #32
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	e007      	b.n	800394c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0220 	orr.w	r2, r2, #32
 800394a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e006      	b.n	800395e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003978:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d002      	beq.n	8003986 <HAL_CAN_ActivateNotification+0x1e>
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d109      	bne.n	800399a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6959      	ldr	r1, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e006      	b.n	80039a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b08a      	sub	sp, #40	; 0x28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d07c      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d023      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2201      	movs	r2, #1
 8003a08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fd fd1b 	bl	8001450 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a1a:	e016      	b.n	8003a4a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	e00c      	b.n	8003a4a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e002      	b.n	8003a4a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f96b 	bl	8003d20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d024      	beq.n	8003a9e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fd fd47 	bl	80014fc <HAL_CAN_TxMailbox1CompleteCallback>
 8003a6e:	e016      	b.n	8003a9e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	e00c      	b.n	8003a9e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	e002      	b.n	8003a9e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f94a 	bl	8003d32 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d024      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ab0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fd fd73 	bl	80015a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ac2:	e016      	b.n	8003af2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	e00c      	b.n	8003af2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	e002      	b.n	8003af2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f929 	bl	8003d44 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2210      	movs	r2, #16
 8003b14:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d006      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2208      	movs	r2, #8
 8003b30:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f918 	bl	8003d68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f900 	bl	8003d56 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2210      	movs	r2, #16
 8003b78:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2208      	movs	r2, #8
 8003b94:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8f8 	bl	8003d8c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f8e0 	bl	8003d7a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8e1 	bl	8003d9e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d006      	beq.n	8003bfe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8d9 	bl	8003db0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d07b      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d072      	beq.n	8003cf8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d043      	beq.n	8003cf8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03e      	beq.n	8003cf8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c80:	2b60      	cmp	r3, #96	; 0x60
 8003c82:	d02b      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x32a>
 8003c84:	2b60      	cmp	r3, #96	; 0x60
 8003c86:	d82e      	bhi.n	8003ce6 <HAL_CAN_IRQHandler+0x334>
 8003c88:	2b50      	cmp	r3, #80	; 0x50
 8003c8a:	d022      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x320>
 8003c8c:	2b50      	cmp	r3, #80	; 0x50
 8003c8e:	d82a      	bhi.n	8003ce6 <HAL_CAN_IRQHandler+0x334>
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d019      	beq.n	8003cc8 <HAL_CAN_IRQHandler+0x316>
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d826      	bhi.n	8003ce6 <HAL_CAN_IRQHandler+0x334>
 8003c98:	2b30      	cmp	r3, #48	; 0x30
 8003c9a:	d010      	beq.n	8003cbe <HAL_CAN_IRQHandler+0x30c>
 8003c9c:	2b30      	cmp	r3, #48	; 0x30
 8003c9e:	d822      	bhi.n	8003ce6 <HAL_CAN_IRQHandler+0x334>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d002      	beq.n	8003caa <HAL_CAN_IRQHandler+0x2f8>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d005      	beq.n	8003cb4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ca8:	e01d      	b.n	8003ce6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	f043 0308 	orr.w	r3, r3, #8
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cb2:	e019      	b.n	8003ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f043 0310 	orr.w	r3, r3, #16
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cbc:	e014      	b.n	8003ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cc6:	e00f      	b.n	8003ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cd0:	e00a      	b.n	8003ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cda:	e005      	b.n	8003ce8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ce6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cf6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f855 	bl	8003dc2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003df0:	4013      	ands	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e06:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	60d3      	str	r3, [r2, #12]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <__NVIC_GetPriorityGrouping+0x18>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 0307 	and.w	r3, r3, #7
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db0b      	blt.n	8003e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	4906      	ldr	r1, [pc, #24]	; (8003e6c <__NVIC_EnableIRQ+0x34>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2001      	movs	r0, #1
 8003e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e100 	.word	0xe000e100

08003e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	6039      	str	r1, [r7, #0]
 8003e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	db0a      	blt.n	8003e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	490c      	ldr	r1, [pc, #48]	; (8003ebc <__NVIC_SetPriority+0x4c>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	440b      	add	r3, r1
 8003e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e98:	e00a      	b.n	8003eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4908      	ldr	r1, [pc, #32]	; (8003ec0 <__NVIC_SetPriority+0x50>)
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	3b04      	subs	r3, #4
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	440b      	add	r3, r1
 8003eae:	761a      	strb	r2, [r3, #24]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	e000e100 	.word	0xe000e100
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f1c3 0307 	rsb	r3, r3, #7
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf28      	it	cs
 8003ee2:	2304      	movcs	r3, #4
 8003ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d902      	bls.n	8003ef4 <NVIC_EncodePriority+0x30>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3b03      	subs	r3, #3
 8003ef2:	e000      	b.n	8003ef6 <NVIC_EncodePriority+0x32>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	401a      	ands	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43d9      	mvns	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f1c:	4313      	orrs	r3, r2
         );
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3724      	adds	r7, #36	; 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff4f 	bl	8003dd4 <__NVIC_SetPriorityGrouping>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4603      	mov	r3, r0
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f50:	f7ff ff64 	bl	8003e1c <__NVIC_GetPriorityGrouping>
 8003f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff ffb2 	bl	8003ec4 <NVIC_EncodePriority>
 8003f60:	4602      	mov	r2, r0
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff81 	bl	8003e70 <__NVIC_SetPriority>
}
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff57 	bl	8003e38 <__NVIC_EnableIRQ>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b08b      	sub	sp, #44	; 0x2c
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa6:	e169      	b.n	800427c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fa8:	2201      	movs	r2, #1
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f040 8158 	bne.w	8004276 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4a9a      	ldr	r2, [pc, #616]	; (8004234 <HAL_GPIO_Init+0x2a0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d05e      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fd0:	4a98      	ldr	r2, [pc, #608]	; (8004234 <HAL_GPIO_Init+0x2a0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d875      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fd6:	4a98      	ldr	r2, [pc, #608]	; (8004238 <HAL_GPIO_Init+0x2a4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d058      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fdc:	4a96      	ldr	r2, [pc, #600]	; (8004238 <HAL_GPIO_Init+0x2a4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d86f      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fe2:	4a96      	ldr	r2, [pc, #600]	; (800423c <HAL_GPIO_Init+0x2a8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d052      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fe8:	4a94      	ldr	r2, [pc, #592]	; (800423c <HAL_GPIO_Init+0x2a8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d869      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fee:	4a94      	ldr	r2, [pc, #592]	; (8004240 <HAL_GPIO_Init+0x2ac>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04c      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003ff4:	4a92      	ldr	r2, [pc, #584]	; (8004240 <HAL_GPIO_Init+0x2ac>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d863      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003ffa:	4a92      	ldr	r2, [pc, #584]	; (8004244 <HAL_GPIO_Init+0x2b0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d046      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8004000:	4a90      	ldr	r2, [pc, #576]	; (8004244 <HAL_GPIO_Init+0x2b0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d85d      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8004006:	2b12      	cmp	r3, #18
 8004008:	d82a      	bhi.n	8004060 <HAL_GPIO_Init+0xcc>
 800400a:	2b12      	cmp	r3, #18
 800400c:	d859      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <HAL_GPIO_Init+0x80>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	0800408f 	.word	0x0800408f
 8004018:	08004069 	.word	0x08004069
 800401c:	0800407b 	.word	0x0800407b
 8004020:	080040bd 	.word	0x080040bd
 8004024:	080040c3 	.word	0x080040c3
 8004028:	080040c3 	.word	0x080040c3
 800402c:	080040c3 	.word	0x080040c3
 8004030:	080040c3 	.word	0x080040c3
 8004034:	080040c3 	.word	0x080040c3
 8004038:	080040c3 	.word	0x080040c3
 800403c:	080040c3 	.word	0x080040c3
 8004040:	080040c3 	.word	0x080040c3
 8004044:	080040c3 	.word	0x080040c3
 8004048:	080040c3 	.word	0x080040c3
 800404c:	080040c3 	.word	0x080040c3
 8004050:	080040c3 	.word	0x080040c3
 8004054:	080040c3 	.word	0x080040c3
 8004058:	08004071 	.word	0x08004071
 800405c:	08004085 	.word	0x08004085
 8004060:	4a79      	ldr	r2, [pc, #484]	; (8004248 <HAL_GPIO_Init+0x2b4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004066:	e02c      	b.n	80040c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	623b      	str	r3, [r7, #32]
          break;
 800406e:	e029      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	3304      	adds	r3, #4
 8004076:	623b      	str	r3, [r7, #32]
          break;
 8004078:	e024      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	3308      	adds	r3, #8
 8004080:	623b      	str	r3, [r7, #32]
          break;
 8004082:	e01f      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	330c      	adds	r3, #12
 800408a:	623b      	str	r3, [r7, #32]
          break;
 800408c:	e01a      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004096:	2304      	movs	r3, #4
 8004098:	623b      	str	r3, [r7, #32]
          break;
 800409a:	e013      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040a4:	2308      	movs	r3, #8
 80040a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	611a      	str	r2, [r3, #16]
          break;
 80040ae:	e009      	b.n	80040c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040b0:	2308      	movs	r3, #8
 80040b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	615a      	str	r2, [r3, #20]
          break;
 80040ba:	e003      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
          break;
 80040c0:	e000      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          break;
 80040c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2bff      	cmp	r3, #255	; 0xff
 80040c8:	d801      	bhi.n	80040ce <HAL_GPIO_Init+0x13a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	e001      	b.n	80040d2 <HAL_GPIO_Init+0x13e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2bff      	cmp	r3, #255	; 0xff
 80040d8:	d802      	bhi.n	80040e0 <HAL_GPIO_Init+0x14c>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	e002      	b.n	80040e6 <HAL_GPIO_Init+0x152>
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	3b08      	subs	r3, #8
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	210f      	movs	r1, #15
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	6a39      	ldr	r1, [r7, #32]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80b1 	beq.w	8004276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004114:	4b4d      	ldr	r3, [pc, #308]	; (800424c <HAL_GPIO_Init+0x2b8>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4a4c      	ldr	r2, [pc, #304]	; (800424c <HAL_GPIO_Init+0x2b8>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6193      	str	r3, [r2, #24]
 8004120:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_GPIO_Init+0x2b8>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800412c:	4a48      	ldr	r2, [pc, #288]	; (8004250 <HAL_GPIO_Init+0x2bc>)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3302      	adds	r3, #2
 8004134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	220f      	movs	r2, #15
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a40      	ldr	r2, [pc, #256]	; (8004254 <HAL_GPIO_Init+0x2c0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_GPIO_Init+0x1ec>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3f      	ldr	r2, [pc, #252]	; (8004258 <HAL_GPIO_Init+0x2c4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00d      	beq.n	800417c <HAL_GPIO_Init+0x1e8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3e      	ldr	r2, [pc, #248]	; (800425c <HAL_GPIO_Init+0x2c8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <HAL_GPIO_Init+0x1e4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a3d      	ldr	r2, [pc, #244]	; (8004260 <HAL_GPIO_Init+0x2cc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_GPIO_Init+0x1e0>
 8004170:	2303      	movs	r3, #3
 8004172:	e006      	b.n	8004182 <HAL_GPIO_Init+0x1ee>
 8004174:	2304      	movs	r3, #4
 8004176:	e004      	b.n	8004182 <HAL_GPIO_Init+0x1ee>
 8004178:	2302      	movs	r3, #2
 800417a:	e002      	b.n	8004182 <HAL_GPIO_Init+0x1ee>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_GPIO_Init+0x1ee>
 8004180:	2300      	movs	r3, #0
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	f002 0203 	and.w	r2, r2, #3
 8004188:	0092      	lsls	r2, r2, #2
 800418a:	4093      	lsls	r3, r2
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004192:	492f      	ldr	r1, [pc, #188]	; (8004250 <HAL_GPIO_Init+0x2bc>)
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	3302      	adds	r3, #2
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d006      	beq.n	80041ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	492c      	ldr	r1, [pc, #176]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
 80041b8:	e006      	b.n	80041c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	4928      	ldr	r1, [pc, #160]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041d4:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	4922      	ldr	r1, [pc, #136]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60cb      	str	r3, [r1, #12]
 80041e0:	e006      	b.n	80041f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	491e      	ldr	r1, [pc, #120]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d006      	beq.n	800420a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	4918      	ldr	r1, [pc, #96]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
 8004208:	e006      	b.n	8004218 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800420a:	4b16      	ldr	r3, [pc, #88]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	43db      	mvns	r3, r3
 8004212:	4914      	ldr	r1, [pc, #80]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 8004214:	4013      	ands	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d021      	beq.n	8004268 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_GPIO_Init+0x2d0>)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e021      	b.n	8004276 <HAL_GPIO_Init+0x2e2>
 8004232:	bf00      	nop
 8004234:	10320000 	.word	0x10320000
 8004238:	10310000 	.word	0x10310000
 800423c:	10220000 	.word	0x10220000
 8004240:	10210000 	.word	0x10210000
 8004244:	10120000 	.word	0x10120000
 8004248:	10110000 	.word	0x10110000
 800424c:	40021000 	.word	0x40021000
 8004250:	40010000 	.word	0x40010000
 8004254:	40010800 	.word	0x40010800
 8004258:	40010c00 	.word	0x40010c00
 800425c:	40011000 	.word	0x40011000
 8004260:	40011400 	.word	0x40011400
 8004264:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_GPIO_Init+0x304>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	43db      	mvns	r3, r3
 8004270:	4909      	ldr	r1, [pc, #36]	; (8004298 <HAL_GPIO_Init+0x304>)
 8004272:	4013      	ands	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	3301      	adds	r3, #1
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f47f ae8e 	bne.w	8003fa8 <HAL_GPIO_Init+0x14>
  }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	372c      	adds	r7, #44	; 0x2c
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40010400 	.word	0x40010400

0800429c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
 80042a8:	4613      	mov	r3, r2
 80042aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ac:	787b      	ldrb	r3, [r7, #1]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042b8:	e003      	b.n	80042c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042ba:	887b      	ldrh	r3, [r7, #2]
 80042bc:	041a      	lsls	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ce:	b08f      	sub	sp, #60	; 0x3c
 80042d0:	af0a      	add	r7, sp, #40	; 0x28
 80042d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e10f      	b.n	80044fe <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f007 fa51 	bl	800b7a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2203      	movs	r2, #3
 8004302:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f002 fac3 	bl	80068a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	687e      	ldr	r6, [r7, #4]
 800432a:	466d      	mov	r5, sp
 800432c:	f106 0410 	add.w	r4, r6, #16
 8004330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800433c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004340:	1d33      	adds	r3, r6, #4
 8004342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004344:	6838      	ldr	r0, [r7, #0]
 8004346:	f002 f9e1 	bl	800670c <USB_CoreInit>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0d0      	b.n	80044fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f002 fab0 	bl	80068c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e04a      	b.n	8004404 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	333d      	adds	r3, #61	; 0x3d
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	333c      	adds	r3, #60	; 0x3c
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	b298      	uxth	r0, r3
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3356      	adds	r3, #86	; 0x56
 80043aa:	4602      	mov	r2, r0
 80043ac:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3340      	adds	r3, #64	; 0x40
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	3344      	adds	r3, #68	; 0x44
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3348      	adds	r3, #72	; 0x48
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	334c      	adds	r3, #76	; 0x4c
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	3301      	adds	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d3af      	bcc.n	800436e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	e044      	b.n	800449e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	3301      	adds	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d3b5      	bcc.n	8004414 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	687e      	ldr	r6, [r7, #4]
 80044b0:	466d      	mov	r5, sp
 80044b2:	f106 0410 	add.w	r4, r6, #16
 80044b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80044c6:	1d33      	adds	r3, r6, #4
 80044c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ca:	6838      	ldr	r0, [r7, #0]
 80044cc:	f002 fa48 	bl	8006960 <USB_DevInit>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e00d      	b.n	80044fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f003 f9d2 	bl	80078a0 <USB_DevDisconnect>

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004506 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_PCD_Start+0x16>
 8004518:	2302      	movs	r3, #2
 800451a:	e012      	b.n	8004542 <HAL_PCD_Start+0x3c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f002 f9ad 	bl	8006888 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 f994 	bl	8007860 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800454a:	b590      	push	{r4, r7, lr}
 800454c:	b08d      	sub	sp, #52	; 0x34
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f003 fa4b 	bl	80079fc <USB_GetMode>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	f040 8443 	bne.w	8004df4 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f003 f9b4 	bl	80078e0 <USB_ReadInterrupts>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8439 	beq.w	8004df2 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f003 f9a1 	bl	80078e0 <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d107      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f002 0202 	and.w	r2, r2, #2
 80045b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f003 f98f 	bl	80078e0 <USB_ReadInterrupts>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d161      	bne.n	8004690 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f003 020f 	and.w	r2, r3, #15
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	0c5b      	lsrs	r3, r3, #17
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	2b02      	cmp	r3, #2
 8004606:	d124      	bne.n	8004652 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d035      	beq.n	8004680 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800461e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	6a38      	ldr	r0, [r7, #32]
 8004628:	f002 ffcc 	bl	80075c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004638:	441a      	add	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800464a:	441a      	add	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	615a      	str	r2, [r3, #20]
 8004650:	e016      	b.n	8004680 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	0c5b      	lsrs	r3, r3, #17
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	2b06      	cmp	r3, #6
 800465c:	d110      	bne.n	8004680 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004664:	2208      	movs	r2, #8
 8004666:	4619      	mov	r1, r3
 8004668:	6a38      	ldr	r0, [r7, #32]
 800466a:	f002 ffab 	bl	80075c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800467a:	441a      	add	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0210 	orr.w	r2, r2, #16
 800468e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f003 f923 	bl	80078e0 <USB_ReadInterrupts>
 800469a:	4603      	mov	r3, r0
 800469c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046a4:	f040 80a7 	bne.w	80047f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f003 f927 	bl	8007904 <USB_ReadDevAllOutEpInterrupt>
 80046b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80046b8:	e099      	b.n	80047ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 808e 	beq.w	80047e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f003 f949 	bl	8007968 <USB_ReadDevOutEPInterrupt>
 80046d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2301      	movs	r3, #1
 80046f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80046f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fe42 	bl	8005380 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2308      	movs	r3, #8
 8004716:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fe7e 	bl	800541c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	2310      	movs	r3, #16
 800473a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d030      	beq.n	80047a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d109      	bne.n	8004766 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004764:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	3304      	adds	r3, #4
 800477a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d108      	bne.n	8004796 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	b2db      	uxtb	r3, r3
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f007 f8f3 	bl	800b97c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	461a      	mov	r2, r3
 80047a4:	2302      	movs	r3, #2
 80047a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047be:	461a      	mov	r2, r3
 80047c0:	2320      	movs	r3, #32
 80047c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	461a      	mov	r2, r3
 80047dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3301      	adds	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f47f af62 	bne.w	80046ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f003 f870 	bl	80078e0 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004806:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800480a:	f040 80a4 	bne.w	8004956 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 f88f 	bl	8007936 <USB_ReadDevAllInEpInterrupt>
 8004818:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800481e:	e096      	b.n	800494e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 808b 	beq.w	8004942 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f003 f8b3 	bl	80079a2 <USB_ReadDevInEPInterrupt>
 800483c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	2201      	movs	r2, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43db      	mvns	r3, r3
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004868:	4013      	ands	r3, r2
 800486a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	461a      	mov	r2, r3
 800487a:	2301      	movs	r3, #1
 800487c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	b2db      	uxtb	r3, r3
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f006 fffe 	bl	800b886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	461a      	mov	r2, r3
 80048a2:	2308      	movs	r3, #8
 80048a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	2310      	movs	r3, #16
 80048c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d8:	461a      	mov	r2, r3
 80048da:	2340      	movs	r3, #64	; 0x40
 80048dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d023      	beq.n	8004930 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80048e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ea:	6a38      	ldr	r0, [r7, #32]
 80048ec:	f002 f95a 	bl	8006ba4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	3338      	adds	r3, #56	; 0x38
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	4413      	add	r3, r2
 8004900:	3304      	adds	r3, #4
 8004902:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	78db      	ldrb	r3, [r3, #3]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d108      	bne.n	800491e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2200      	movs	r2, #0
 8004910:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	b2db      	uxtb	r3, r3
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f007 f841 	bl	800b9a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	461a      	mov	r2, r3
 800492c:	2302      	movs	r3, #2
 800492e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800493a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fc96 	bl	800526e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	3301      	adds	r3, #1
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	f47f af65 	bne.w	8004820 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f002 ffc0 	bl	80078e0 <USB_ReadInterrupts>
 8004960:	4603      	mov	r3, r0
 8004962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496a:	d114      	bne.n	8004996 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f006 ffed 	bl	800b960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f002 ffa0 	bl	80078e0 <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049aa:	d112      	bne.n	80049d2 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f006 ffa9 	bl	800b914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80049d0:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f002 ff82 	bl	80078e0 <USB_ReadInterrupts>
 80049dc:	4603      	mov	r3, r0
 80049de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	f040 80b5 	bne.w	8004b54 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2110      	movs	r1, #16
 8004a04:	4618      	mov	r0, r3
 8004a06:	f002 f8cd 	bl	8006ba4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0e:	e046      	b.n	8004a9e <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a50:	461a      	mov	r2, r3
 8004a52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3b3      	bcc.n	8004a10 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004aba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d016      	beq.n	8004af2 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad4:	f043 030b 	orr.w	r3, r3, #11
 8004ad8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aea:	f043 030b 	orr.w	r3, r3, #11
 8004aee:	6453      	str	r3, [r2, #68]	; 0x44
 8004af0:	e015      	b.n	8004b1e <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004b08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b18:	f043 030b 	orr.w	r3, r3, #11
 8004b1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f002 ff8c 	bl	8007a5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f002 fec1 	bl	80078e0 <USB_ReadInterrupts>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b68:	d124      	bne.n	8004bb4 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f002 ff51 	bl	8007a16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f002 f88f 	bl	8006c9c <USB_GetDevSpeed>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681c      	ldr	r4, [r3, #0]
 8004b8a:	f001 f9c5 	bl	8005f18 <HAL_RCC_GetHCLKFreq>
 8004b8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f001 fdd9 	bl	8006750 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f006 fe99 	bl	800b8d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f002 fe91 	bl	80078e0 <USB_ReadInterrupts>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d10a      	bne.n	8004bde <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f006 fe76 	bl	800b8ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f002 0208 	and.w	r2, r2, #8
 8004bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f002 fe7c 	bl	80078e0 <USB_ReadInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d122      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bfe:	2301      	movs	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	e014      	b.n	8004c2e <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 faf2 	bl	800520c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3e5      	bcc.n	8004c04 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f002 fe4f 	bl	80078e0 <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4c:	d13b      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c4e:	2301      	movs	r3, #1
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	e02b      	b.n	8004cac <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3340      	adds	r3, #64	; 0x40
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d115      	bne.n	8004ca6 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	da12      	bge.n	8004ca6 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	333f      	adds	r3, #63	; 0x3f
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fab3 	bl	800520c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	3301      	adds	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3ce      	bcc.n	8004c54 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f002 fe08 	bl	80078e0 <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cda:	d155      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cdc:	2301      	movs	r3, #1
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce0:	e045      	b.n	8004d6e <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d12e      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	da2b      	bge.n	8004d68 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004d1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d121      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d64:	6053      	str	r3, [r2, #4]
            break;
 8004d66:	e007      	b.n	8004d78 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d3b4      	bcc.n	8004ce2 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 fda7 	bl	80078e0 <USB_ReadInterrupts>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d10a      	bne.n	8004db4 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f006 fe10 	bl	800b9c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f002 fd91 	bl	80078e0 <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d115      	bne.n	8004df4 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f006 fe00 	bl	800b9e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
 8004df0:	e000      	b.n	8004df4 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8004df2:	bf00      	nop
    }
  }
}
 8004df4:	3734      	adds	r7, #52	; 0x34
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}

08004dfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_PCD_SetAddress+0x1a>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e013      	b.n	8004e3c <HAL_PCD_SetAddress+0x42>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f002 fcf2 	bl	8007816 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	70fb      	strb	r3, [r7, #3]
 8004e56:	460b      	mov	r3, r1
 8004e58:	803b      	strh	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da0f      	bge.n	8004e8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	3338      	adds	r3, #56	; 0x38
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3304      	adds	r3, #4
 8004e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	705a      	strb	r2, [r3, #1]
 8004e88:	e00f      	b.n	8004eaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004eb6:	883a      	ldrh	r2, [r7, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	78ba      	ldrb	r2, [r7, #2]
 8004ec0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ed4:	78bb      	ldrb	r3, [r7, #2]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d102      	bne.n	8004ee0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_PCD_EP_Open+0xaa>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e00e      	b.n	8004f0c <HAL_PCD_EP_Open+0xc8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 feeb 	bl	8006cd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	da0f      	bge.n	8004f48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	3338      	adds	r3, #56	; 0x38
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	705a      	strb	r2, [r3, #1]
 8004f46:	e00f      	b.n	8004f68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 020f 	and.w	r2, r3, #15
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3304      	adds	r3, #4
 8004f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_PCD_EP_Close+0x6e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e00e      	b.n	8004fa0 <HAL_PCD_EP_Close+0x8c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 ff27 	bl	8006de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	f003 020f 	and.w	r2, r3, #15
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	3304      	adds	r3, #4
 8004fd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fea:	7afb      	ldrb	r3, [r7, #11]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6979      	ldr	r1, [r7, #20]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 ffcd 	bl	8006f9c <USB_EPStartXfer>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 020f 	and.w	r2, r3, #15
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	460b      	mov	r3, r1
 8005048:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504a:	7afb      	ldrb	r3, [r7, #11]
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	3338      	adds	r3, #56	; 0x38
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2201      	movs	r2, #1
 8005078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	b2da      	uxtb	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6979      	ldr	r1, [r7, #20]
 800508c:	4618      	mov	r0, r3
 800508e:	f001 ff85 	bl	8006f9c <USB_EPStartXfer>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	f003 020f 	and.w	r2, r3, #15
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d901      	bls.n	80050ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e04e      	b.n	8005158 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	da0f      	bge.n	80050e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	3338      	adds	r3, #56	; 0x38
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	3304      	adds	r3, #4
 80050d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	705a      	strb	r2, [r3, #1]
 80050e0:	e00d      	b.n	80050fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	3304      	adds	r3, #4
 80050f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	b2da      	uxtb	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_PCD_EP_SetStall+0x82>
 800511a:	2302      	movs	r3, #2
 800511c:	e01c      	b.n	8005158 <HAL_PCD_EP_SetStall+0xbc>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	f002 faa0 	bl	8007672 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	2b00      	cmp	r3, #0
 800513a:	d108      	bne.n	800514e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f002 fc87 	bl	8007a5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d901      	bls.n	800517e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e042      	b.n	8005204 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800517e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da0f      	bge.n	80051a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	f003 020f 	and.w	r2, r3, #15
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	3338      	adds	r3, #56	; 0x38
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	705a      	strb	r2, [r3, #1]
 80051a4:	e00f      	b.n	80051c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	4413      	add	r3, r2
 80051bc:	3304      	adds	r3, #4
 80051be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_PCD_EP_ClrStall+0x86>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e00e      	b.n	8005204 <HAL_PCD_EP_ClrStall+0xa4>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f002 faa9 	bl	800774c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0c      	bge.n	800523a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	f003 020f 	and.w	r2, r3, #15
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	3338      	adds	r3, #56	; 0x38
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	3304      	adds	r3, #4
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e00c      	b.n	8005254 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4413      	add	r3, r2
 8005250:	3304      	adds	r3, #4
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	4618      	mov	r0, r3
 800525c:	f002 f8d0 	bl	8007400 <USB_EPStopXfer>
 8005260:	4603      	mov	r3, r0
 8005262:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005264:	7afb      	ldrb	r3, [r7, #11]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3338      	adds	r3, #56	; 0x38
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	3304      	adds	r3, #4
 8005294:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d901      	bls.n	80052a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e067      	b.n	8005376 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3303      	adds	r3, #3
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052ca:	e026      	b.n	800531a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d902      	bls.n	80052e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3303      	adds	r3, #3
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68d9      	ldr	r1, [r3, #12]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	6978      	ldr	r0, [r7, #20]
 80052fe:	f002 f928 	bl	8007552 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	441a      	add	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	441a      	add	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	b29b      	uxth	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	429a      	cmp	r2, r3
 800532e:	d809      	bhi.n	8005344 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005338:	429a      	cmp	r2, r3
 800533a:	d203      	bcs.n	8005344 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1c3      	bne.n	80052cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	429a      	cmp	r2, r3
 800534e:	d811      	bhi.n	8005374 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	2201      	movs	r2, #1
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	43db      	mvns	r3, r3
 800536a:	6939      	ldr	r1, [r7, #16]
 800536c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005370:	4013      	ands	r3, r2
 8005372:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	333c      	adds	r3, #60	; 0x3c
 8005398:	3304      	adds	r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <PCD_EP_OutXfrComplete_int+0x98>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d124      	bne.n	8005400 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	6093      	str	r3, [r2, #8]
 80053d4:	e01a      	b.n	800540c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	461a      	mov	r2, r3
 80053ee:	2320      	movs	r3, #32
 80053f0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f006 fa29 	bl	800b850 <HAL_PCD_DataOutStageCallback>
 80053fe:	e005      	b.n	800540c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f006 fa22 	bl	800b850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	4f54310a 	.word	0x4f54310a

0800541c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	333c      	adds	r3, #60	; 0x3c
 8005434:	3304      	adds	r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <PCD_EP_OutSetupPacket_int+0x64>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d90e      	bls.n	8005470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f006 f9db 	bl	800b82c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	4f54300a 	.word	0x4f54300a

08005484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
 8005490:	4613      	mov	r3, r2
 8005492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d107      	bne.n	80054b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054a2:	883b      	ldrh	r3, [r7, #0]
 80054a4:	0419      	lsls	r1, r3, #16
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28
 80054b0:	e028      	b.n	8005504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	4413      	add	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	e00d      	b.n	80054e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	3340      	adds	r3, #64	; 0x40
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4413      	add	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	3301      	adds	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d3ec      	bcc.n	80054c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054ec:	883b      	ldrh	r3, [r7, #0]
 80054ee:	0418      	lsls	r0, r3, #16
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6819      	ldr	r1, [r3, #0]
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	4302      	orrs	r2, r0
 80054fc:	3340      	adds	r3, #64	; 0x40
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	887a      	ldrh	r2, [r7, #2]
 8005522:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e304      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8087 	beq.w	800565e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005550:	4b92      	ldr	r3, [pc, #584]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	2b04      	cmp	r3, #4
 800555a:	d00c      	beq.n	8005576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800555c:	4b8f      	ldr	r3, [pc, #572]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b08      	cmp	r3, #8
 8005566:	d112      	bne.n	800558e <HAL_RCC_OscConfig+0x5e>
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005574:	d10b      	bne.n	800558e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005576:	4b89      	ldr	r3, [pc, #548]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d06c      	beq.n	800565c <HAL_RCC_OscConfig+0x12c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d168      	bne.n	800565c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e2de      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x76>
 8005598:	4b80      	ldr	r3, [pc, #512]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a7f      	ldr	r2, [pc, #508]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800559e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e02e      	b.n	8005604 <HAL_RCC_OscConfig+0xd4>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x98>
 80055ae:	4b7b      	ldr	r3, [pc, #492]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7a      	ldr	r2, [pc, #488]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b78      	ldr	r3, [pc, #480]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a77      	ldr	r2, [pc, #476]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e01d      	b.n	8005604 <HAL_RCC_OscConfig+0xd4>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCC_OscConfig+0xbc>
 80055d2:	4b72      	ldr	r3, [pc, #456]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a71      	ldr	r2, [pc, #452]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	4b6f      	ldr	r3, [pc, #444]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a6e      	ldr	r2, [pc, #440]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e00b      	b.n	8005604 <HAL_RCC_OscConfig+0xd4>
 80055ec:	4b6b      	ldr	r3, [pc, #428]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	4b68      	ldr	r3, [pc, #416]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a67      	ldr	r2, [pc, #412]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d013      	beq.n	8005634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fd fa16 	bl	8002a3c <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005614:	f7fd fa12 	bl	8002a3c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e292      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005626:	4b5d      	ldr	r3, [pc, #372]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0xe4>
 8005632:	e014      	b.n	800565e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005634:	f7fd fa02 	bl	8002a3c <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fd f9fe 	bl	8002a3c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e27e      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564e:	4b53      	ldr	r3, [pc, #332]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x10c>
 800565a:	e000      	b.n	800565e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d063      	beq.n	8005732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800566a:	4b4c      	ldr	r3, [pc, #304]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005676:	4b49      	ldr	r3, [pc, #292]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b08      	cmp	r3, #8
 8005680:	d11c      	bne.n	80056bc <HAL_RCC_OscConfig+0x18c>
 8005682:	4b46      	ldr	r3, [pc, #280]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d116      	bne.n	80056bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568e:	4b43      	ldr	r3, [pc, #268]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_RCC_OscConfig+0x176>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d001      	beq.n	80056a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e252      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a6:	4b3d      	ldr	r3, [pc, #244]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4939      	ldr	r1, [pc, #228]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ba:	e03a      	b.n	8005732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d020      	beq.n	8005706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c4:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <HAL_RCC_OscConfig+0x270>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fd f9b7 	bl	8002a3c <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d2:	f7fd f9b3 	bl	8002a3c <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e233      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e4:	4b2d      	ldr	r3, [pc, #180]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f0:	4b2a      	ldr	r3, [pc, #168]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4927      	ldr	r1, [pc, #156]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]
 8005704:	e015      	b.n	8005732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005706:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <HAL_RCC_OscConfig+0x270>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fd f996 	bl	8002a3c <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005714:	f7fd f992 	bl	8002a3c <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e212      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005726:	4b1d      	ldr	r3, [pc, #116]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03a      	beq.n	80057b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d019      	beq.n	800577a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_RCC_OscConfig+0x274>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574c:	f7fd f976 	bl	8002a3c <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005754:	f7fd f972 	bl	8002a3c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1f2      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005772:	2001      	movs	r0, #1
 8005774:	f000 fc1e 	bl	8005fb4 <RCC_Delay>
 8005778:	e01c      	b.n	80057b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800577a:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <HAL_RCC_OscConfig+0x274>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005780:	f7fd f95c 	bl	8002a3c <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005786:	e00f      	b.n	80057a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005788:	f7fd f958 	bl	8002a3c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d908      	bls.n	80057a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e1d8      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	42420000 	.word	0x42420000
 80057a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a8:	4b9b      	ldr	r3, [pc, #620]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e9      	bne.n	8005788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a6 	beq.w	800590e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b94      	ldr	r3, [pc, #592]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	4b91      	ldr	r3, [pc, #580]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4a90      	ldr	r2, [pc, #576]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	61d3      	str	r3, [r2, #28]
 80057de:	4b8e      	ldr	r3, [pc, #568]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ee:	4b8b      	ldr	r3, [pc, #556]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d118      	bne.n	800582c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057fa:	4b88      	ldr	r3, [pc, #544]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a87      	ldr	r2, [pc, #540]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 8005800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005806:	f7fd f919 	bl	8002a3c <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580e:	f7fd f915 	bl	8002a3c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b64      	cmp	r3, #100	; 0x64
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e195      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005820:	4b7e      	ldr	r3, [pc, #504]	; (8005a1c <HAL_RCC_OscConfig+0x4ec>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d106      	bne.n	8005842 <HAL_RCC_OscConfig+0x312>
 8005834:	4b78      	ldr	r3, [pc, #480]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	4a77      	ldr	r2, [pc, #476]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6213      	str	r3, [r2, #32]
 8005840:	e02d      	b.n	800589e <HAL_RCC_OscConfig+0x36e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10c      	bne.n	8005864 <HAL_RCC_OscConfig+0x334>
 800584a:	4b73      	ldr	r3, [pc, #460]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4a72      	ldr	r2, [pc, #456]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	6213      	str	r3, [r2, #32]
 8005856:	4b70      	ldr	r3, [pc, #448]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4a6f      	ldr	r2, [pc, #444]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	6213      	str	r3, [r2, #32]
 8005862:	e01c      	b.n	800589e <HAL_RCC_OscConfig+0x36e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b05      	cmp	r3, #5
 800586a:	d10c      	bne.n	8005886 <HAL_RCC_OscConfig+0x356>
 800586c:	4b6a      	ldr	r3, [pc, #424]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	4a69      	ldr	r2, [pc, #420]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005872:	f043 0304 	orr.w	r3, r3, #4
 8005876:	6213      	str	r3, [r2, #32]
 8005878:	4b67      	ldr	r3, [pc, #412]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	4a66      	ldr	r2, [pc, #408]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6213      	str	r3, [r2, #32]
 8005884:	e00b      	b.n	800589e <HAL_RCC_OscConfig+0x36e>
 8005886:	4b64      	ldr	r3, [pc, #400]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	4a63      	ldr	r2, [pc, #396]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	6213      	str	r3, [r2, #32]
 8005892:	4b61      	ldr	r3, [pc, #388]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	4a60      	ldr	r2, [pc, #384]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005898:	f023 0304 	bic.w	r3, r3, #4
 800589c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d015      	beq.n	80058d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a6:	f7fd f8c9 	bl	8002a3c <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ac:	e00a      	b.n	80058c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fd f8c5 	bl	8002a3c <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e143      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c4:	4b54      	ldr	r3, [pc, #336]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0ee      	beq.n	80058ae <HAL_RCC_OscConfig+0x37e>
 80058d0:	e014      	b.n	80058fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d2:	f7fd f8b3 	bl	8002a3c <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fd f8af 	bl	8002a3c <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e12d      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	4b49      	ldr	r3, [pc, #292]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ee      	bne.n	80058da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005902:	4b45      	ldr	r3, [pc, #276]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4a44      	ldr	r2, [pc, #272]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 808c 	beq.w	8005a30 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005918:	4b3f      	ldr	r3, [pc, #252]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d10e      	bne.n	8005944 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005926:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800592e:	2b08      	cmp	r3, #8
 8005930:	d108      	bne.n	8005944 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593e:	d101      	bne.n	8005944 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e103      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	2b02      	cmp	r3, #2
 800594a:	d14e      	bne.n	80059ea <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800594c:	4b32      	ldr	r3, [pc, #200]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005958:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0ef      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800596c:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <HAL_RCC_OscConfig+0x4f0>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005972:	f7fd f863 	bl	8002a3c <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800597a:	f7fd f85f 	bl	8002a3c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b64      	cmp	r3, #100	; 0x64
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e0df      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005998:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a4:	491c      	ldr	r1, [pc, #112]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	4918      	ldr	r1, [pc, #96]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80059bc:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <HAL_RCC_OscConfig+0x4f0>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fd f83b 	bl	8002a3c <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059ca:	f7fd f837 	bl	8002a3c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b64      	cmp	r3, #100	; 0x64
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e0b7      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x49a>
 80059e8:	e022      	b.n	8005a30 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <HAL_RCC_OscConfig+0x4e8>)
 80059f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <HAL_RCC_OscConfig+0x4f0>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fc:	f7fd f81e 	bl	8002a3c <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005a02:	e00f      	b.n	8005a24 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a04:	f7fd f81a 	bl	8002a3c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	; 0x64
 8005a10:	d908      	bls.n	8005a24 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e09a      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40007000 	.word	0x40007000
 8005a20:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005a24:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e9      	bne.n	8005a04 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8088 	beq.w	8005b4a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a3a:	4b46      	ldr	r3, [pc, #280]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d068      	beq.n	8005b18 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d14d      	bne.n	8005aea <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <HAL_RCC_OscConfig+0x628>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fc fff2 	bl	8002a3c <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fc ffee 	bl	8002a3c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e06e      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a82:	d10f      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005a84:	4b33      	ldr	r3, [pc, #204]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4931      	ldr	r1, [pc, #196]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a92:	4b30      	ldr	r3, [pc, #192]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	f023 020f 	bic.w	r2, r3, #15
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	492d      	ldr	r1, [pc, #180]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	4927      	ldr	r1, [pc, #156]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005abc:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <HAL_RCC_OscConfig+0x628>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac2:	f7fc ffbb 	bl	8002a3c <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fc ffb7 	bl	8002a3c <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e037      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x59a>
 8005ae8:	e02f      	b.n	8005b4a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <HAL_RCC_OscConfig+0x628>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fc ffa4 	bl	8002a3c <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fc ffa0 	bl	8002a3c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e020      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x5c8>
 8005b16:	e018      	b.n	8005b4a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e013      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_OscConfig+0x624>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d001      	beq.n	8005b4a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40021000 	.word	0x40021000
 8005b58:	42420060 	.word	0x42420060

08005b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d0      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b6a      	ldr	r3, [pc, #424]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d910      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 0207 	bic.w	r2, r3, #7
 8005b86:	4965      	ldr	r1, [pc, #404]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b63      	ldr	r3, [pc, #396]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0b8      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb8:	4b59      	ldr	r3, [pc, #356]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a58      	ldr	r2, [pc, #352]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bd0:	4b53      	ldr	r3, [pc, #332]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	494d      	ldr	r1, [pc, #308]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d040      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d115      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e07f      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e073      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06b      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4936      	ldr	r1, [pc, #216]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c4c:	f7fc fef6 	bl	8002a3c <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fc fef2 	bl	8002a3c <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e053      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d210      	bcs.n	8005cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 0207 	bic.w	r2, r3, #7
 8005c92:	4922      	ldr	r1, [pc, #136]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e032      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4916      	ldr	r1, [pc, #88]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	490e      	ldr	r1, [pc, #56]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cea:	f000 f821 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	490a      	ldr	r1, [pc, #40]	; (8005d24 <HAL_RCC_ClockConfig+0x1c8>)
 8005cfc:	5ccb      	ldrb	r3, [r1, r3]
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <HAL_RCC_ClockConfig+0x1cc>)
 8005d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_RCC_ClockConfig+0x1d0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fc fd64 	bl	80027d8 <HAL_InitTick>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40022000 	.word	0x40022000
 8005d20:	40021000 	.word	0x40021000
 8005d24:	0800bf5c 	.word	0x0800bf5c
 8005d28:	20000000 	.word	0x20000000
 8005d2c:	20000004 	.word	0x20000004

08005d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d34:	b092      	sub	sp, #72	; 0x48
 8005d36:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d40:	2300      	movs	r3, #0
 8005d42:	647b      	str	r3, [r7, #68]	; 0x44
 8005d44:	2300      	movs	r3, #0
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d50:	2300      	movs	r3, #0
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d54:	4b6b      	ldr	r3, [pc, #428]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5c:	f003 030c 	and.w	r3, r3, #12
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d002      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d003      	beq.n	8005d70 <HAL_RCC_GetSysClockFreq+0x40>
 8005d68:	e0c3      	b.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d6a:	4b67      	ldr	r3, [pc, #412]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005d6c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005d6e:	e0c3      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	4b64      	ldr	r3, [pc, #400]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8005d7a:	5c9b      	ldrb	r3, [r3, r2]
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80ac 	beq.w	8005ee2 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005d8a:	4b5e      	ldr	r3, [pc, #376]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	4b5f      	ldr	r3, [pc, #380]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8005d94:	5c9b      	ldrb	r3, [r3, r2]
 8005d96:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005d98:	4b5a      	ldr	r3, [pc, #360]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 808c 	beq.w	8005ebe <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005da6:	4b57      	ldr	r3, [pc, #348]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	091b      	lsrs	r3, r3, #4
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	3301      	adds	r3, #1
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	627a      	str	r2, [r7, #36]	; 0x24
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	fb00 f203 	mul.w	r2, r0, r3
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	fb03 f301 	mul.w	r3, r3, r1
 8005dde:	4413      	add	r3, r2
 8005de0:	6a3a      	ldr	r2, [r7, #32]
 8005de2:	fba2 4500 	umull	r4, r5, r2, r0
 8005de6:	442b      	add	r3, r5
 8005de8:	461d      	mov	r5, r3
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	f04f 0000 	mov.w	r0, #0
 8005df2:	f04f 0100 	mov.w	r1, #0
 8005df6:	0159      	lsls	r1, r3, #5
 8005df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dfc:	0150      	lsls	r0, r2, #5
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	ebb2 0a04 	subs.w	sl, r2, r4
 8005e06:	eb63 0b05 	sbc.w	fp, r3, r5
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e16:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e1a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e1e:	ebb2 080a 	subs.w	r8, r2, sl
 8005e22:	eb63 090b 	sbc.w	r9, r3, fp
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3a:	4690      	mov	r8, r2
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	eb18 0304 	adds.w	r3, r8, r4
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	eb49 0305 	adc.w	r3, r9, r5
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e56:	4629      	mov	r1, r5
 8005e58:	024b      	lsls	r3, r1, #9
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4604      	mov	r4, r0
 8005e60:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005e64:	4601      	mov	r1, r0
 8005e66:	024a      	lsls	r2, r1, #9
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	617a      	str	r2, [r7, #20]
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	2200      	movs	r2, #0
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	60fa      	str	r2, [r7, #12]
 8005e7c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005e80:	4622      	mov	r2, r4
 8005e82:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8005e86:	4645      	mov	r5, r8
 8005e88:	fb05 f202 	mul.w	r2, r5, r2
 8005e8c:	46cc      	mov	ip, r9
 8005e8e:	4625      	mov	r5, r4
 8005e90:	461c      	mov	r4, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	fb03 f30c 	mul.w	r3, r3, ip
 8005e98:	4413      	add	r3, r2
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	4644      	mov	r4, r8
 8005e9e:	fba2 2404 	umull	r2, r4, r2, r4
 8005ea2:	61fc      	str	r4, [r7, #28]
 8005ea4:	61ba      	str	r2, [r7, #24]
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eb0:	f7fb f888 	bl	8000fc4 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4613      	mov	r3, r2
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	e007      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	4a11      	ldr	r2, [pc, #68]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005ec2:	fb03 f202 	mul.w	r2, r3, r2
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8005ed0:	7b5b      	ldrb	r3, [r3, #13]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d108      	bne.n	8005eec <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8005eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee0:	e004      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	4a0b      	ldr	r2, [pc, #44]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005ef0:	e002      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005ef6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3748      	adds	r7, #72	; 0x48
 8005efe:	46bd      	mov	sp, r7
 8005f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f04:	40021000 	.word	0x40021000
 8005f08:	007a1200 	.word	0x007a1200
 8005f0c:	0800bf74 	.word	0x0800bf74
 8005f10:	0800bf84 	.word	0x0800bf84
 8005f14:	003d0900 	.word	0x003d0900

08005f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	20000000 	.word	0x20000000

08005f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f30:	f7ff fff2 	bl	8005f18 <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4903      	ldr	r1, [pc, #12]	; (8005f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	0800bf6c 	.word	0x0800bf6c

08005f54 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	220f      	movs	r2, #15
 8005f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <HAL_RCC_GetClockConfig+0x58>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 0203 	and.w	r2, r3, #3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <HAL_RCC_GetClockConfig+0x58>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_GetClockConfig+0x58>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <HAL_RCC_GetClockConfig+0x58>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0207 	and.w	r2, r3, #7
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40022000 	.word	0x40022000

08005fb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <RCC_Delay+0x34>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <RCC_Delay+0x38>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	0a5b      	lsrs	r3, r3, #9
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005fd0:	bf00      	nop
  }
  while (Delay --);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1e5a      	subs	r2, r3, #1
 8005fd6:	60fa      	str	r2, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f9      	bne.n	8005fd0 <RCC_Delay+0x1c>
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	20000000 	.word	0x20000000
 8005fec:	10624dd3 	.word	0x10624dd3

08005ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d07d      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8006010:	2300      	movs	r3, #0
 8006012:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006014:	4b8b      	ldr	r3, [pc, #556]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10d      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006020:	4b88      	ldr	r3, [pc, #544]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4a87      	ldr	r2, [pc, #540]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602a:	61d3      	str	r3, [r2, #28]
 800602c:	4b85      	ldr	r3, [pc, #532]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006038:	2301      	movs	r3, #1
 800603a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603c:	4b82      	ldr	r3, [pc, #520]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d118      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006048:	4b7f      	ldr	r3, [pc, #508]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a7e      	ldr	r2, [pc, #504]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800604e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006054:	f7fc fcf2 	bl	8002a3c <HAL_GetTick>
 8006058:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605a:	e008      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605c:	f7fc fcee 	bl	8002a3c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	; 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0e5      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606e:	4b76      	ldr	r3, [pc, #472]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800607a:	4b72      	ldr	r3, [pc, #456]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006082:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d02e      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d027      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006098:	4b6a      	ldr	r3, [pc, #424]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060a2:	4b6a      	ldr	r3, [pc, #424]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060a8:	4b68      	ldr	r3, [pc, #416]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060ae:	4a65      	ldr	r2, [pc, #404]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d014      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060be:	f7fc fcbd 	bl	8002a3c <HAL_GetTick>
 80060c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c4:	e00a      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fc fcb9 	bl	8002a3c <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e0ae      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060dc:	4b59      	ldr	r3, [pc, #356]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0ee      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060e8:	4b56      	ldr	r3, [pc, #344]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4953      	ldr	r1, [pc, #332]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060fa:	7efb      	ldrb	r3, [r7, #27]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d105      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006100:	4b50      	ldr	r3, [pc, #320]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	4a4f      	ldr	r2, [pc, #316]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800610a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006118:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4947      	ldr	r1, [pc, #284]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006126:	4313      	orrs	r3, r2
 8006128:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006136:	4b43      	ldr	r3, [pc, #268]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	4940      	ldr	r1, [pc, #256]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006144:	4313      	orrs	r3, r2
 8006146:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8006154:	4b3b      	ldr	r3, [pc, #236]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	4938      	ldr	r1, [pc, #224]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006162:	4313      	orrs	r3, r2
 8006164:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8006166:	4b37      	ldr	r3, [pc, #220]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d105      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006172:	4b34      	ldr	r3, [pc, #208]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800617e:	2301      	movs	r3, #1
 8006180:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d148      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8006188:	4b2e      	ldr	r3, [pc, #184]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d138      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8006194:	4b2b      	ldr	r3, [pc, #172]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80061a0:	4b28      	ldr	r3, [pc, #160]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d001      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e042      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80061b4:	4b23      	ldr	r3, [pc, #140]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	4920      	ldr	r1, [pc, #128]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80061c6:	4b1f      	ldr	r3, [pc, #124]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	491c      	ldr	r1, [pc, #112]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80061d8:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061de:	f7fc fc2d 	bl	8002a3c <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e4:	e008      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061e6:	f7fc fc29 	bl	8002a3c <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b64      	cmp	r3, #100	; 0x64
 80061f2:	d901      	bls.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e020      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0f0      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006204:	e009      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8006206:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	429a      	cmp	r2, r3
 8006214:	d001      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e00f      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4904      	ldr	r1, [pc, #16]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	40007000 	.word	0x40007000
 800624c:	42420440 	.word	0x42420440
 8006250:	42420070 	.word	0x42420070

08006254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e041      	b.n	80062ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f839 	bl	80062f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f000 f9bc 	bl	8006610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d001      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e03f      	b.n	800639c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1b      	ldr	r2, [pc, #108]	; (80063a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_TIM_Base_Start_IT+0x62>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d00e      	beq.n	8006366 <HAL_TIM_Base_Start_IT+0x62>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a17      	ldr	r2, [pc, #92]	; (80063ac <HAL_TIM_Base_Start_IT+0xa8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d009      	beq.n	8006366 <HAL_TIM_Base_Start_IT+0x62>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <HAL_TIM_Base_Start_IT+0xac>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <HAL_TIM_Base_Start_IT+0x62>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a14      	ldr	r2, [pc, #80]	; (80063b4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d111      	bne.n	800638a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b06      	cmp	r3, #6
 8006376:	d010      	beq.n	800639a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006388:	e007      	b.n	800639a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00

080063b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0202 	mvn.w	r2, #2
 80063e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f8ed 	bl	80065da <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f8e0 	bl	80065c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f8ef 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b04      	cmp	r3, #4
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b04      	cmp	r3, #4
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0204 	mvn.w	r2, #4
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8c3 	bl	80065da <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8b6 	bl	80065c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f8c5 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b08      	cmp	r3, #8
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b08      	cmp	r3, #8
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0208 	mvn.w	r2, #8
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2204      	movs	r2, #4
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f899 	bl	80065da <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f88c 	bl	80065c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f89b 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d122      	bne.n	8006510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d11b      	bne.n	8006510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0210 	mvn.w	r2, #16
 80064e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2208      	movs	r2, #8
 80064e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f86f 	bl	80065da <HAL_TIM_IC_CaptureCallback>
 80064fc:	e005      	b.n	800650a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f862 	bl	80065c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f871 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10e      	bne.n	800653c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d107      	bne.n	800653c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0201 	mvn.w	r2, #1
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fb ffd4 	bl	80024e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	2b80      	cmp	r3, #128	; 0x80
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f8c9 	bl	80066fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d10e      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d107      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f835 	bl	80065fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d10e      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d107      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0220 	mvn.w	r2, #32
 80065b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f894 	bl	80066e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a2d      	ldr	r2, [pc, #180]	; (80066d8 <TIM_Base_SetConfig+0xc8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_Base_SetConfig+0x38>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d00b      	beq.n	8006648 <TIM_Base_SetConfig+0x38>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <TIM_Base_SetConfig+0xcc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_Base_SetConfig+0x38>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <TIM_Base_SetConfig+0xd0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_Base_SetConfig+0x38>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <TIM_Base_SetConfig+0xd4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d108      	bne.n	800665a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <TIM_Base_SetConfig+0xc8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00f      	beq.n	8006682 <TIM_Base_SetConfig+0x72>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006668:	d00b      	beq.n	8006682 <TIM_Base_SetConfig+0x72>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <TIM_Base_SetConfig+0xcc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d007      	beq.n	8006682 <TIM_Base_SetConfig+0x72>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <TIM_Base_SetConfig+0xd0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_Base_SetConfig+0x72>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <TIM_Base_SetConfig+0xd4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d108      	bne.n	8006694 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <TIM_Base_SetConfig+0xc8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d103      	bne.n	80066c8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	615a      	str	r2, [r3, #20]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00

080066e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800670c:	b084      	sub	sp, #16
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	f107 001c 	add.w	r0, r7, #28
 800671a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 f9de 	bl	8007aec <USB_CoreReset>
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800674c:	b004      	add	sp, #16
 800674e:	4770      	bx	lr

08006750 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d165      	bne.n	8006830 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4a3e      	ldr	r2, [pc, #248]	; (8006860 <USB_SetTurnaroundTime+0x110>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d906      	bls.n	800677a <USB_SetTurnaroundTime+0x2a>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <USB_SetTurnaroundTime+0x114>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d202      	bcs.n	800677a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006774:	230f      	movs	r3, #15
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e05c      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4a39      	ldr	r2, [pc, #228]	; (8006864 <USB_SetTurnaroundTime+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d306      	bcc.n	8006790 <USB_SetTurnaroundTime+0x40>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4a38      	ldr	r2, [pc, #224]	; (8006868 <USB_SetTurnaroundTime+0x118>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d202      	bcs.n	8006790 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800678a:	230e      	movs	r3, #14
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e051      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4a35      	ldr	r2, [pc, #212]	; (8006868 <USB_SetTurnaroundTime+0x118>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d306      	bcc.n	80067a6 <USB_SetTurnaroundTime+0x56>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4a34      	ldr	r2, [pc, #208]	; (800686c <USB_SetTurnaroundTime+0x11c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d202      	bcs.n	80067a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067a0:	230d      	movs	r3, #13
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e046      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4a30      	ldr	r2, [pc, #192]	; (800686c <USB_SetTurnaroundTime+0x11c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d306      	bcc.n	80067bc <USB_SetTurnaroundTime+0x6c>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4a2f      	ldr	r2, [pc, #188]	; (8006870 <USB_SetTurnaroundTime+0x120>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d802      	bhi.n	80067bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80067b6:	230c      	movs	r3, #12
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	e03b      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4a2c      	ldr	r2, [pc, #176]	; (8006870 <USB_SetTurnaroundTime+0x120>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d906      	bls.n	80067d2 <USB_SetTurnaroundTime+0x82>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4a2b      	ldr	r2, [pc, #172]	; (8006874 <USB_SetTurnaroundTime+0x124>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d802      	bhi.n	80067d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80067cc:	230b      	movs	r3, #11
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e030      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	4a27      	ldr	r2, [pc, #156]	; (8006874 <USB_SetTurnaroundTime+0x124>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d906      	bls.n	80067e8 <USB_SetTurnaroundTime+0x98>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4a26      	ldr	r2, [pc, #152]	; (8006878 <USB_SetTurnaroundTime+0x128>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d802      	bhi.n	80067e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80067e2:	230a      	movs	r3, #10
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	e025      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4a23      	ldr	r2, [pc, #140]	; (8006878 <USB_SetTurnaroundTime+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d906      	bls.n	80067fe <USB_SetTurnaroundTime+0xae>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4a22      	ldr	r2, [pc, #136]	; (800687c <USB_SetTurnaroundTime+0x12c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d202      	bcs.n	80067fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067f8:	2309      	movs	r3, #9
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e01a      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <USB_SetTurnaroundTime+0x12c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d306      	bcc.n	8006814 <USB_SetTurnaroundTime+0xc4>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <USB_SetTurnaroundTime+0x130>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d802      	bhi.n	8006814 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800680e:	2308      	movs	r3, #8
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	e00f      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4a1a      	ldr	r2, [pc, #104]	; (8006880 <USB_SetTurnaroundTime+0x130>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d906      	bls.n	800682a <USB_SetTurnaroundTime+0xda>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4a19      	ldr	r2, [pc, #100]	; (8006884 <USB_SetTurnaroundTime+0x134>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d202      	bcs.n	800682a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006824:	2307      	movs	r3, #7
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e004      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800682a:	2306      	movs	r3, #6
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	e001      	b.n	8006834 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006830:	2309      	movs	r3, #9
 8006832:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	029b      	lsls	r3, r3, #10
 8006848:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800684c:	431a      	orrs	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	00d8acbf 	.word	0x00d8acbf
 8006864:	00e4e1c0 	.word	0x00e4e1c0
 8006868:	00f42400 	.word	0x00f42400
 800686c:	01067380 	.word	0x01067380
 8006870:	011a499f 	.word	0x011a499f
 8006874:	01312cff 	.word	0x01312cff
 8006878:	014ca43f 	.word	0x014ca43f
 800687c:	016e3600 	.word	0x016e3600
 8006880:	01a6ab1f 	.word	0x01a6ab1f
 8006884:	01e84800 	.word	0x01e84800

08006888 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f043 0201 	orr.w	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f023 0201 	bic.w	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d115      	bne.n	8006916 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068f6:	2001      	movs	r0, #1
 80068f8:	f7fc f8aa 	bl	8002a50 <HAL_Delay>
      ms++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 f87a 	bl	80079fc <USB_GetMode>
 8006908:	4603      	mov	r3, r0
 800690a:	2b01      	cmp	r3, #1
 800690c:	d01e      	beq.n	800694c <USB_SetCurrentMode+0x84>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b31      	cmp	r3, #49	; 0x31
 8006912:	d9f0      	bls.n	80068f6 <USB_SetCurrentMode+0x2e>
 8006914:	e01a      	b.n	800694c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d115      	bne.n	8006948 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006928:	2001      	movs	r0, #1
 800692a:	f7fc f891 	bl	8002a50 <HAL_Delay>
      ms++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3301      	adds	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 f861 	bl	80079fc <USB_GetMode>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <USB_SetCurrentMode+0x84>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b31      	cmp	r3, #49	; 0x31
 8006944:	d9f0      	bls.n	8006928 <USB_SetCurrentMode+0x60>
 8006946:	e001      	b.n	800694c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e005      	b.n	8006958 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b32      	cmp	r3, #50	; 0x32
 8006950:	d101      	bne.n	8006956 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006960:	b084      	sub	sp, #16
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800696e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e009      	b.n	8006994 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3340      	adds	r3, #64	; 0x40
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	2200      	movs	r2, #0
 800698c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	3301      	adds	r3, #1
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b0e      	cmp	r3, #14
 8006998:	d9f2      	bls.n	8006980 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069ac:	461a      	mov	r2, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069b2:	2103      	movs	r1, #3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f959 	bl	8006c6c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069ba:	2110      	movs	r1, #16
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f8f1 	bl	8006ba4 <USB_FlushTxFifo>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f91d 	bl	8006c0c <USB_FlushRxFifo>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	461a      	mov	r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	461a      	mov	r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	e043      	b.n	8006a8e <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1c:	d118      	bne.n	8006a50 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a30:	461a      	mov	r2, r3
 8006a32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e013      	b.n	8006a62 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a46:	461a      	mov	r2, r3
 8006a48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e008      	b.n	8006a62 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	461a      	mov	r2, r3
 8006a70:	2300      	movs	r3, #0
 8006a72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	461a      	mov	r2, r3
 8006a82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d3b7      	bcc.n	8006a06 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	e043      	b.n	8006b24 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab2:	d118      	bne.n	8006ae6 <USB_DevInit+0x186>
    {
      if (i == 0U)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	e013      	b.n	8006af8 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	461a      	mov	r2, r3
 8006ade:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e008      	b.n	8006af8 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	461a      	mov	r2, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	461a      	mov	r2, r3
 8006b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	3301      	adds	r3, #1
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d3b7      	bcc.n	8006a9c <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f043 0210 	orr.w	r2, r3, #16
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <USB_DevInit+0x240>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f043 0208 	orr.w	r2, r3, #8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d107      	bne.n	8006b8e <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b86:	f043 0304 	orr.w	r3, r3, #4
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b9a:	b004      	add	sp, #16
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	803c3800 	.word	0x803c3800

08006ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a13      	ldr	r2, [pc, #76]	; (8006c08 <USB_FlushTxFifo+0x64>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d901      	bls.n	8006bc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e01b      	b.n	8006bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	daf2      	bge.n	8006bb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	019b      	lsls	r3, r3, #6
 8006bd4:	f043 0220 	orr.w	r2, r3, #32
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <USB_FlushTxFifo+0x64>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e006      	b.n	8006bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d0f0      	beq.n	8006bdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	00030d40 	.word	0x00030d40

08006c0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <USB_FlushRxFifo+0x5c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e018      	b.n	8006c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	daf2      	bge.n	8006c18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4a08      	ldr	r2, [pc, #32]	; (8006c68 <USB_FlushRxFifo+0x5c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d901      	bls.n	8006c4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e006      	b.n	8006c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d0f0      	beq.n	8006c3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	00030d40 	.word	0x00030d40

08006c6c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0306 	and.w	r3, r3, #6
 8006cb4:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d002      	beq.n	8006cc2 <USB_GetDevSpeed+0x26>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d102      	bne.n	8006cc8 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	75fb      	strb	r3, [r7, #23]
 8006cc6:	e001      	b.n	8006ccc <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006cc8:	230f      	movs	r3, #15
 8006cca:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d13a      	bne.n	8006d6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	2101      	movs	r1, #1
 8006d06:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	68f9      	ldr	r1, [r7, #12]
 8006d0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d12:	4313      	orrs	r3, r2
 8006d14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d155      	bne.n	8006dd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	791b      	ldrb	r3, [r3, #4]
 8006d46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	059b      	lsls	r3, r3, #22
 8006d4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d50:	4313      	orrs	r3, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	e036      	b.n	8006dd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d70:	69da      	ldr	r2, [r3, #28]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d11a      	bne.n	8006dd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	791b      	ldrb	r3, [r3, #4]
 8006dbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d161      	bne.n	8006ec4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e16:	d11f      	bne.n	8006e58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	2101      	movs	r1, #1
 8006e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	43db      	mvns	r3, r3
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e78:	4013      	ands	r3, r2
 8006e7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	43db      	mvns	r3, r3
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	0159      	lsls	r1, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	440b      	add	r3, r1
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <USB_DeactivateEndpoint+0x1b0>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	600b      	str	r3, [r1, #0]
 8006ec2:	e060      	b.n	8006f86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eda:	d11f      	bne.n	8006f1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006efa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	0151      	lsls	r1, r2, #5
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	440a      	add	r2, r1
 8006f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	43db      	mvns	r3, r3
 8006f36:	68f9      	ldr	r1, [r7, #12]
 8006f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	69da      	ldr	r2, [r3, #28]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	2101      	movs	r1, #1
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f60:	4013      	ands	r3, r2
 8006f62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	0159      	lsls	r1, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	440b      	add	r3, r1
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <USB_DeactivateEndpoint+0x1b4>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	ec337800 	.word	0xec337800
 8006f98:	eff37800 	.word	0xeff37800

08006f9c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	f040 8128 	bne.w	800720a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d132      	bne.n	8007028 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007020:	0cdb      	lsrs	r3, r3, #19
 8007022:	04db      	lsls	r3, r3, #19
 8007024:	6113      	str	r3, [r2, #16]
 8007026:	e092      	b.n	800714e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007042:	0cdb      	lsrs	r3, r3, #19
 8007044:	04db      	lsls	r3, r3, #19
 8007046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	440a      	add	r2, r1
 800705e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007062:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007066:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800706a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d11a      	bne.n	80070a8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a4:	6113      	str	r3, [r2, #16]
 80070a6:	e01b      	b.n	80070e0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6919      	ldr	r1, [r3, #16]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	440b      	add	r3, r1
 80070c0:	1e59      	subs	r1, r3, #1
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80070ca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070cc:	4b8d      	ldr	r3, [pc, #564]	; (8007304 <USB_EPStartXfer+0x368>)
 80070ce:	400b      	ands	r3, r1
 80070d0:	6939      	ldr	r1, [r7, #16]
 80070d2:	0148      	lsls	r0, r1, #5
 80070d4:	6979      	ldr	r1, [r7, #20]
 80070d6:	4401      	add	r1, r0
 80070d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070dc:	4313      	orrs	r3, r2
 80070de:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f6:	6939      	ldr	r1, [r7, #16]
 80070f8:	0148      	lsls	r0, r1, #5
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	4401      	add	r1, r0
 80070fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007102:	4313      	orrs	r3, r2
 8007104:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	791b      	ldrb	r3, [r3, #4]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d11f      	bne.n	800714e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	0151      	lsls	r1, r2, #5
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	440a      	add	r2, r1
 8007124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007128:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800712c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	440a      	add	r2, r1
 8007144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800714c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800716c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	791b      	ldrb	r3, [r3, #4]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d015      	beq.n	80071a2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 8139 	beq.w	80073f2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	2101      	movs	r1, #1
 8007192:	fa01 f303 	lsl.w	r3, r1, r3
 8007196:	6979      	ldr	r1, [r7, #20]
 8007198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800719c:	4313      	orrs	r3, r2
 800719e:	634b      	str	r3, [r1, #52]	; 0x34
 80071a0:	e127      	b.n	80073f2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d110      	bne.n	80071d4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	e00f      	b.n	80071f4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68d9      	ldr	r1, [r3, #12]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	b29b      	uxth	r3, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f9a5 	bl	8007552 <USB_WritePacket>
 8007208:	e0f3      	b.n	80073f2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	0151      	lsls	r1, r2, #5
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	440a      	add	r2, r1
 8007220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007224:	0cdb      	lsrs	r3, r3, #19
 8007226:	04db      	lsls	r3, r3, #19
 8007228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	440a      	add	r2, r1
 8007240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800724c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d12f      	bne.n	80072b4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007282:	6939      	ldr	r1, [r7, #16]
 8007284:	0148      	lsls	r0, r1, #5
 8007286:	6979      	ldr	r1, [r7, #20]
 8007288:	4401      	add	r1, r0
 800728a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800728e:	4313      	orrs	r3, r2
 8007290:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072b0:	6113      	str	r3, [r2, #16]
 80072b2:	e061      	b.n	8007378 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d125      	bne.n	8007308 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d2:	6939      	ldr	r1, [r7, #16]
 80072d4:	0148      	lsls	r0, r1, #5
 80072d6:	6979      	ldr	r1, [r7, #20]
 80072d8:	4401      	add	r1, r0
 80072da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072de:	4313      	orrs	r3, r2
 80072e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007300:	6113      	str	r3, [r2, #16]
 8007302:	e039      	b.n	8007378 <USB_EPStartXfer+0x3dc>
 8007304:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	4413      	add	r3, r2
 8007312:	1e5a      	subs	r2, r3, #1
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	fbb2 f3f3 	udiv	r3, r2, r3
 800731c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	89fa      	ldrh	r2, [r7, #14]
 8007324:	fb03 f202 	mul.w	r2, r3, r2
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	89fb      	ldrh	r3, [r7, #14]
 800733c:	04d9      	lsls	r1, r3, #19
 800733e:	4b2f      	ldr	r3, [pc, #188]	; (80073fc <USB_EPStartXfer+0x460>)
 8007340:	400b      	ands	r3, r1
 8007342:	6939      	ldr	r1, [r7, #16]
 8007344:	0148      	lsls	r0, r1, #5
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	4401      	add	r1, r0
 800734a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800734e:	4313      	orrs	r3, r2
 8007350:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007368:	6939      	ldr	r1, [r7, #16]
 800736a:	0148      	lsls	r0, r1, #5
 800736c:	6979      	ldr	r1, [r7, #20]
 800736e:	4401      	add	r1, r0
 8007370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007374:	4313      	orrs	r3, r2
 8007376:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	791b      	ldrb	r3, [r3, #4]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d128      	bne.n	80073d2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738c:	2b00      	cmp	r3, #0
 800738e:	d110      	bne.n	80073b2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	e00f      	b.n	80073d2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	1ff80000 	.word	0x1ff80000

08007400 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d14a      	bne.n	80074b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007436:	f040 8086 	bne.w	8007546 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	7812      	ldrb	r2, [r2, #0]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007458:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800745c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007480:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f242 7210 	movw	r2, #10000	; 0x2710
 800748e:	4293      	cmp	r3, r2
 8007490:	d902      	bls.n	8007498 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]
          break;
 8007496:	e056      	b.n	8007546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b0:	d0e7      	beq.n	8007482 <USB_EPStopXfer+0x82>
 80074b2:	e048      	b.n	8007546 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074cc:	d13b      	bne.n	8007546 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	7812      	ldrb	r2, [r2, #0]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007522:	4293      	cmp	r3, r2
 8007524:	d902      	bls.n	800752c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
          break;
 800752a:	e00c      	b.n	8007546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007544:	d0e7      	beq.n	8007516 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
}
 8007548:	4618      	mov	r0, r3
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007552:	b480      	push	{r7}
 8007554:	b089      	sub	sp, #36	; 0x24
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	4611      	mov	r1, r2
 800755e:	461a      	mov	r2, r3
 8007560:	460b      	mov	r3, r1
 8007562:	71fb      	strb	r3, [r7, #7]
 8007564:	4613      	mov	r3, r2
 8007566:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007570:	88bb      	ldrh	r3, [r7, #4]
 8007572:	3303      	adds	r3, #3
 8007574:	089b      	lsrs	r3, r3, #2
 8007576:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007578:	2300      	movs	r3, #0
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	e018      	b.n	80075b0 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	031a      	lsls	r2, r3, #12
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	4413      	add	r3, r2
 8007586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758a:	461a      	mov	r2, r3
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	3301      	adds	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	3301      	adds	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	3301      	adds	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3301      	adds	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	3301      	adds	r3, #1
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d3e2      	bcc.n	800757e <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3724      	adds	r7, #36	; 0x24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b08b      	sub	sp, #44	; 0x2c
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	089b      	lsrs	r3, r3, #2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]
 80075ee:	e014      	b.n	800761a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	3301      	adds	r3, #1
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	3301      	adds	r3, #1
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	3301      	adds	r3, #1
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	3301      	adds	r3, #1
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	3301      	adds	r3, #1
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	6a3a      	ldr	r2, [r7, #32]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	429a      	cmp	r2, r3
 8007620:	d3e6      	bcc.n	80075f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007622:	8bfb      	ldrh	r3, [r7, #30]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01e      	beq.n	8007666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007632:	461a      	mov	r2, r3
 8007634:	f107 0310 	add.w	r3, r7, #16
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	b2da      	uxtb	r2, r3
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	701a      	strb	r2, [r3, #0]
      i++;
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	3301      	adds	r3, #1
 8007652:	623b      	str	r3, [r7, #32]
      pDest++;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	3301      	adds	r3, #1
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800765a:	8bfb      	ldrh	r3, [r7, #30]
 800765c:	3b01      	subs	r3, #1
 800765e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007660:	8bfb      	ldrh	r3, [r7, #30]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1ea      	bne.n	800763c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007668:	4618      	mov	r0, r3
 800766a:	372c      	adds	r7, #44	; 0x2c
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr

08007672 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d12c      	bne.n	80076e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	db12      	blt.n	80076c6 <USB_EPSetStall+0x54>
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00f      	beq.n	80076c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	0151      	lsls	r1, r2, #5
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	440a      	add	r2, r1
 80076bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	e02b      	b.n	8007740 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	db12      	blt.n	8007720 <USB_EPSetStall+0xae>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00f      	beq.n	8007720 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800771a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800771e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800773e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr

0800774c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d128      	bne.n	80077ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007786:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	791b      	ldrb	r3, [r3, #4]
 800778c:	2b03      	cmp	r3, #3
 800778e:	d003      	beq.n	8007798 <USB_EPClearStall+0x4c>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	791b      	ldrb	r3, [r3, #4]
 8007794:	2b02      	cmp	r3, #2
 8007796:	d138      	bne.n	800780a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	e027      	b.n	800780a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d003      	beq.n	80077ea <USB_EPClearStall+0x9e>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	791b      	ldrb	r3, [r3, #4]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d10f      	bne.n	800780a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007808:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr

08007816 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007834:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007838:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007850:	4313      	orrs	r3, r2
 8007852:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr

08007860 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788e:	f023 0302 	bic.w	r3, r3, #2
 8007892:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ce:	f043 0302 	orr.w	r3, r3, #2
 80078d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078f8:	68fb      	ldr	r3, [r7, #12]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	4013      	ands	r3, r2
 8007926:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	0c1b      	lsrs	r3, r3, #16
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	4013      	ands	r3, r2
 8007958:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	b29b      	uxth	r3, r3
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr

08007968 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	4013      	ands	r3, r2
 8007994:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007996:	68bb      	ldr	r3, [r7, #8]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b087      	sub	sp, #28
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	fa22 f303 	lsr.w	r3, r2, r3
 80079d2:	01db      	lsls	r3, r3, #7
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4013      	ands	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079f0:	68bb      	ldr	r3, [r7, #8]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	f003 0301 	and.w	r3, r3, #1
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr

08007a16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a34:	f023 0307 	bic.w	r3, r3, #7
 8007a38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr
	...

08007a5c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	333c      	adds	r3, #60	; 0x3c
 8007a6e:	3304      	adds	r3, #4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4a1c      	ldr	r2, [pc, #112]	; (8007ae8 <USB_EP0_OutStart+0x8c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d90a      	bls.n	8007a92 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a8c:	d101      	bne.n	8007a92 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e024      	b.n	8007adc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac0:	f043 0318 	orr.w	r3, r3, #24
 8007ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ad8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	4f54300a 	.word	0x4f54300a

08007aec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <USB_CoreReset+0x60>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d901      	bls.n	8007b0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e01b      	b.n	8007b42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	daf2      	bge.n	8007af8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f043 0201 	orr.w	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4a08      	ldr	r2, [pc, #32]	; (8007b4c <USB_CoreReset+0x60>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d901      	bls.n	8007b34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e006      	b.n	8007b42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d0f0      	beq.n	8007b22 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr
 8007b4c:	00030d40 	.word	0x00030d40

08007b50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7c1b      	ldrb	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d115      	bne.n	8007b94 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	2181      	movs	r1, #129	; 0x81
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f003 ffa2 	bl	800baba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b80:	2202      	movs	r2, #2
 8007b82:	2101      	movs	r1, #1
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f003 ff98 	bl	800baba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007b92:	e012      	b.n	8007bba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	2202      	movs	r2, #2
 8007b98:	2181      	movs	r1, #129	; 0x81
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f003 ff8d 	bl	800baba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	2202      	movs	r2, #2
 8007baa:	2101      	movs	r1, #1
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f003 ff84 	bl	800baba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bba:	2308      	movs	r3, #8
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	2182      	movs	r1, #130	; 0x82
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f003 ff7a 	bl	800baba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bd0:	f004 f89a 	bl	800bd08 <USBD_static_malloc>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d102      	bne.n	8007bec <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007be6:	2301      	movs	r3, #1
 8007be8:	73fb      	strb	r3, [r7, #15]
 8007bea:	e026      	b.n	8007c3a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	7c1b      	ldrb	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c20:	2101      	movs	r1, #1
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f004 f839 	bl	800bc9a <USBD_LL_PrepareReceive>
 8007c28:	e007      	b.n	8007c3a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c30:	2340      	movs	r3, #64	; 0x40
 8007c32:	2101      	movs	r1, #1
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f004 f830 	bl	800bc9a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c54:	2181      	movs	r1, #129	; 0x81
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f003 ff55 	bl	800bb06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c62:	2101      	movs	r1, #1
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f003 ff4e 	bl	800bb06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c72:	2182      	movs	r1, #130	; 0x82
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f003 ff46 	bl	800bb06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00e      	beq.n	8007ca8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f004 f840 	bl	800bd20 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d039      	beq.n	8007d50 <USBD_CDC_Setup+0x9e>
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d17f      	bne.n	8007de0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d029      	beq.n	8007d3c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b25b      	sxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da11      	bge.n	8007d16 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007cfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	88d2      	ldrh	r2, [r2, #6]
 8007d04:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d06:	6939      	ldr	r1, [r7, #16]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	88db      	ldrh	r3, [r3, #6]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 fa13 	bl	800913a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d14:	e06b      	b.n	8007dee <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	785a      	ldrb	r2, [r3, #1]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	88db      	ldrh	r3, [r3, #6]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d2c:	6939      	ldr	r1, [r7, #16]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88db      	ldrh	r3, [r3, #6]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fa2e 	bl	8009196 <USBD_CtlPrepareRx>
      break;
 8007d3a:	e058      	b.n	8007dee <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	7850      	ldrb	r0, [r2, #1]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	4798      	blx	r3
      break;
 8007d4e:	e04e      	b.n	8007dee <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b0b      	cmp	r3, #11
 8007d56:	d02e      	beq.n	8007db6 <USBD_CDC_Setup+0x104>
 8007d58:	2b0b      	cmp	r3, #11
 8007d5a:	dc38      	bgt.n	8007dce <USBD_CDC_Setup+0x11c>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <USBD_CDC_Setup+0xb4>
 8007d60:	2b0a      	cmp	r3, #10
 8007d62:	d014      	beq.n	8007d8e <USBD_CDC_Setup+0xdc>
 8007d64:	e033      	b.n	8007dce <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d107      	bne.n	8007d80 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	2202      	movs	r2, #2
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 f9de 	bl	800913a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d7e:	e02e      	b.n	8007dde <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 f96f 	bl	8009066 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d8c:	e027      	b.n	8007dde <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d107      	bne.n	8007da8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d98:	f107 030f 	add.w	r3, r7, #15
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 f9ca 	bl	800913a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da6:	e01a      	b.n	8007dde <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 f95b 	bl	8009066 <USBD_CtlError>
            ret = USBD_FAIL;
 8007db0:	2302      	movs	r3, #2
 8007db2:	75fb      	strb	r3, [r7, #23]
          break;
 8007db4:	e013      	b.n	8007dde <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d00d      	beq.n	8007ddc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 f94f 	bl	8009066 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007dcc:	e006      	b.n	8007ddc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 f948 	bl	8009066 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	75fb      	strb	r3, [r7, #23]
          break;
 8007dda:	e000      	b.n	8007dde <USBD_CDC_Setup+0x12c>
          break;
 8007ddc:	bf00      	nop
      }
      break;
 8007dde:	e006      	b.n	8007dee <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 f93f 	bl	8009066 <USBD_CtlError>
      ret = USBD_FAIL;
 8007de8:	2302      	movs	r3, #2
 8007dea:	75fb      	strb	r3, [r7, #23]
      break;
 8007dec:	bf00      	nop
  }

  return ret;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e12:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d03a      	beq.n	8007e94 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e1e:	78fa      	ldrb	r2, [r7, #3]
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	331c      	adds	r3, #28
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d029      	beq.n	8007e88 <USBD_CDC_DataIn+0x90>
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	331c      	adds	r3, #28
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	78f9      	ldrb	r1, [r7, #3]
 8007e48:	68b8      	ldr	r0, [r7, #8]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	440b      	add	r3, r1
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4403      	add	r3, r0
 8007e54:	3344      	adds	r3, #68	; 0x44
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d110      	bne.n	8007e88 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007e66:	78fa      	ldrb	r2, [r7, #3]
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	440b      	add	r3, r1
 8007e74:	331c      	adds	r3, #28
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e7a:	78f9      	ldrb	r1, [r7, #3]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2200      	movs	r2, #0
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f003 fee7 	bl	800bc54 <USBD_LL_Transmit>
 8007e86:	e003      	b.n	8007e90 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e94:	2302      	movs	r3, #2
  }
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f003 ff12 	bl	800bce0 <USBD_LL_GetRxDataSize>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00d      	beq.n	8007eea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4798      	blx	r3

    return USBD_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e000      	b.n	8007eec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007eea:	2302      	movs	r3, #2
  }
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f02:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d015      	beq.n	8007f3a <USBD_CDC_EP0_RxReady+0x46>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f14:	2bff      	cmp	r3, #255	; 0xff
 8007f16:	d010      	beq.n	8007f3a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007f26:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f2e:	b292      	uxth	r2, r2
 8007f30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2243      	movs	r2, #67	; 0x43
 8007f50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007f52:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20000094 	.word	0x20000094

08007f64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2243      	movs	r2, #67	; 0x43
 8007f70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007f72:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	20000050 	.word	0x20000050

08007f84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2243      	movs	r2, #67	; 0x43
 8007f90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f92:	4b03      	ldr	r3, [pc, #12]	; (8007fa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	200000d8 	.word	0x200000d8

08007fa4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220a      	movs	r2, #10
 8007fb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007fb2:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	2000000c 	.word	0x2000000c

08007fc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008032:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008056:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d017      	beq.n	8008092 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	7c1b      	ldrb	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008074:	2101      	movs	r1, #1
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f003 fe0f 	bl	800bc9a <USBD_LL_PrepareReceive>
 800807c:	e007      	b.n	800808e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008084:	2340      	movs	r3, #64	; 0x40
 8008086:	2101      	movs	r1, #1
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f003 fe06 	bl	800bc9a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e000      	b.n	8008094 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008092:	2302      	movs	r3, #2
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	4613      	mov	r3, r2
 80080a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080b0:	2302      	movs	r3, #2
 80080b2:	e01a      	b.n	80080ea <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	79fa      	ldrb	r2, [r7, #7]
 80080e0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f003 fc8a 	bl	800b9fc <USBD_LL_Init>

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d006      	beq.n	8008114 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
 8008112:	e001      	b.n	8008118 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008114:	2302      	movs	r3, #2
 8008116:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr

08008124 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f003 fca9 	bl	800ba84 <USBD_LL_Start>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr

08008150 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800815c:	2302      	movs	r3, #2
 800815e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00c      	beq.n	8008184 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	4611      	mov	r1, r2
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 ff11 	bl	8008fee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081da:	461a      	mov	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d016      	beq.n	800821e <USBD_LL_SetupStage+0x6a>
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d81c      	bhi.n	800822e <USBD_LL_SetupStage+0x7a>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <USBD_LL_SetupStage+0x4a>
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d008      	beq.n	800820e <USBD_LL_SetupStage+0x5a>
 80081fc:	e017      	b.n	800822e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa04 	bl	8008614 <USBD_StdDevReq>
      break;
 800820c:	e01a      	b.n	8008244 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa66 	bl	80086e8 <USBD_StdItfReq>
      break;
 800821c:	e012      	b.n	8008244 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 faa6 	bl	8008778 <USBD_StdEPReq>
      break;
 800822c:	e00a      	b.n	8008244 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008238:	b2db      	uxtb	r3, r3
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f003 fc81 	bl	800bb44 <USBD_LL_StallEP>
      break;
 8008242:	bf00      	nop
  }

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	460b      	mov	r3, r1
 8008258:	607a      	str	r2, [r7, #4]
 800825a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800825c:	7afb      	ldrb	r3, [r7, #11]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d14b      	bne.n	80082fa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008268:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008270:	2b03      	cmp	r3, #3
 8008272:	d134      	bne.n	80082de <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	429a      	cmp	r2, r3
 800827e:	d919      	bls.n	80082b4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	1ad2      	subs	r2, r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008296:	429a      	cmp	r2, r3
 8008298:	d203      	bcs.n	80082a2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800829e:	b29b      	uxth	r3, r3
 80082a0:	e002      	b.n	80082a8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 ff90 	bl	80091d2 <USBD_CtlContinueRx>
 80082b2:	e038      	b.n	8008326 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d105      	bne.n	80082d6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 ff8d 	bl	80091f6 <USBD_CtlSendStatus>
 80082dc:	e023      	b.n	8008326 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d11e      	bne.n	8008326 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80082f0:	2100      	movs	r1, #0
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f003 fc26 	bl	800bb44 <USBD_LL_StallEP>
 80082f8:	e015      	b.n	8008326 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00d      	beq.n	8008322 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800830c:	2b03      	cmp	r3, #3
 800830e:	d108      	bne.n	8008322 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	7afa      	ldrb	r2, [r7, #11]
 800831a:	4611      	mov	r1, r2
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	4798      	blx	r3
 8008320:	e001      	b.n	8008326 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	e000      	b.n	8008328 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	460b      	mov	r3, r1
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800833e:	7afb      	ldrb	r3, [r7, #11]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d17f      	bne.n	8008444 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3314      	adds	r3, #20
 8008348:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008350:	2b02      	cmp	r3, #2
 8008352:	d15c      	bne.n	800840e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	429a      	cmp	r2, r3
 800835e:	d915      	bls.n	800838c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	1ad2      	subs	r2, r2, r3
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	b29b      	uxth	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fefa 	bl	8009172 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800837e:	2300      	movs	r3, #0
 8008380:	2200      	movs	r2, #0
 8008382:	2100      	movs	r1, #0
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f003 fc88 	bl	800bc9a <USBD_LL_PrepareReceive>
 800838a:	e04e      	b.n	800842a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	6912      	ldr	r2, [r2, #16]
 8008394:	fbb3 f1f2 	udiv	r1, r3, r2
 8008398:	fb01 f202 	mul.w	r2, r1, r2
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d11c      	bne.n	80083dc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d316      	bcc.n	80083dc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d20f      	bcs.n	80083dc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083bc:	2200      	movs	r2, #0
 80083be:	2100      	movs	r1, #0
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 fed6 	bl	8009172 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ce:	2300      	movs	r3, #0
 80083d0:	2200      	movs	r2, #0
 80083d2:	2100      	movs	r1, #0
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f003 fc60 	bl	800bc9a <USBD_LL_PrepareReceive>
 80083da:	e026      	b.n	800842a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d105      	bne.n	80083fe <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083fe:	2180      	movs	r1, #128	; 0x80
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f003 fb9f 	bl	800bb44 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 ff08 	bl	800921c <USBD_CtlReceiveStatus>
 800840c:	e00d      	b.n	800842a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008414:	2b04      	cmp	r3, #4
 8008416:	d004      	beq.n	8008422 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800841e:	2b00      	cmp	r3, #0
 8008420:	d103      	bne.n	800842a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008422:	2180      	movs	r1, #128	; 0x80
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f003 fb8d 	bl	800bb44 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008430:	2b01      	cmp	r3, #1
 8008432:	d11d      	bne.n	8008470 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7ff fe81 	bl	800813c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008442:	e015      	b.n	8008470 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00d      	beq.n	800846c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008456:	2b03      	cmp	r3, #3
 8008458:	d108      	bne.n	800846c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	7afa      	ldrb	r2, [r7, #11]
 8008464:	4611      	mov	r1, r2
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	4798      	blx	r3
 800846a:	e001      	b.n	8008470 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800846c:	2302      	movs	r3, #2
 800846e:	e000      	b.n	8008472 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008482:	2340      	movs	r3, #64	; 0x40
 8008484:	2200      	movs	r2, #0
 8008486:	2100      	movs	r1, #0
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f003 fb16 	bl	800baba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2240      	movs	r2, #64	; 0x40
 800849a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	2200      	movs	r2, #0
 80084a2:	2180      	movs	r1, #128	; 0x80
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f003 fb08 	bl	800baba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2240      	movs	r2, #64	; 0x40
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6852      	ldr	r2, [r2, #4]
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	4611      	mov	r1, r2
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	4798      	blx	r3
  }

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr

0800851a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2204      	movs	r2, #4
 8008532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	2b04      	cmp	r3, #4
 8008552:	d105      	bne.n	8008560 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	bc80      	pop	{r7}
 800856a:	4770      	bx	lr

0800856c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857a:	2b03      	cmp	r3, #3
 800857c:	d10b      	bne.n	8008596 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr

080085b8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr

080085d0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	bc80      	pop	{r7}
 80085e2:	4770      	bx	lr

080085e4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6852      	ldr	r2, [r2, #4]
 8008600:	b2d2      	uxtb	r2, r2
 8008602:	4611      	mov	r1, r2
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	4798      	blx	r3

  return USBD_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d005      	beq.n	800863a <USBD_StdDevReq+0x26>
 800862e:	2b40      	cmp	r3, #64	; 0x40
 8008630:	d84f      	bhi.n	80086d2 <USBD_StdDevReq+0xbe>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d009      	beq.n	800864a <USBD_StdDevReq+0x36>
 8008636:	2b20      	cmp	r3, #32
 8008638:	d14b      	bne.n	80086d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
      break;
 8008648:	e048      	b.n	80086dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b09      	cmp	r3, #9
 8008650:	d839      	bhi.n	80086c6 <USBD_StdDevReq+0xb2>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <USBD_StdDevReq+0x44>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	080086a9 	.word	0x080086a9
 800865c:	080086bd 	.word	0x080086bd
 8008660:	080086c7 	.word	0x080086c7
 8008664:	080086b3 	.word	0x080086b3
 8008668:	080086c7 	.word	0x080086c7
 800866c:	0800868b 	.word	0x0800868b
 8008670:	08008681 	.word	0x08008681
 8008674:	080086c7 	.word	0x080086c7
 8008678:	0800869f 	.word	0x0800869f
 800867c:	08008695 	.word	0x08008695
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9dc 	bl	8008a40 <USBD_GetDescriptor>
          break;
 8008688:	e022      	b.n	80086d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fb3f 	bl	8008d10 <USBD_SetAddress>
          break;
 8008692:	e01d      	b.n	80086d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb7e 	bl	8008d98 <USBD_SetConfig>
          break;
 800869c:	e018      	b.n	80086d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fc07 	bl	8008eb4 <USBD_GetConfig>
          break;
 80086a6:	e013      	b.n	80086d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fc37 	bl	8008f1e <USBD_GetStatus>
          break;
 80086b0:	e00e      	b.n	80086d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc65 	bl	8008f84 <USBD_SetFeature>
          break;
 80086ba:	e009      	b.n	80086d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fc74 	bl	8008fac <USBD_ClrFeature>
          break;
 80086c4:	e004      	b.n	80086d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fccc 	bl	8009066 <USBD_CtlError>
          break;
 80086ce:	bf00      	nop
      }
      break;
 80086d0:	e004      	b.n	80086dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fcc6 	bl	8009066 <USBD_CtlError>
      break;
 80086da:	bf00      	nop
  }

  return ret;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop

080086e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086fe:	2b40      	cmp	r3, #64	; 0x40
 8008700:	d005      	beq.n	800870e <USBD_StdItfReq+0x26>
 8008702:	2b40      	cmp	r3, #64	; 0x40
 8008704:	d82e      	bhi.n	8008764 <USBD_StdItfReq+0x7c>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <USBD_StdItfReq+0x26>
 800870a:	2b20      	cmp	r3, #32
 800870c:	d12a      	bne.n	8008764 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008714:	3b01      	subs	r3, #1
 8008716:	2b02      	cmp	r3, #2
 8008718:	d81d      	bhi.n	8008756 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	889b      	ldrh	r3, [r3, #4]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	d813      	bhi.n	800874c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	4798      	blx	r3
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d110      	bne.n	8008760 <USBD_StdItfReq+0x78>
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10d      	bne.n	8008760 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fd56 	bl	80091f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800874a:	e009      	b.n	8008760 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fc89 	bl	8009066 <USBD_CtlError>
          break;
 8008754:	e004      	b.n	8008760 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc84 	bl	8009066 <USBD_CtlError>
          break;
 800875e:	e000      	b.n	8008762 <USBD_StdItfReq+0x7a>
          break;
 8008760:	bf00      	nop
      }
      break;
 8008762:	e004      	b.n	800876e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fc7d 	bl	8009066 <USBD_CtlError>
      break;
 800876c:	bf00      	nop
  }

  return USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	889b      	ldrh	r3, [r3, #4]
 800878a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008794:	2b40      	cmp	r3, #64	; 0x40
 8008796:	d007      	beq.n	80087a8 <USBD_StdEPReq+0x30>
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	f200 8146 	bhi.w	8008a2a <USBD_StdEPReq+0x2b2>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <USBD_StdEPReq+0x40>
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	f040 8141 	bne.w	8008a2a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
      break;
 80087b6:	e13d      	b.n	8008a34 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	d10a      	bne.n	80087da <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	e12d      	b.n	8008a36 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d007      	beq.n	80087f2 <USBD_StdEPReq+0x7a>
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	f300 811b 	bgt.w	8008a1e <USBD_StdEPReq+0x2a6>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d072      	beq.n	80088d2 <USBD_StdEPReq+0x15a>
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d03a      	beq.n	8008866 <USBD_StdEPReq+0xee>
 80087f0:	e115      	b.n	8008a1e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d002      	beq.n	8008802 <USBD_StdEPReq+0x8a>
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d015      	beq.n	800882c <USBD_StdEPReq+0xb4>
 8008800:	e02b      	b.n	800885a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <USBD_StdEPReq+0xaa>
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2b80      	cmp	r3, #128	; 0x80
 800880c:	d009      	beq.n	8008822 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f003 f996 	bl	800bb44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008818:	2180      	movs	r1, #128	; 0x80
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f003 f992 	bl	800bb44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008820:	e020      	b.n	8008864 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc1e 	bl	8009066 <USBD_CtlError>
              break;
 800882a:	e01b      	b.n	8008864 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	885b      	ldrh	r3, [r3, #2]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10e      	bne.n	8008852 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <USBD_StdEPReq+0xda>
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b80      	cmp	r3, #128	; 0x80
 800883e:	d008      	beq.n	8008852 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	88db      	ldrh	r3, [r3, #6]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d104      	bne.n	8008852 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f003 f979 	bl	800bb44 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fccf 	bl	80091f6 <USBD_CtlSendStatus>

              break;
 8008858:	e004      	b.n	8008864 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fc02 	bl	8009066 <USBD_CtlError>
              break;
 8008862:	bf00      	nop
          }
          break;
 8008864:	e0e0      	b.n	8008a28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886c:	2b02      	cmp	r3, #2
 800886e:	d002      	beq.n	8008876 <USBD_StdEPReq+0xfe>
 8008870:	2b03      	cmp	r3, #3
 8008872:	d015      	beq.n	80088a0 <USBD_StdEPReq+0x128>
 8008874:	e026      	b.n	80088c4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00c      	beq.n	8008896 <USBD_StdEPReq+0x11e>
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b80      	cmp	r3, #128	; 0x80
 8008880:	d009      	beq.n	8008896 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f003 f95c 	bl	800bb44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800888c:	2180      	movs	r1, #128	; 0x80
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f003 f958 	bl	800bb44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008894:	e01c      	b.n	80088d0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fbe4 	bl	8009066 <USBD_CtlError>
              break;
 800889e:	e017      	b.n	80088d0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	885b      	ldrh	r3, [r3, #2]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d112      	bne.n	80088ce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f003 f963 	bl	800bb82 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fc9a 	bl	80091f6 <USBD_CtlSendStatus>
              }
              break;
 80088c2:	e004      	b.n	80088ce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fbcd 	bl	8009066 <USBD_CtlError>
              break;
 80088cc:	e000      	b.n	80088d0 <USBD_StdEPReq+0x158>
              break;
 80088ce:	bf00      	nop
          }
          break;
 80088d0:	e0aa      	b.n	8008a28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d002      	beq.n	80088e2 <USBD_StdEPReq+0x16a>
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d032      	beq.n	8008946 <USBD_StdEPReq+0x1ce>
 80088e0:	e097      	b.n	8008a12 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d007      	beq.n	80088f8 <USBD_StdEPReq+0x180>
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b80      	cmp	r3, #128	; 0x80
 80088ec:	d004      	beq.n	80088f8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fbb8 	bl	8009066 <USBD_CtlError>
                break;
 80088f6:	e091      	b.n	8008a1c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da0b      	bge.n	8008918 <USBD_StdEPReq+0x1a0>
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	3310      	adds	r3, #16
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	4413      	add	r3, r2
 8008914:	3304      	adds	r3, #4
 8008916:	e00b      	b.n	8008930 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	3304      	adds	r3, #4
 8008930:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2202      	movs	r2, #2
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fbfb 	bl	800913a <USBD_CtlSendData>
              break;
 8008944:	e06a      	b.n	8008a1c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800894a:	2b00      	cmp	r3, #0
 800894c:	da11      	bge.n	8008972 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	f003 020f 	and.w	r2, r3, #15
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	3318      	adds	r3, #24
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d117      	bne.n	8008998 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fb7b 	bl	8009066 <USBD_CtlError>
                  break;
 8008970:	e054      	b.n	8008a1c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	f003 020f 	and.w	r2, r3, #15
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	440b      	add	r3, r1
 8008984:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fb68 	bl	8009066 <USBD_CtlError>
                  break;
 8008996:	e041      	b.n	8008a1c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800899c:	2b00      	cmp	r3, #0
 800899e:	da0b      	bge.n	80089b8 <USBD_StdEPReq+0x240>
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	3310      	adds	r3, #16
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	3304      	adds	r3, #4
 80089b6:	e00b      	b.n	80089d0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	3304      	adds	r3, #4
 80089d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <USBD_StdEPReq+0x266>
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b80      	cmp	r3, #128	; 0x80
 80089dc:	d103      	bne.n	80089e6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e00e      	b.n	8008a04 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f003 f8e8 	bl	800bbc0 <USBD_LL_IsStallEP>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2201      	movs	r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e002      	b.n	8008a04 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2202      	movs	r2, #2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fb95 	bl	800913a <USBD_CtlSendData>
              break;
 8008a10:	e004      	b.n	8008a1c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fb26 	bl	8009066 <USBD_CtlError>
              break;
 8008a1a:	bf00      	nop
          }
          break;
 8008a1c:	e004      	b.n	8008a28 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fb20 	bl	8009066 <USBD_CtlError>
          break;
 8008a26:	bf00      	nop
      }
      break;
 8008a28:	e004      	b.n	8008a34 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fb1a 	bl	8009066 <USBD_CtlError>
      break;
 8008a32:	bf00      	nop
  }

  return ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	885b      	ldrh	r3, [r3, #2]
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	2b06      	cmp	r3, #6
 8008a62:	f200 8128 	bhi.w	8008cb6 <USBD_GetDescriptor+0x276>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBD_GetDescriptor+0x2c>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008a89 	.word	0x08008a89
 8008a70:	08008aa1 	.word	0x08008aa1
 8008a74:	08008ae1 	.word	0x08008ae1
 8008a78:	08008cb7 	.word	0x08008cb7
 8008a7c:	08008cb7 	.word	0x08008cb7
 8008a80:	08008c57 	.word	0x08008c57
 8008a84:	08008c83 	.word	0x08008c83
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	7c12      	ldrb	r2, [r2, #16]
 8008a94:	f107 0108 	add.w	r1, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
      break;
 8008a9e:	e112      	b.n	8008cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7c1b      	ldrb	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10d      	bne.n	8008ac4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab0:	f107 0208 	add.w	r2, r7, #8
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4798      	blx	r3
 8008ab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	2202      	movs	r2, #2
 8008ac0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ac2:	e100      	b.n	8008cc6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	f107 0208 	add.w	r2, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	2202      	movs	r2, #2
 8008adc:	701a      	strb	r2, [r3, #0]
      break;
 8008ade:	e0f2      	b.n	8008cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	885b      	ldrh	r3, [r3, #2]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	f200 80ac 	bhi.w	8008c44 <USBD_GetDescriptor+0x204>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <USBD_GetDescriptor+0xb4>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b0d 	.word	0x08008b0d
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b75 	.word	0x08008b75
 8008b00:	08008ba9 	.word	0x08008ba9
 8008b04:	08008bdd 	.word	0x08008bdd
 8008b08:	08008c11 	.word	0x08008c11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	7c12      	ldrb	r2, [r2, #16]
 8008b24:	f107 0108 	add.w	r1, r7, #8
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
 8008b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2e:	e091      	b.n	8008c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa97 	bl	8009066 <USBD_CtlError>
            err++;
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3e:	e089      	b.n	8008c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	7c12      	ldrb	r2, [r2, #16]
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b62:	e077      	b.n	8008c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fa7d 	bl	8009066 <USBD_CtlError>
            err++;
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	72fb      	strb	r3, [r7, #11]
          break;
 8008b72:	e06f      	b.n	8008c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	7c12      	ldrb	r2, [r2, #16]
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b96:	e05d      	b.n	8008c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa63 	bl	8009066 <USBD_CtlError>
            err++;
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ba6:	e055      	b.n	8008c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	7c12      	ldrb	r2, [r2, #16]
 8008bc0:	f107 0108 	add.w	r1, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bca:	e043      	b.n	8008c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa49 	bl	8009066 <USBD_CtlError>
            err++;
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bda:	e03b      	b.n	8008c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7c12      	ldrb	r2, [r2, #16]
 8008bf4:	f107 0108 	add.w	r1, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bfe:	e029      	b.n	8008c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa2f 	bl	8009066 <USBD_CtlError>
            err++;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c0e:	e021      	b.n	8008c54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	7c12      	ldrb	r2, [r2, #16]
 8008c28:	f107 0108 	add.w	r1, r7, #8
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c32:	e00f      	b.n	8008c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fa15 	bl	8009066 <USBD_CtlError>
            err++;
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	72fb      	strb	r3, [r7, #11]
          break;
 8008c42:	e007      	b.n	8008c54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa0d 	bl	8009066 <USBD_CtlError>
          err++;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c52:	e038      	b.n	8008cc6 <USBD_GetDescriptor+0x286>
 8008c54:	e037      	b.n	8008cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	7c1b      	ldrb	r3, [r3, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	f107 0208 	add.w	r2, r7, #8
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4798      	blx	r3
 8008c6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c70:	e029      	b.n	8008cc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f9f6 	bl	8009066 <USBD_CtlError>
        err++;
 8008c7a:	7afb      	ldrb	r3, [r7, #11]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c80:	e021      	b.n	8008cc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	7c1b      	ldrb	r3, [r3, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10d      	bne.n	8008ca6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	f107 0208 	add.w	r2, r7, #8
 8008c96:	4610      	mov	r0, r2
 8008c98:	4798      	blx	r3
 8008c9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ca4:	e00f      	b.n	8008cc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f9dc 	bl	8009066 <USBD_CtlError>
        err++;
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cb4:	e007      	b.n	8008cc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9d4 	bl	8009066 <USBD_CtlError>
      err++;
 8008cbe:	7afb      	ldrb	r3, [r7, #11]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc4:	bf00      	nop
  }

  if (err != 0U)
 8008cc6:	7afb      	ldrb	r3, [r7, #11]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11c      	bne.n	8008d06 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ccc:	893b      	ldrh	r3, [r7, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d011      	beq.n	8008cf6 <USBD_GetDescriptor+0x2b6>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	88db      	ldrh	r3, [r3, #6]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00d      	beq.n	8008cf6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	88da      	ldrh	r2, [r3, #6]
 8008cde:	893b      	ldrh	r3, [r7, #8]
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	bf28      	it	cs
 8008ce4:	4613      	movcs	r3, r2
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cea:	893b      	ldrh	r3, [r7, #8]
 8008cec:	461a      	mov	r2, r3
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fa22 	bl	800913a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	88db      	ldrh	r3, [r3, #6]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d104      	bne.n	8008d08 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fa79 	bl	80091f6 <USBD_CtlSendStatus>
 8008d04:	e000      	b.n	8008d08 <USBD_GetDescriptor+0x2c8>
    return;
 8008d06:	bf00      	nop
    }
  }
}
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop

08008d10 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	889b      	ldrh	r3, [r3, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d130      	bne.n	8008d84 <USBD_SetAddress+0x74>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	88db      	ldrh	r3, [r3, #6]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d12c      	bne.n	8008d84 <USBD_SetAddress+0x74>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	885b      	ldrh	r3, [r3, #2]
 8008d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d30:	d828      	bhi.n	8008d84 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	885b      	ldrh	r3, [r3, #2]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d104      	bne.n	8008d52 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f98b 	bl	8009066 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d50:	e01d      	b.n	8008d8e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	7bfa      	ldrb	r2, [r7, #15]
 8008d56:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 ff59 	bl	800bc16 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa46 	bl	80091f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d004      	beq.n	8008d7a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d78:	e009      	b.n	8008d8e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d82:	e004      	b.n	8008d8e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f96d 	bl	8009066 <USBD_CtlError>
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	885b      	ldrh	r3, [r3, #2]
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	4b41      	ldr	r3, [pc, #260]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008daa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008dac:	4b40      	ldr	r3, [pc, #256]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d904      	bls.n	8008dbe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f955 	bl	8009066 <USBD_CtlError>
 8008dbc:	e075      	b.n	8008eaa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d002      	beq.n	8008dce <USBD_SetConfig+0x36>
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d023      	beq.n	8008e14 <USBD_SetConfig+0x7c>
 8008dcc:	e062      	b.n	8008e94 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008dce:	4b38      	ldr	r3, [pc, #224]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d01a      	beq.n	8008e0c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008dd6:	4b36      	ldr	r3, [pc, #216]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2203      	movs	r2, #3
 8008de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008de8:	4b31      	ldr	r3, [pc, #196]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff f9ae 	bl	8008150 <USBD_SetClassConfig>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d104      	bne.n	8008e04 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f932 	bl	8009066 <USBD_CtlError>
            return;
 8008e02:	e052      	b.n	8008eaa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f9f6 	bl	80091f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e0a:	e04e      	b.n	8008eaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9f2 	bl	80091f6 <USBD_CtlSendStatus>
        break;
 8008e12:	e04a      	b.n	8008eaa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008e14:	4b26      	ldr	r3, [pc, #152]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d112      	bne.n	8008e42 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008e24:	4b22      	ldr	r3, [pc, #136]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e2e:	4b20      	ldr	r3, [pc, #128]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff f9aa 	bl	800818e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9db 	bl	80091f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e40:	e033      	b.n	8008eaa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e42:	4b1b      	ldr	r3, [pc, #108]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d01d      	beq.n	8008e8c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff f998 	bl	800818e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e5e:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e68:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff f96e 	bl	8008150 <USBD_SetClassConfig>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d104      	bne.n	8008e84 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f8f2 	bl	8009066 <USBD_CtlError>
            return;
 8008e82:	e012      	b.n	8008eaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f9b6 	bl	80091f6 <USBD_CtlSendStatus>
        break;
 8008e8a:	e00e      	b.n	8008eaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9b2 	bl	80091f6 <USBD_CtlSendStatus>
        break;
 8008e92:	e00a      	b.n	8008eaa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8e5 	bl	8009066 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <USBD_SetConfig+0x118>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff f973 	bl	800818e <USBD_ClrClassConfig>
        break;
 8008ea8:	bf00      	nop
    }
  }
}
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20001c6c 	.word	0x20001c6c

08008eb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	88db      	ldrh	r3, [r3, #6]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d004      	beq.n	8008ed0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f8cc 	bl	8009066 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ece:	e022      	b.n	8008f16 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	dc02      	bgt.n	8008ee0 <USBD_GetConfig+0x2c>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	dc03      	bgt.n	8008ee6 <USBD_GetConfig+0x32>
 8008ede:	e015      	b.n	8008f0c <USBD_GetConfig+0x58>
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d00b      	beq.n	8008efc <USBD_GetConfig+0x48>
 8008ee4:	e012      	b.n	8008f0c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f920 	bl	800913a <USBD_CtlSendData>
        break;
 8008efa:	e00c      	b.n	8008f16 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3304      	adds	r3, #4
 8008f00:	2201      	movs	r2, #1
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f918 	bl	800913a <USBD_CtlSendData>
        break;
 8008f0a:	e004      	b.n	8008f16 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f8a9 	bl	8009066 <USBD_CtlError>
        break;
 8008f14:	bf00      	nop
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d81e      	bhi.n	8008f72 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	88db      	ldrh	r3, [r3, #6]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d004      	beq.n	8008f46 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f891 	bl	8009066 <USBD_CtlError>
        break;
 8008f44:	e01a      	b.n	8008f7c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f043 0202 	orr.w	r2, r3, #2
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	330c      	adds	r3, #12
 8008f66:	2202      	movs	r2, #2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f8e5 	bl	800913a <USBD_CtlSendData>
      break;
 8008f70:	e004      	b.n	8008f7c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f876 	bl	8009066 <USBD_CtlError>
      break;
 8008f7a:	bf00      	nop
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	885b      	ldrh	r3, [r3, #2]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d106      	bne.n	8008fa4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f929 	bl	80091f6 <USBD_CtlSendStatus>
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d80b      	bhi.n	8008fda <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	885b      	ldrh	r3, [r3, #2]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d10c      	bne.n	8008fe4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f90f 	bl	80091f6 <USBD_CtlSendStatus>
      }
      break;
 8008fd8:	e004      	b.n	8008fe4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f842 	bl	8009066 <USBD_CtlError>
      break;
 8008fe2:	e000      	b.n	8008fe6 <USBD_ClrFeature+0x3a>
      break;
 8008fe4:	bf00      	nop
  }
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781a      	ldrb	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	785a      	ldrb	r2, [r3, #1]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	3302      	adds	r3, #2
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	b29a      	uxth	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	3303      	adds	r3, #3
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	b29b      	uxth	r3, r3
 800901c:	4413      	add	r3, r2
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	3304      	adds	r3, #4
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	b29a      	uxth	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	3305      	adds	r3, #5
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	b29b      	uxth	r3, r3
 8009038:	4413      	add	r3, r2
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	3306      	adds	r3, #6
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b29a      	uxth	r2, r3
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	3307      	adds	r3, #7
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	b29b      	uxth	r3, r3
 8009054:	4413      	add	r3, r2
 8009056:	b29a      	uxth	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	80da      	strh	r2, [r3, #6]

}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009070:	2180      	movs	r1, #128	; 0x80
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f002 fd66 	bl	800bb44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009078:	2100      	movs	r1, #0
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f002 fd62 	bl	800bb44 <USBD_LL_StallEP>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d032      	beq.n	8009104 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f834 	bl	800910c <USBD_GetLen>
 80090a4:	4603      	mov	r3, r0
 80090a6:	3301      	adds	r3, #1
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	75fa      	strb	r2, [r7, #23]
 80090b8:	461a      	mov	r2, r3
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	7812      	ldrb	r2, [r2, #0]
 80090c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	75fa      	strb	r2, [r7, #23]
 80090ca:	461a      	mov	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4413      	add	r3, r2
 80090d0:	2203      	movs	r2, #3
 80090d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80090d4:	e012      	b.n	80090fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	60fa      	str	r2, [r7, #12]
 80090dc:	7dfa      	ldrb	r2, [r7, #23]
 80090de:	1c51      	adds	r1, r2, #1
 80090e0:	75f9      	strb	r1, [r7, #23]
 80090e2:	4611      	mov	r1, r2
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	440a      	add	r2, r1
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	75fa      	strb	r2, [r7, #23]
 80090f2:	461a      	mov	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4413      	add	r3, r2
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e8      	bne.n	80090d6 <USBD_GetString+0x4e>
    }
  }
}
 8009104:	bf00      	nop
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009118:	e005      	b.n	8009126 <USBD_GetLen+0x1a>
  {
    len++;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	3301      	adds	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3301      	adds	r3, #1
 8009124:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f5      	bne.n	800911a <USBD_GetLen+0xe>
  }

  return len;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr

0800913a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	4613      	mov	r3, r2
 8009146:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2202      	movs	r2, #2
 800914c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009156:	88fa      	ldrh	r2, [r7, #6]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	2100      	movs	r1, #0
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f002 fd76 	bl	800bc54 <USBD_LL_Transmit>

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	4613      	mov	r3, r2
 800917e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009180:	88fb      	ldrh	r3, [r7, #6]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	2100      	movs	r1, #0
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f002 fd64 	bl	800bc54 <USBD_LL_Transmit>

  return USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	4613      	mov	r3, r2
 80091a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2203      	movs	r2, #3
 80091a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80091b4:	88fa      	ldrh	r2, [r7, #6]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091bc:	88fb      	ldrh	r3, [r7, #6]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	2100      	movs	r1, #0
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f002 fd69 	bl	800bc9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	4613      	mov	r3, r2
 80091de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	2100      	movs	r1, #0
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f002 fd57 	bl	800bc9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2204      	movs	r2, #4
 8009202:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009206:	2300      	movs	r3, #0
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f002 fd21 	bl	800bc54 <USBD_LL_Transmit>

  return USBD_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2205      	movs	r2, #5
 8009228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800922c:	2300      	movs	r3, #0
 800922e:	2200      	movs	r2, #0
 8009230:	2100      	movs	r1, #0
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f002 fd31 	bl	800bc9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	4603      	mov	r3, r0
 800924a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009254:	2b84      	cmp	r3, #132	; 0x84
 8009256:	d005      	beq.n	8009264 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009258:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	3303      	adds	r3, #3
 8009262:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009264:	68fb      	ldr	r3, [r7, #12]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr

08009270 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009274:	f000 ffec 	bl	800a250 <vTaskStartScheduler>
  
  return osOK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	bd80      	pop	{r7, pc}

0800927e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800927e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009280:	b089      	sub	sp, #36	; 0x24
 8009282:	af04      	add	r7, sp, #16
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d020      	beq.n	80092d2 <osThreadCreate+0x54>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01c      	beq.n	80092d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685c      	ldr	r4, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681d      	ldr	r5, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691e      	ldr	r6, [r3, #16]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff ffc9 	bl	8009242 <makeFreeRtosPriority>
 80092b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092ba:	9202      	str	r2, [sp, #8]
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	9100      	str	r1, [sp, #0]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	4632      	mov	r2, r6
 80092c4:	4629      	mov	r1, r5
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 fe04 	bl	8009ed4 <xTaskCreateStatic>
 80092cc:	4603      	mov	r3, r0
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	e01c      	b.n	800930c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685c      	ldr	r4, [r3, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092de:	b29e      	uxth	r6, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff ffab 	bl	8009242 <makeFreeRtosPriority>
 80092ec:	4602      	mov	r2, r0
 80092ee:	f107 030c 	add.w	r3, r7, #12
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	9200      	str	r2, [sp, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	4632      	mov	r2, r6
 80092fa:	4629      	mov	r1, r5
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fe45 	bl	8009f8c <xTaskCreate>
 8009302:	4603      	mov	r3, r0
 8009304:	2b01      	cmp	r3, #1
 8009306:	d001      	beq.n	800930c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009308:	2300      	movs	r3, #0
 800930a:	e000      	b.n	800930e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800930c:	68fb      	ldr	r3, [r7, #12]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009316 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <osDelay+0x16>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	e000      	b.n	800932e <osDelay+0x18>
 800932c:	2301      	movs	r3, #1
 800932e:	4618      	mov	r0, r3
 8009330:	f000 ff5a 	bl	800a1e8 <vTaskDelay>
  
  return osOK;
 8009334:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800933e:	b580      	push	{r7, lr}
 8009340:	b086      	sub	sp, #24
 8009342:	af02      	add	r7, sp, #8
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00f      	beq.n	8009370 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d10a      	bne.n	800936c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2203      	movs	r2, #3
 800935c:	9200      	str	r2, [sp, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	2001      	movs	r0, #1
 8009364:	f000 f95c 	bl	8009620 <xQueueGenericCreateStatic>
 8009368:	4603      	mov	r3, r0
 800936a:	e016      	b.n	800939a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800936c:	2300      	movs	r3, #0
 800936e:	e014      	b.n	800939a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d110      	bne.n	8009398 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009376:	2203      	movs	r2, #3
 8009378:	2100      	movs	r1, #0
 800937a:	2001      	movs	r0, #1
 800937c:	f000 f9c7 	bl	800970e <xQueueGenericCreate>
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <osSemaphoreCreate+0x56>
 8009388:	2300      	movs	r3, #0
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 fa1a 	bl	80097c8 <xQueueGenericSend>
      return sema;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	e000      	b.n	800939a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009398:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80093a2:	b590      	push	{r4, r7, lr}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af02      	add	r7, sp, #8
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d011      	beq.n	80093d8 <osMessageCreate+0x36>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00d      	beq.n	80093d8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6859      	ldr	r1, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	2400      	movs	r4, #0
 80093ce:	9400      	str	r4, [sp, #0]
 80093d0:	f000 f926 	bl	8009620 <xQueueGenericCreateStatic>
 80093d4:	4603      	mov	r3, r0
 80093d6:	e008      	b.n	80093ea <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	4619      	mov	r1, r3
 80093e4:	f000 f993 	bl	800970e <xQueueGenericCreate>
 80093e8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd90      	pop	{r4, r7, pc}

080093f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f103 0208 	add.w	r2, r3, #8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f04f 32ff 	mov.w	r2, #4294967295
 800940a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f103 0208 	add.w	r2, r3, #8
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f103 0208 	add.w	r2, r3, #8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	bc80      	pop	{r7}
 800942e:	4770      	bx	lr

08009430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr

08009448 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	601a      	str	r2, [r3, #0]
}
 8009484:	bf00      	nop
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr

0800948e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a4:	d103      	bne.n	80094ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	e00c      	b.n	80094c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3308      	adds	r3, #8
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e002      	b.n	80094bc <vListInsert+0x2e>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d2f6      	bcs.n	80094b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	601a      	str	r2, [r3, #0]
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	4770      	bx	lr

080094fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094fe:	b480      	push	{r7}
 8009500:	b085      	sub	sp, #20
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6892      	ldr	r2, [r2, #8]
 8009514:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	6852      	ldr	r2, [r2, #4]
 800951e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	429a      	cmp	r2, r3
 8009528:	d103      	bne.n	8009532 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689a      	ldr	r2, [r3, #8]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	1e5a      	subs	r2, r3, #1
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800957a:	f001 fc67 	bl	800ae4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009586:	68f9      	ldr	r1, [r7, #12]
 8009588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800958a:	fb01 f303 	mul.w	r3, r1, r3
 800958e:	441a      	add	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095aa:	3b01      	subs	r3, #1
 80095ac:	68f9      	ldr	r1, [r7, #12]
 80095ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095b0:	fb01 f303 	mul.w	r3, r1, r3
 80095b4:	441a      	add	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	22ff      	movs	r2, #255	; 0xff
 80095be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	22ff      	movs	r2, #255	; 0xff
 80095c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d114      	bne.n	80095fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01a      	beq.n	800960e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3310      	adds	r3, #16
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 f87d 	bl	800a6dc <xTaskRemoveFromEventList>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d012      	beq.n	800960e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095e8:	4b0c      	ldr	r3, [pc, #48]	; (800961c <xQueueGenericReset+0xcc>)
 80095ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	e009      	b.n	800960e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3310      	adds	r3, #16
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff fef7 	bl	80093f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3324      	adds	r3, #36	; 0x24
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff fef2 	bl	80093f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800960e:	f001 fc4d 	bl	800aeac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009612:	2301      	movs	r3, #1
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08e      	sub	sp, #56	; 0x38
 8009624:	af02      	add	r7, sp, #8
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <xQueueGenericCreateStatic+0x52>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <xQueueGenericCreateStatic+0x56>
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <xQueueGenericCreateStatic+0x58>
 8009676:	2300      	movs	r3, #0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	623b      	str	r3, [r7, #32]
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <xQueueGenericCreateStatic+0x7e>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <xQueueGenericCreateStatic+0x82>
 800969e:	2301      	movs	r3, #1
 80096a0:	e000      	b.n	80096a4 <xQueueGenericCreateStatic+0x84>
 80096a2:	2300      	movs	r3, #0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10a      	bne.n	80096be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	61fb      	str	r3, [r7, #28]
}
 80096ba:	bf00      	nop
 80096bc:	e7fe      	b.n	80096bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096be:	2348      	movs	r3, #72	; 0x48
 80096c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2b48      	cmp	r3, #72	; 0x48
 80096c6:	d00a      	beq.n	80096de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	61bb      	str	r3, [r7, #24]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00d      	beq.n	8009704 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	4613      	mov	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 f843 	bl	800978a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009706:	4618      	mov	r0, r3
 8009708:	3730      	adds	r7, #48	; 0x30
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800970e:	b580      	push	{r7, lr}
 8009710:	b08a      	sub	sp, #40	; 0x28
 8009712:	af02      	add	r7, sp, #8
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	4613      	mov	r3, r2
 800971a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	613b      	str	r3, [r7, #16]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800973e:	2300      	movs	r3, #0
 8009740:	61fb      	str	r3, [r7, #28]
 8009742:	e004      	b.n	800974e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	fb02 f303 	mul.w	r3, r2, r3
 800974c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	3348      	adds	r3, #72	; 0x48
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fc7a 	bl	800b04c <pvPortMalloc>
 8009758:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00f      	beq.n	8009780 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	3348      	adds	r3, #72	; 0x48
 8009764:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800976e:	79fa      	ldrb	r2, [r7, #7]
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	4613      	mov	r3, r2
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 f805 	bl	800978a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009780:	69bb      	ldr	r3, [r7, #24]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3720      	adds	r7, #32
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d103      	bne.n	80097a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	e002      	b.n	80097ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097b8:	2101      	movs	r1, #1
 80097ba:	69b8      	ldr	r0, [r7, #24]
 80097bc:	f7ff fec8 	bl	8009550 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08e      	sub	sp, #56	; 0x38
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097d6:	2300      	movs	r3, #0
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xQueueGenericSend+0x32>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <xQueueGenericSend+0x40>
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <xQueueGenericSend+0x44>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <xQueueGenericSend+0x46>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <xQueueGenericSend+0x60>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d103      	bne.n	8009836 <xQueueGenericSend+0x6e>
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <xQueueGenericSend+0x72>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <xQueueGenericSend+0x74>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xQueueGenericSend+0x8e>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009856:	f001 f901 	bl	800aa5c <xTaskGetSchedulerState>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <xQueueGenericSend+0x9e>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <xQueueGenericSend+0xa2>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <xQueueGenericSend+0xa4>
 800986a:	2300      	movs	r3, #0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <xQueueGenericSend+0xbe>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	61fb      	str	r3, [r7, #28]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009886:	f001 fae1 	bl	800ae4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009892:	429a      	cmp	r2, r3
 8009894:	d302      	bcc.n	800989c <xQueueGenericSend+0xd4>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b02      	cmp	r3, #2
 800989a:	d129      	bne.n	80098f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	68b9      	ldr	r1, [r7, #8]
 80098a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098a2:	f000 fa07 	bl	8009cb4 <prvCopyDataToQueue>
 80098a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d010      	beq.n	80098d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	3324      	adds	r3, #36	; 0x24
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 ff11 	bl	800a6dc <xTaskRemoveFromEventList>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d013      	beq.n	80098e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098c0:	4b3f      	ldr	r3, [pc, #252]	; (80099c0 <xQueueGenericSend+0x1f8>)
 80098c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	e00a      	b.n	80098e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098d8:	4b39      	ldr	r3, [pc, #228]	; (80099c0 <xQueueGenericSend+0x1f8>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098e8:	f001 fae0 	bl	800aeac <vPortExitCritical>
				return pdPASS;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e063      	b.n	80099b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098f6:	f001 fad9 	bl	800aeac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e05c      	b.n	80099b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009904:	f107 0314 	add.w	r3, r7, #20
 8009908:	4618      	mov	r0, r3
 800990a:	f000 ff49 	bl	800a7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800990e:	2301      	movs	r3, #1
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009912:	f001 facb 	bl	800aeac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009916:	f000 fcfb 	bl	800a310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800991a:	f001 fa97 	bl	800ae4c <vPortEnterCritical>
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009924:	b25b      	sxtb	r3, r3
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d103      	bne.n	8009934 <xQueueGenericSend+0x16c>
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800993a:	b25b      	sxtb	r3, r3
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009940:	d103      	bne.n	800994a <xQueueGenericSend+0x182>
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800994a:	f001 faaf 	bl	800aeac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800994e:	1d3a      	adds	r2, r7, #4
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f000 ff38 	bl	800a7cc <xTaskCheckForTimeOut>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d124      	bne.n	80099ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009964:	f000 fa9e 	bl	8009ea4 <prvIsQueueFull>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d018      	beq.n	80099a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	3310      	adds	r3, #16
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fe8c 	bl	800a694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800997c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800997e:	f000 fa29 	bl	8009dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009982:	f000 fcd3 	bl	800a32c <xTaskResumeAll>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	f47f af7c 	bne.w	8009886 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800998e:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <xQueueGenericSend+0x1f8>)
 8009990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	e772      	b.n	8009886 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099a2:	f000 fa17 	bl	8009dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099a6:	f000 fcc1 	bl	800a32c <xTaskResumeAll>
 80099aa:	e76c      	b.n	8009886 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ae:	f000 fa11 	bl	8009dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099b2:	f000 fcbb 	bl	800a32c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099b6:	2300      	movs	r3, #0
		}
	}
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3738      	adds	r7, #56	; 0x38
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08e      	sub	sp, #56	; 0x38
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d103      	bne.n	8009a00 <xQueueGenericSendFromISR+0x3c>
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <xQueueGenericSendFromISR+0x40>
 8009a00:	2301      	movs	r3, #1
 8009a02:	e000      	b.n	8009a06 <xQueueGenericSendFromISR+0x42>
 8009a04:	2300      	movs	r3, #0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	623b      	str	r3, [r7, #32]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d103      	bne.n	8009a2e <xQueueGenericSendFromISR+0x6a>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <xQueueGenericSendFromISR+0x6e>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <xQueueGenericSendFromISR+0x70>
 8009a32:	2300      	movs	r3, #0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	61fb      	str	r3, [r7, #28]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a4e:	f001 fabf 	bl	800afd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a52:	f3ef 8211 	mrs	r2, BASEPRI
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	61ba      	str	r2, [r7, #24]
 8009a68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d302      	bcc.n	8009a80 <xQueueGenericSendFromISR+0xbc>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d12c      	bne.n	8009ada <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a90:	f000 f910 	bl	8009cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9c:	d112      	bne.n	8009ac4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d016      	beq.n	8009ad4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	3324      	adds	r3, #36	; 0x24
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 fe16 	bl	800a6dc <xTaskRemoveFromEventList>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00e      	beq.n	8009ad4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	e007      	b.n	8009ad4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ac8:	3301      	adds	r3, #1
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	b25a      	sxtb	r2, r3
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009ad8:	e001      	b.n	8009ade <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ae8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3738      	adds	r7, #56	; 0x38
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08c      	sub	sp, #48	; 0x30
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <xQueueReceive+0x30>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	623b      	str	r3, [r7, #32]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d103      	bne.n	8009b32 <xQueueReceive+0x3e>
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <xQueueReceive+0x42>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e000      	b.n	8009b38 <xQueueReceive+0x44>
 8009b36:	2300      	movs	r3, #0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <xQueueReceive+0x5e>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	61fb      	str	r3, [r7, #28]
}
 8009b4e:	bf00      	nop
 8009b50:	e7fe      	b.n	8009b50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b52:	f000 ff83 	bl	800aa5c <xTaskGetSchedulerState>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <xQueueReceive+0x6e>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <xQueueReceive+0x72>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e000      	b.n	8009b68 <xQueueReceive+0x74>
 8009b66:	2300      	movs	r3, #0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <xQueueReceive+0x8e>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	61bb      	str	r3, [r7, #24]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b82:	f001 f963 	bl	800ae4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d01f      	beq.n	8009bd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b92:	68b9      	ldr	r1, [r7, #8]
 8009b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b96:	f000 f8f7 	bl	8009d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	1e5a      	subs	r2, r3, #1
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00f      	beq.n	8009bca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	3310      	adds	r3, #16
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fd94 	bl	800a6dc <xTaskRemoveFromEventList>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bba:	4b3d      	ldr	r3, [pc, #244]	; (8009cb0 <xQueueReceive+0x1bc>)
 8009bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bca:	f001 f96f 	bl	800aeac <vPortExitCritical>
				return pdPASS;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e069      	b.n	8009ca6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d103      	bne.n	8009be0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bd8:	f001 f968 	bl	800aeac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e062      	b.n	8009ca6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d106      	bne.n	8009bf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009be6:	f107 0310 	add.w	r3, r7, #16
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 fdd8 	bl	800a7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bf4:	f001 f95a 	bl	800aeac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bf8:	f000 fb8a 	bl	800a310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bfc:	f001 f926 	bl	800ae4c <vPortEnterCritical>
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c06:	b25b      	sxtb	r3, r3
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d103      	bne.n	8009c16 <xQueueReceive+0x122>
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c1c:	b25b      	sxtb	r3, r3
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d103      	bne.n	8009c2c <xQueueReceive+0x138>
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c2c:	f001 f93e 	bl	800aeac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c30:	1d3a      	adds	r2, r7, #4
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	4611      	mov	r1, r2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 fdc7 	bl	800a7cc <xTaskCheckForTimeOut>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d123      	bne.n	8009c8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c46:	f000 f917 	bl	8009e78 <prvIsQueueEmpty>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d017      	beq.n	8009c80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	3324      	adds	r3, #36	; 0x24
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fd1b 	bl	800a694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c60:	f000 f8b8 	bl	8009dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c64:	f000 fb62 	bl	800a32c <xTaskResumeAll>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d189      	bne.n	8009b82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c6e:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <xQueueReceive+0x1bc>)
 8009c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	e780      	b.n	8009b82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c82:	f000 f8a7 	bl	8009dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c86:	f000 fb51 	bl	800a32c <xTaskResumeAll>
 8009c8a:	e77a      	b.n	8009b82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8e:	f000 f8a1 	bl	8009dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c92:	f000 fb4b 	bl	800a32c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c98:	f000 f8ee 	bl	8009e78 <prvIsQueueEmpty>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f43f af6f 	beq.w	8009b82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3730      	adds	r7, #48	; 0x30
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	e000ed04 	.word	0xe000ed04

08009cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10d      	bne.n	8009cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d14d      	bne.n	8009d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 feda 	bl	800aa98 <xTaskPriorityDisinherit>
 8009ce4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	605a      	str	r2, [r3, #4]
 8009cec:	e043      	b.n	8009d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d119      	bne.n	8009d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6898      	ldr	r0, [r3, #8]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	f002 f868 	bl	800bdd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	441a      	add	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d32b      	bcc.n	8009d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	609a      	str	r2, [r3, #8]
 8009d26:	e026      	b.n	8009d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68d8      	ldr	r0, [r3, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	461a      	mov	r2, r3
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	f002 f84e 	bl	800bdd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	425b      	negs	r3, r3
 8009d42:	441a      	add	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d207      	bcs.n	8009d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	441a      	add	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d105      	bne.n	8009d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d018      	beq.n	8009dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	441a      	add	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d303      	bcc.n	8009dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68d9      	ldr	r1, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6838      	ldr	r0, [r7, #0]
 8009dc8:	f002 f804 	bl	800bdd4 <memcpy>
	}
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ddc:	f001 f836 	bl	800ae4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009de8:	e011      	b.n	8009e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d012      	beq.n	8009e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3324      	adds	r3, #36	; 0x24
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fc70 	bl	800a6dc <xTaskRemoveFromEventList>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e02:	f000 fd45 	bl	800a890 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dce9      	bgt.n	8009dea <prvUnlockQueue+0x16>
 8009e16:	e000      	b.n	8009e1a <prvUnlockQueue+0x46>
					break;
 8009e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	22ff      	movs	r2, #255	; 0xff
 8009e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e22:	f001 f843 	bl	800aeac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e26:	f001 f811 	bl	800ae4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e32:	e011      	b.n	8009e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d012      	beq.n	8009e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3310      	adds	r3, #16
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fc4b 	bl	800a6dc <xTaskRemoveFromEventList>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e4c:	f000 fd20 	bl	800a890 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dce9      	bgt.n	8009e34 <prvUnlockQueue+0x60>
 8009e60:	e000      	b.n	8009e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	22ff      	movs	r2, #255	; 0xff
 8009e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e6c:	f001 f81e 	bl	800aeac <vPortExitCritical>
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e80:	f000 ffe4 	bl	800ae4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e001      	b.n	8009e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e96:	f001 f809 	bl	800aeac <vPortExitCritical>

	return xReturn;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eac:	f000 ffce 	bl	800ae4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d102      	bne.n	8009ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e001      	b.n	8009ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ec6:	f000 fff1 	bl	800aeac <vPortExitCritical>

	return xReturn;
 8009eca:	68fb      	ldr	r3, [r7, #12]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08e      	sub	sp, #56	; 0x38
 8009ed8:	af04      	add	r7, sp, #16
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	623b      	str	r3, [r7, #32]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10a      	bne.n	8009f1a <xTaskCreateStatic+0x46>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	61fb      	str	r3, [r7, #28]
}
 8009f16:	bf00      	nop
 8009f18:	e7fe      	b.n	8009f18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f1a:	2354      	movs	r3, #84	; 0x54
 8009f1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2b54      	cmp	r3, #84	; 0x54
 8009f22:	d00a      	beq.n	8009f3a <xTaskCreateStatic+0x66>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	61bb      	str	r3, [r7, #24]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01e      	beq.n	8009f7e <xTaskCreateStatic+0xaa>
 8009f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d01b      	beq.n	8009f7e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9303      	str	r3, [sp, #12]
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	9302      	str	r3, [sp, #8]
 8009f60:	f107 0314 	add.w	r3, r7, #20
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	68b9      	ldr	r1, [r7, #8]
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 f850 	bl	800a016 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f78:	f000 f8cc 	bl	800a114 <prvAddNewTaskToReadyList>
 8009f7c:	e001      	b.n	8009f82 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f82:	697b      	ldr	r3, [r7, #20]
	}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3728      	adds	r7, #40	; 0x28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08c      	sub	sp, #48	; 0x30
 8009f90:	af04      	add	r7, sp, #16
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f9c:	88fb      	ldrh	r3, [r7, #6]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f001 f853 	bl	800b04c <pvPortMalloc>
 8009fa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00e      	beq.n	8009fcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009fae:	2054      	movs	r0, #84	; 0x54
 8009fb0:	f001 f84c 	bl	800b04c <pvPortMalloc>
 8009fb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8009fc2:	e005      	b.n	8009fd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fc4:	6978      	ldr	r0, [r7, #20]
 8009fc6:	f001 f905 	bl	800b1d4 <vPortFree>
 8009fca:	e001      	b.n	8009fd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d017      	beq.n	800a006 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fde:	88fa      	ldrh	r2, [r7, #6]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9303      	str	r3, [sp, #12]
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	9302      	str	r3, [sp, #8]
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f80e 	bl	800a016 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ffa:	69f8      	ldr	r0, [r7, #28]
 8009ffc:	f000 f88a 	bl	800a114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a000:	2301      	movs	r3, #1
 800a002:	61bb      	str	r3, [r7, #24]
 800a004:	e002      	b.n	800a00c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a006:	f04f 33ff 	mov.w	r3, #4294967295
 800a00a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a00c:	69bb      	ldr	r3, [r7, #24]
	}
 800a00e:	4618      	mov	r0, r3
 800a010:	3720      	adds	r7, #32
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b088      	sub	sp, #32
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	607a      	str	r2, [r7, #4]
 800a022:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a02e:	3b01      	subs	r3, #1
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	f023 0307 	bic.w	r3, r3, #7
 800a03c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00a      	beq.n	800a05e <prvInitialiseNewTask+0x48>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	617b      	str	r3, [r7, #20]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a05e:	2300      	movs	r3, #0
 800a060:	61fb      	str	r3, [r7, #28]
 800a062:	e012      	b.n	800a08a <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	4413      	add	r3, r2
 800a06a:	7819      	ldrb	r1, [r3, #0]
 800a06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	3334      	adds	r3, #52	; 0x34
 800a074:	460a      	mov	r2, r1
 800a076:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	4413      	add	r3, r2
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d006      	beq.n	800a092 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	3301      	adds	r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	2b0f      	cmp	r3, #15
 800a08e:	d9e9      	bls.n	800a064 <prvInitialiseNewTask+0x4e>
 800a090:	e000      	b.n	800a094 <prvInitialiseNewTask+0x7e>
		{
			break;
 800a092:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d901      	bls.n	800a0a6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0a2:	2306      	movs	r3, #6
 800a0a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff f9b7 	bl	8009430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff f9b2 	bl	8009430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	f1c3 0207 	rsb	r2, r3, #7
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	69b8      	ldr	r0, [r7, #24]
 800a0f6:	f000 fdbb 	bl	800ac70 <pxPortInitialiseStack>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a10c:	bf00      	nop
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a11c:	f000 fe96 	bl	800ae4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a120:	4b2a      	ldr	r3, [pc, #168]	; (800a1cc <prvAddNewTaskToReadyList+0xb8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	4a29      	ldr	r2, [pc, #164]	; (800a1cc <prvAddNewTaskToReadyList+0xb8>)
 800a128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a12a:	4b29      	ldr	r3, [pc, #164]	; (800a1d0 <prvAddNewTaskToReadyList+0xbc>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a132:	4a27      	ldr	r2, [pc, #156]	; (800a1d0 <prvAddNewTaskToReadyList+0xbc>)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a138:	4b24      	ldr	r3, [pc, #144]	; (800a1cc <prvAddNewTaskToReadyList+0xb8>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d110      	bne.n	800a162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a140:	f000 fbca 	bl	800a8d8 <prvInitialiseTaskLists>
 800a144:	e00d      	b.n	800a162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a146:	4b23      	ldr	r3, [pc, #140]	; (800a1d4 <prvAddNewTaskToReadyList+0xc0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d109      	bne.n	800a162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a14e:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <prvAddNewTaskToReadyList+0xbc>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a158:	429a      	cmp	r2, r3
 800a15a:	d802      	bhi.n	800a162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a15c:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <prvAddNewTaskToReadyList+0xbc>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a162:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <prvAddNewTaskToReadyList+0xc4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3301      	adds	r3, #1
 800a168:	4a1b      	ldr	r2, [pc, #108]	; (800a1d8 <prvAddNewTaskToReadyList+0xc4>)
 800a16a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	2201      	movs	r2, #1
 800a172:	409a      	lsls	r2, r3
 800a174:	4b19      	ldr	r3, [pc, #100]	; (800a1dc <prvAddNewTaskToReadyList+0xc8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4313      	orrs	r3, r2
 800a17a:	4a18      	ldr	r2, [pc, #96]	; (800a1dc <prvAddNewTaskToReadyList+0xc8>)
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4a15      	ldr	r2, [pc, #84]	; (800a1e0 <prvAddNewTaskToReadyList+0xcc>)
 800a18c:	441a      	add	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3304      	adds	r3, #4
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7ff f957 	bl	8009448 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a19a:	f000 fe87 	bl	800aeac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a19e:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <prvAddNewTaskToReadyList+0xc0>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00e      	beq.n	800a1c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <prvAddNewTaskToReadyList+0xbc>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d207      	bcs.n	800a1c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1b4:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <prvAddNewTaskToReadyList+0xd0>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20001d70 	.word	0x20001d70
 800a1d0:	20001c70 	.word	0x20001c70
 800a1d4:	20001d7c 	.word	0x20001d7c
 800a1d8:	20001d8c 	.word	0x20001d8c
 800a1dc:	20001d78 	.word	0x20001d78
 800a1e0:	20001c74 	.word	0x20001c74
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d017      	beq.n	800a22a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1fa:	4b13      	ldr	r3, [pc, #76]	; (800a248 <vTaskDelay+0x60>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <vTaskDelay+0x30>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	60bb      	str	r3, [r7, #8]
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a218:	f000 f87a 	bl	800a310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a21c:	2100      	movs	r1, #0
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fcc0 	bl	800aba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a224:	f000 f882 	bl	800a32c <xTaskResumeAll>
 800a228:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d107      	bne.n	800a240 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <vTaskDelay+0x64>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20001d98 	.word	0x20001d98
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	; 0x28
 800a254:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a25e:	463a      	mov	r2, r7
 800a260:	1d39      	adds	r1, r7, #4
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	4618      	mov	r0, r3
 800a268:	f7f7 fc50 	bl	8001b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	9202      	str	r2, [sp, #8]
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	2300      	movs	r3, #0
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	460a      	mov	r2, r1
 800a27e:	491e      	ldr	r1, [pc, #120]	; (800a2f8 <vTaskStartScheduler+0xa8>)
 800a280:	481e      	ldr	r0, [pc, #120]	; (800a2fc <vTaskStartScheduler+0xac>)
 800a282:	f7ff fe27 	bl	8009ed4 <xTaskCreateStatic>
 800a286:	4603      	mov	r3, r0
 800a288:	4a1d      	ldr	r2, [pc, #116]	; (800a300 <vTaskStartScheduler+0xb0>)
 800a28a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <vTaskStartScheduler+0xb0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a294:	2301      	movs	r3, #1
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	e001      	b.n	800a29e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d116      	bne.n	800a2d2 <vTaskStartScheduler+0x82>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	613b      	str	r3, [r7, #16]
}
 800a2b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2b8:	4b12      	ldr	r3, [pc, #72]	; (800a304 <vTaskStartScheduler+0xb4>)
 800a2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a2be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2c0:	4b11      	ldr	r3, [pc, #68]	; (800a308 <vTaskStartScheduler+0xb8>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a2c6:	4b11      	ldr	r3, [pc, #68]	; (800a30c <vTaskStartScheduler+0xbc>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2cc:	f000 fd4c 	bl	800ad68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2d0:	e00e      	b.n	800a2f0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d10a      	bne.n	800a2f0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	60fb      	str	r3, [r7, #12]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <vTaskStartScheduler+0x9e>
}
 800a2f0:	bf00      	nop
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	0800bf0c 	.word	0x0800bf0c
 800a2fc:	0800a8a9 	.word	0x0800a8a9
 800a300:	20001d94 	.word	0x20001d94
 800a304:	20001d90 	.word	0x20001d90
 800a308:	20001d7c 	.word	0x20001d7c
 800a30c:	20001d74 	.word	0x20001d74

0800a310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <vTaskSuspendAll+0x18>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3301      	adds	r3, #1
 800a31a:	4a03      	ldr	r2, [pc, #12]	; (800a328 <vTaskSuspendAll+0x18>)
 800a31c:	6013      	str	r3, [r2, #0]
}
 800a31e:	bf00      	nop
 800a320:	46bd      	mov	sp, r7
 800a322:	bc80      	pop	{r7}
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20001d98 	.word	0x20001d98

0800a32c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a336:	2300      	movs	r3, #0
 800a338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a33a:	4b41      	ldr	r3, [pc, #260]	; (800a440 <xTaskResumeAll+0x114>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <xTaskResumeAll+0x2c>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	603b      	str	r3, [r7, #0]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a358:	f000 fd78 	bl	800ae4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a35c:	4b38      	ldr	r3, [pc, #224]	; (800a440 <xTaskResumeAll+0x114>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3b01      	subs	r3, #1
 800a362:	4a37      	ldr	r2, [pc, #220]	; (800a440 <xTaskResumeAll+0x114>)
 800a364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a366:	4b36      	ldr	r3, [pc, #216]	; (800a440 <xTaskResumeAll+0x114>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d161      	bne.n	800a432 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a36e:	4b35      	ldr	r3, [pc, #212]	; (800a444 <xTaskResumeAll+0x118>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d05d      	beq.n	800a432 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a376:	e02e      	b.n	800a3d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a378:	4b33      	ldr	r3, [pc, #204]	; (800a448 <xTaskResumeAll+0x11c>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3318      	adds	r3, #24
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff f8ba 	bl	80094fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff f8b5 	bl	80094fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	2201      	movs	r2, #1
 800a39a:	409a      	lsls	r2, r3
 800a39c:	4b2b      	ldr	r3, [pc, #172]	; (800a44c <xTaskResumeAll+0x120>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	4a2a      	ldr	r2, [pc, #168]	; (800a44c <xTaskResumeAll+0x120>)
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4a27      	ldr	r2, [pc, #156]	; (800a450 <xTaskResumeAll+0x124>)
 800a3b4:	441a      	add	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4610      	mov	r0, r2
 800a3be:	f7ff f843 	bl	8009448 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c6:	4b23      	ldr	r3, [pc, #140]	; (800a454 <xTaskResumeAll+0x128>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d302      	bcc.n	800a3d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3d0:	4b21      	ldr	r3, [pc, #132]	; (800a458 <xTaskResumeAll+0x12c>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3d6:	4b1c      	ldr	r3, [pc, #112]	; (800a448 <xTaskResumeAll+0x11c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1cc      	bne.n	800a378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3e4:	f000 fb16 	bl	800aa14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3e8:	4b1c      	ldr	r3, [pc, #112]	; (800a45c <xTaskResumeAll+0x130>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d010      	beq.n	800a416 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3f4:	f000 f836 	bl	800a464 <xTaskIncrementTick>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3fe:	4b16      	ldr	r3, [pc, #88]	; (800a458 <xTaskResumeAll+0x12c>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3b01      	subs	r3, #1
 800a408:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1f1      	bne.n	800a3f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a410:	4b12      	ldr	r3, [pc, #72]	; (800a45c <xTaskResumeAll+0x130>)
 800a412:	2200      	movs	r2, #0
 800a414:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a416:	4b10      	ldr	r3, [pc, #64]	; (800a458 <xTaskResumeAll+0x12c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a41e:	2301      	movs	r3, #1
 800a420:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a422:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <xTaskResumeAll+0x134>)
 800a424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a432:	f000 fd3b 	bl	800aeac <vPortExitCritical>

	return xAlreadyYielded;
 800a436:	68bb      	ldr	r3, [r7, #8]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20001d98 	.word	0x20001d98
 800a444:	20001d70 	.word	0x20001d70
 800a448:	20001d30 	.word	0x20001d30
 800a44c:	20001d78 	.word	0x20001d78
 800a450:	20001c74 	.word	0x20001c74
 800a454:	20001c70 	.word	0x20001c70
 800a458:	20001d84 	.word	0x20001d84
 800a45c:	20001d80 	.word	0x20001d80
 800a460:	e000ed04 	.word	0xe000ed04

0800a464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a46e:	4b51      	ldr	r3, [pc, #324]	; (800a5b4 <xTaskIncrementTick+0x150>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f040 808d 	bne.w	800a592 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a478:	4b4f      	ldr	r3, [pc, #316]	; (800a5b8 <xTaskIncrementTick+0x154>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3301      	adds	r3, #1
 800a47e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a480:	4a4d      	ldr	r2, [pc, #308]	; (800a5b8 <xTaskIncrementTick+0x154>)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d120      	bne.n	800a4ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a48c:	4b4b      	ldr	r3, [pc, #300]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00a      	beq.n	800a4ac <xTaskIncrementTick+0x48>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	603b      	str	r3, [r7, #0]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <xTaskIncrementTick+0x46>
 800a4ac:	4b43      	ldr	r3, [pc, #268]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	4b43      	ldr	r3, [pc, #268]	; (800a5c0 <xTaskIncrementTick+0x15c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a41      	ldr	r2, [pc, #260]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	4a41      	ldr	r2, [pc, #260]	; (800a5c0 <xTaskIncrementTick+0x15c>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	4b40      	ldr	r3, [pc, #256]	; (800a5c4 <xTaskIncrementTick+0x160>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4a3f      	ldr	r2, [pc, #252]	; (800a5c4 <xTaskIncrementTick+0x160>)
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	f000 faa3 	bl	800aa14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4ce:	4b3e      	ldr	r3, [pc, #248]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d34d      	bcc.n	800a574 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d8:	4b38      	ldr	r3, [pc, #224]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <xTaskIncrementTick+0x82>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xTaskIncrementTick+0x84>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ec:	4b36      	ldr	r3, [pc, #216]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	601a      	str	r2, [r3, #0]
					break;
 800a4f4:	e03e      	b.n	800a574 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4f6:	4b31      	ldr	r3, [pc, #196]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d203      	bcs.n	800a516 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a50e:	4a2e      	ldr	r2, [pc, #184]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6013      	str	r3, [r2, #0]
						break;
 800a514:	e02e      	b.n	800a574 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3304      	adds	r3, #4
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe ffef 	bl	80094fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	3318      	adds	r3, #24
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe ffe6 	bl	80094fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	2201      	movs	r2, #1
 800a538:	409a      	lsls	r2, r3
 800a53a:	4b24      	ldr	r3, [pc, #144]	; (800a5cc <xTaskIncrementTick+0x168>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4313      	orrs	r3, r2
 800a540:	4a22      	ldr	r2, [pc, #136]	; (800a5cc <xTaskIncrementTick+0x168>)
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4a1f      	ldr	r2, [pc, #124]	; (800a5d0 <xTaskIncrementTick+0x16c>)
 800a552:	441a      	add	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f7fe ff74 	bl	8009448 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <xTaskIncrementTick+0x170>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d3b4      	bcc.n	800a4d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a56e:	2301      	movs	r3, #1
 800a570:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a572:	e7b1      	b.n	800a4d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a574:	4b17      	ldr	r3, [pc, #92]	; (800a5d4 <xTaskIncrementTick+0x170>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57a:	4915      	ldr	r1, [pc, #84]	; (800a5d0 <xTaskIncrementTick+0x16c>)
 800a57c:	4613      	mov	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d907      	bls.n	800a59c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e004      	b.n	800a59c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a592:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <xTaskIncrementTick+0x174>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3301      	adds	r3, #1
 800a598:	4a0f      	ldr	r2, [pc, #60]	; (800a5d8 <xTaskIncrementTick+0x174>)
 800a59a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <xTaskIncrementTick+0x178>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5a8:	697b      	ldr	r3, [r7, #20]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20001d98 	.word	0x20001d98
 800a5b8:	20001d74 	.word	0x20001d74
 800a5bc:	20001d28 	.word	0x20001d28
 800a5c0:	20001d2c 	.word	0x20001d2c
 800a5c4:	20001d88 	.word	0x20001d88
 800a5c8:	20001d90 	.word	0x20001d90
 800a5cc:	20001d78 	.word	0x20001d78
 800a5d0:	20001c74 	.word	0x20001c74
 800a5d4:	20001c70 	.word	0x20001c70
 800a5d8:	20001d80 	.word	0x20001d80
 800a5dc:	20001d84 	.word	0x20001d84

0800a5e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5e6:	4b26      	ldr	r3, [pc, #152]	; (800a680 <vTaskSwitchContext+0xa0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5ee:	4b25      	ldr	r3, [pc, #148]	; (800a684 <vTaskSwitchContext+0xa4>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5f4:	e03f      	b.n	800a676 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a5f6:	4b23      	ldr	r3, [pc, #140]	; (800a684 <vTaskSwitchContext+0xa4>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a5fc:	4b22      	ldr	r3, [pc, #136]	; (800a688 <vTaskSwitchContext+0xa8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	fab3 f383 	clz	r3, r3
 800a608:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	f1c3 031f 	rsb	r3, r3, #31
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	491e      	ldr	r1, [pc, #120]	; (800a68c <vTaskSwitchContext+0xac>)
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	440b      	add	r3, r1
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	607b      	str	r3, [r7, #4]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <vTaskSwitchContext+0x5a>
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a11      	ldr	r2, [pc, #68]	; (800a68c <vTaskSwitchContext+0xac>)
 800a648:	4413      	add	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	605a      	str	r2, [r3, #4]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	3308      	adds	r3, #8
 800a65e:	429a      	cmp	r2, r3
 800a660:	d104      	bne.n	800a66c <vTaskSwitchContext+0x8c>
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	605a      	str	r2, [r3, #4]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	4a07      	ldr	r2, [pc, #28]	; (800a690 <vTaskSwitchContext+0xb0>)
 800a674:	6013      	str	r3, [r2, #0]
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr
 800a680:	20001d98 	.word	0x20001d98
 800a684:	20001d84 	.word	0x20001d84
 800a688:	20001d78 	.word	0x20001d78
 800a68c:	20001c74 	.word	0x20001c74
 800a690:	20001c70 	.word	0x20001c70

0800a694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	60fb      	str	r3, [r7, #12]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ba:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <vTaskPlaceOnEventList+0x44>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3318      	adds	r3, #24
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7fe fee3 	bl	800948e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	6838      	ldr	r0, [r7, #0]
 800a6cc:	f000 fa6a 	bl	800aba4 <prvAddCurrentTaskToDelayedList>
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	20001c70 	.word	0x20001c70

0800a6dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	60fb      	str	r3, [r7, #12]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3318      	adds	r3, #24
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe fef6 	bl	80094fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a712:	4b1d      	ldr	r3, [pc, #116]	; (800a788 <xTaskRemoveFromEventList+0xac>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d11c      	bne.n	800a754 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	3304      	adds	r3, #4
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe feed 	bl	80094fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	2201      	movs	r2, #1
 800a72a:	409a      	lsls	r2, r3
 800a72c:	4b17      	ldr	r3, [pc, #92]	; (800a78c <xTaskRemoveFromEventList+0xb0>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4313      	orrs	r3, r2
 800a732:	4a16      	ldr	r2, [pc, #88]	; (800a78c <xTaskRemoveFromEventList+0xb0>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4a13      	ldr	r2, [pc, #76]	; (800a790 <xTaskRemoveFromEventList+0xb4>)
 800a744:	441a      	add	r2, r3
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fe fe7b 	bl	8009448 <vListInsertEnd>
 800a752:	e005      	b.n	800a760 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	3318      	adds	r3, #24
 800a758:	4619      	mov	r1, r3
 800a75a:	480e      	ldr	r0, [pc, #56]	; (800a794 <xTaskRemoveFromEventList+0xb8>)
 800a75c:	f7fe fe74 	bl	8009448 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <xTaskRemoveFromEventList+0xbc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d905      	bls.n	800a77a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a76e:	2301      	movs	r3, #1
 800a770:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a772:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <xTaskRemoveFromEventList+0xc0>)
 800a774:	2201      	movs	r2, #1
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e001      	b.n	800a77e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a77e:	697b      	ldr	r3, [r7, #20]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	20001d98 	.word	0x20001d98
 800a78c:	20001d78 	.word	0x20001d78
 800a790:	20001c74 	.word	0x20001c74
 800a794:	20001d30 	.word	0x20001d30
 800a798:	20001c70 	.word	0x20001c70
 800a79c:	20001d84 	.word	0x20001d84

0800a7a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7a8:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <vTaskInternalSetTimeOutState+0x24>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7b0:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <vTaskInternalSetTimeOutState+0x28>)
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	605a      	str	r2, [r3, #4]
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bc80      	pop	{r7}
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20001d88 	.word	0x20001d88
 800a7c8:	20001d74 	.word	0x20001d74

0800a7cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	613b      	str	r3, [r7, #16]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	60fb      	str	r3, [r7, #12]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a80e:	f000 fb1d 	bl	800ae4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a812:	4b1d      	ldr	r3, [pc, #116]	; (800a888 <xTaskCheckForTimeOut+0xbc>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82a:	d102      	bne.n	800a832 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a82c:	2300      	movs	r3, #0
 800a82e:	61fb      	str	r3, [r7, #28]
 800a830:	e023      	b.n	800a87a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	4b15      	ldr	r3, [pc, #84]	; (800a88c <xTaskCheckForTimeOut+0xc0>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d007      	beq.n	800a84e <xTaskCheckForTimeOut+0x82>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	69ba      	ldr	r2, [r7, #24]
 800a844:	429a      	cmp	r2, r3
 800a846:	d302      	bcc.n	800a84e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a848:	2301      	movs	r3, #1
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e015      	b.n	800a87a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	429a      	cmp	r2, r3
 800a856:	d20b      	bcs.n	800a870 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	1ad2      	subs	r2, r2, r3
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff ff9b 	bl	800a7a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	61fb      	str	r3, [r7, #28]
 800a86e:	e004      	b.n	800a87a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a876:	2301      	movs	r3, #1
 800a878:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a87a:	f000 fb17 	bl	800aeac <vPortExitCritical>

	return xReturn;
 800a87e:	69fb      	ldr	r3, [r7, #28]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3720      	adds	r7, #32
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20001d74 	.word	0x20001d74
 800a88c:	20001d88 	.word	0x20001d88

0800a890 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a894:	4b03      	ldr	r3, [pc, #12]	; (800a8a4 <vTaskMissedYield+0x14>)
 800a896:	2201      	movs	r2, #1
 800a898:	601a      	str	r2, [r3, #0]
}
 800a89a:	bf00      	nop
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bc80      	pop	{r7}
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	20001d84 	.word	0x20001d84

0800a8a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8b0:	f000 f852 	bl	800a958 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8b4:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <prvIdleTask+0x28>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d9f9      	bls.n	800a8b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8bc:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <prvIdleTask+0x2c>)
 800a8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8cc:	e7f0      	b.n	800a8b0 <prvIdleTask+0x8>
 800a8ce:	bf00      	nop
 800a8d0:	20001c74 	.word	0x20001c74
 800a8d4:	e000ed04 	.word	0xe000ed04

0800a8d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8de:	2300      	movs	r3, #0
 800a8e0:	607b      	str	r3, [r7, #4]
 800a8e2:	e00c      	b.n	800a8fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4a12      	ldr	r2, [pc, #72]	; (800a938 <prvInitialiseTaskLists+0x60>)
 800a8f0:	4413      	add	r3, r2
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fd7d 	bl	80093f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	607b      	str	r3, [r7, #4]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b06      	cmp	r3, #6
 800a902:	d9ef      	bls.n	800a8e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a904:	480d      	ldr	r0, [pc, #52]	; (800a93c <prvInitialiseTaskLists+0x64>)
 800a906:	f7fe fd74 	bl	80093f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a90a:	480d      	ldr	r0, [pc, #52]	; (800a940 <prvInitialiseTaskLists+0x68>)
 800a90c:	f7fe fd71 	bl	80093f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a910:	480c      	ldr	r0, [pc, #48]	; (800a944 <prvInitialiseTaskLists+0x6c>)
 800a912:	f7fe fd6e 	bl	80093f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a916:	480c      	ldr	r0, [pc, #48]	; (800a948 <prvInitialiseTaskLists+0x70>)
 800a918:	f7fe fd6b 	bl	80093f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a91c:	480b      	ldr	r0, [pc, #44]	; (800a94c <prvInitialiseTaskLists+0x74>)
 800a91e:	f7fe fd68 	bl	80093f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a922:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <prvInitialiseTaskLists+0x78>)
 800a924:	4a05      	ldr	r2, [pc, #20]	; (800a93c <prvInitialiseTaskLists+0x64>)
 800a926:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a928:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <prvInitialiseTaskLists+0x7c>)
 800a92a:	4a05      	ldr	r2, [pc, #20]	; (800a940 <prvInitialiseTaskLists+0x68>)
 800a92c:	601a      	str	r2, [r3, #0]
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20001c74 	.word	0x20001c74
 800a93c:	20001d00 	.word	0x20001d00
 800a940:	20001d14 	.word	0x20001d14
 800a944:	20001d30 	.word	0x20001d30
 800a948:	20001d44 	.word	0x20001d44
 800a94c:	20001d5c 	.word	0x20001d5c
 800a950:	20001d28 	.word	0x20001d28
 800a954:	20001d2c 	.word	0x20001d2c

0800a958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a95e:	e019      	b.n	800a994 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a960:	f000 fa74 	bl	800ae4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a964:	4b10      	ldr	r3, [pc, #64]	; (800a9a8 <prvCheckTasksWaitingTermination+0x50>)
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3304      	adds	r3, #4
 800a970:	4618      	mov	r0, r3
 800a972:	f7fe fdc4 	bl	80094fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a976:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <prvCheckTasksWaitingTermination+0x54>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	4a0b      	ldr	r2, [pc, #44]	; (800a9ac <prvCheckTasksWaitingTermination+0x54>)
 800a97e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a980:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <prvCheckTasksWaitingTermination+0x58>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3b01      	subs	r3, #1
 800a986:	4a0a      	ldr	r2, [pc, #40]	; (800a9b0 <prvCheckTasksWaitingTermination+0x58>)
 800a988:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a98a:	f000 fa8f 	bl	800aeac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f810 	bl	800a9b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a994:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <prvCheckTasksWaitingTermination+0x58>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e1      	bne.n	800a960 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a99c:	bf00      	nop
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20001d44 	.word	0x20001d44
 800a9ac:	20001d70 	.word	0x20001d70
 800a9b0:	20001d58 	.word	0x20001d58

0800a9b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d108      	bne.n	800a9d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fc02 	bl	800b1d4 <vPortFree>
				vPortFree( pxTCB );
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fbff 	bl	800b1d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9d6:	e018      	b.n	800aa0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d103      	bne.n	800a9ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fbf6 	bl	800b1d4 <vPortFree>
	}
 800a9e8:	e00f      	b.n	800aa0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d00a      	beq.n	800aa0a <prvDeleteTCB+0x56>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	60fb      	str	r3, [r7, #12]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <prvDeleteTCB+0x54>
	}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa1a:	4b0e      	ldr	r3, [pc, #56]	; (800aa54 <prvResetNextTaskUnblockTime+0x40>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <prvResetNextTaskUnblockTime+0x14>
 800aa24:	2301      	movs	r3, #1
 800aa26:	e000      	b.n	800aa2a <prvResetNextTaskUnblockTime+0x16>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d004      	beq.n	800aa38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <prvResetNextTaskUnblockTime+0x44>)
 800aa30:	f04f 32ff 	mov.w	r2, #4294967295
 800aa34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa36:	e008      	b.n	800aa4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa38:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <prvResetNextTaskUnblockTime+0x40>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	4a04      	ldr	r2, [pc, #16]	; (800aa58 <prvResetNextTaskUnblockTime+0x44>)
 800aa48:	6013      	str	r3, [r2, #0]
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bc80      	pop	{r7}
 800aa52:	4770      	bx	lr
 800aa54:	20001d28 	.word	0x20001d28
 800aa58:	20001d90 	.word	0x20001d90

0800aa5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa62:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <xTaskGetSchedulerState+0x34>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d102      	bne.n	800aa70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	607b      	str	r3, [r7, #4]
 800aa6e:	e008      	b.n	800aa82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa70:	4b08      	ldr	r3, [pc, #32]	; (800aa94 <xTaskGetSchedulerState+0x38>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa78:	2302      	movs	r3, #2
 800aa7a:	607b      	str	r3, [r7, #4]
 800aa7c:	e001      	b.n	800aa82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa82:	687b      	ldr	r3, [r7, #4]
	}
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bc80      	pop	{r7}
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	20001d7c 	.word	0x20001d7c
 800aa94:	20001d98 	.word	0x20001d98

0800aa98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d06e      	beq.n	800ab8c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aaae:	4b3a      	ldr	r3, [pc, #232]	; (800ab98 <xTaskPriorityDisinherit+0x100>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d00a      	beq.n	800aace <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10a      	bne.n	800aaec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	60bb      	str	r3, [r7, #8]
}
 800aae8:	bf00      	nop
 800aaea:	e7fe      	b.n	800aaea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf0:	1e5a      	subs	r2, r3, #1
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d044      	beq.n	800ab8c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d140      	bne.n	800ab8c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fe fcf5 	bl	80094fe <uxListRemove>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d115      	bne.n	800ab46 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1e:	491f      	ldr	r1, [pc, #124]	; (800ab9c <xTaskPriorityDisinherit+0x104>)
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	440b      	add	r3, r1
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <xTaskPriorityDisinherit+0xae>
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	2201      	movs	r2, #1
 800ab36:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3a:	43da      	mvns	r2, r3
 800ab3c:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <xTaskPriorityDisinherit+0x108>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4013      	ands	r3, r2
 800ab42:	4a17      	ldr	r2, [pc, #92]	; (800aba0 <xTaskPriorityDisinherit+0x108>)
 800ab44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab52:	f1c3 0207 	rsb	r2, r3, #7
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	2201      	movs	r2, #1
 800ab60:	409a      	lsls	r2, r3
 800ab62:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <xTaskPriorityDisinherit+0x108>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	4a0d      	ldr	r2, [pc, #52]	; (800aba0 <xTaskPriorityDisinherit+0x108>)
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <xTaskPriorityDisinherit+0x104>)
 800ab7a:	441a      	add	r2, r3
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	4619      	mov	r1, r3
 800ab82:	4610      	mov	r0, r2
 800ab84:	f7fe fc60 	bl	8009448 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab8c:	697b      	ldr	r3, [r7, #20]
	}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20001c70 	.word	0x20001c70
 800ab9c:	20001c74 	.word	0x20001c74
 800aba0:	20001d78 	.word	0x20001d78

0800aba4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abae:	4b29      	ldr	r3, [pc, #164]	; (800ac54 <prvAddCurrentTaskToDelayedList+0xb0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abb4:	4b28      	ldr	r3, [pc, #160]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3304      	adds	r3, #4
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fc9f 	bl	80094fe <uxListRemove>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10b      	bne.n	800abde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800abc6:	4b24      	ldr	r3, [pc, #144]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	2201      	movs	r2, #1
 800abce:	fa02 f303 	lsl.w	r3, r2, r3
 800abd2:	43da      	mvns	r2, r3
 800abd4:	4b21      	ldr	r3, [pc, #132]	; (800ac5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4013      	ands	r3, r2
 800abda:	4a20      	ldr	r2, [pc, #128]	; (800ac5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800abdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe4:	d10a      	bne.n	800abfc <prvAddCurrentTaskToDelayedList+0x58>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d007      	beq.n	800abfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abec:	4b1a      	ldr	r3, [pc, #104]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	481a      	ldr	r0, [pc, #104]	; (800ac60 <prvAddCurrentTaskToDelayedList+0xbc>)
 800abf6:	f7fe fc27 	bl	8009448 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abfa:	e026      	b.n	800ac4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4413      	add	r3, r2
 800ac02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac04:	4b14      	ldr	r3, [pc, #80]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d209      	bcs.n	800ac28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac14:	4b13      	ldr	r3, [pc, #76]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	4b0f      	ldr	r3, [pc, #60]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4610      	mov	r0, r2
 800ac22:	f7fe fc34 	bl	800948e <vListInsert>
}
 800ac26:	e010      	b.n	800ac4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac28:	4b0f      	ldr	r3, [pc, #60]	; (800ac68 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4619      	mov	r1, r3
 800ac34:	4610      	mov	r0, r2
 800ac36:	f7fe fc2a 	bl	800948e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac3a:	4b0c      	ldr	r3, [pc, #48]	; (800ac6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d202      	bcs.n	800ac4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac44:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	6013      	str	r3, [r2, #0]
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20001d74 	.word	0x20001d74
 800ac58:	20001c70 	.word	0x20001c70
 800ac5c:	20001d78 	.word	0x20001d78
 800ac60:	20001d5c 	.word	0x20001d5c
 800ac64:	20001d2c 	.word	0x20001d2c
 800ac68:	20001d28 	.word	0x20001d28
 800ac6c:	20001d90 	.word	0x20001d90

0800ac70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3b04      	subs	r3, #4
 800ac80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3b04      	subs	r3, #4
 800ac8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	f023 0201 	bic.w	r2, r3, #1
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3b04      	subs	r3, #4
 800ac9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aca0:	4a08      	ldr	r2, [pc, #32]	; (800acc4 <pxPortInitialiseStack+0x54>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3b14      	subs	r3, #20
 800acaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3b20      	subs	r3, #32
 800acb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acb8:	68fb      	ldr	r3, [r7, #12]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bc80      	pop	{r7}
 800acc2:	4770      	bx	lr
 800acc4:	0800acc9 	.word	0x0800acc9

0800acc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800acce:	2300      	movs	r3, #0
 800acd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acd2:	4b12      	ldr	r3, [pc, #72]	; (800ad1c <prvTaskExitError+0x54>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acda:	d00a      	beq.n	800acf2 <prvTaskExitError+0x2a>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	60fb      	str	r3, [r7, #12]
}
 800acee:	bf00      	nop
 800acf0:	e7fe      	b.n	800acf0 <prvTaskExitError+0x28>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	60bb      	str	r3, [r7, #8]
}
 800ad04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad06:	bf00      	nop
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0fc      	beq.n	800ad08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bc80      	pop	{r7}
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	2000011c 	.word	0x2000011c

0800ad20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad20:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <pxCurrentTCBConst2>)
 800ad22:	6819      	ldr	r1, [r3, #0]
 800ad24:	6808      	ldr	r0, [r1, #0]
 800ad26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ad2a:	f380 8809 	msr	PSP, r0
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8811 	msr	BASEPRI, r0
 800ad3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ad3e:	4770      	bx	lr

0800ad40 <pxCurrentTCBConst2>:
 800ad40:	20001c70 	.word	0x20001c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ad48:	4806      	ldr	r0, [pc, #24]	; (800ad64 <prvPortStartFirstTask+0x1c>)
 800ad4a:	6800      	ldr	r0, [r0, #0]
 800ad4c:	6800      	ldr	r0, [r0, #0]
 800ad4e:	f380 8808 	msr	MSP, r0
 800ad52:	b662      	cpsie	i
 800ad54:	b661      	cpsie	f
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	df00      	svc	0
 800ad60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad62:	bf00      	nop
 800ad64:	e000ed08 	.word	0xe000ed08

0800ad68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad6e:	4b32      	ldr	r3, [pc, #200]	; (800ae38 <xPortStartScheduler+0xd0>)
 800ad70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	22ff      	movs	r2, #255	; 0xff
 800ad7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	4b2a      	ldr	r3, [pc, #168]	; (800ae3c <xPortStartScheduler+0xd4>)
 800ad94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad96:	4b2a      	ldr	r3, [pc, #168]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ad98:	2207      	movs	r2, #7
 800ad9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad9c:	e009      	b.n	800adb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ad9e:	4b28      	ldr	r3, [pc, #160]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	4a26      	ldr	r2, [pc, #152]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ada6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adba:	2b80      	cmp	r3, #128	; 0x80
 800adbc:	d0ef      	beq.n	800ad9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adbe:	4b20      	ldr	r3, [pc, #128]	; (800ae40 <xPortStartScheduler+0xd8>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1c3 0307 	rsb	r3, r3, #7
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d00a      	beq.n	800ade0 <xPortStartScheduler+0x78>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	60bb      	str	r3, [r7, #8]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ade0:	4b17      	ldr	r3, [pc, #92]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	021b      	lsls	r3, r3, #8
 800ade6:	4a16      	ldr	r2, [pc, #88]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ade8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800adea:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <xPortStartScheduler+0xd8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adf2:	4a13      	ldr	r2, [pc, #76]	; (800ae40 <xPortStartScheduler+0xd8>)
 800adf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adfe:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <xPortStartScheduler+0xdc>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a10      	ldr	r2, [pc, #64]	; (800ae44 <xPortStartScheduler+0xdc>)
 800ae04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae0a:	4b0e      	ldr	r3, [pc, #56]	; (800ae44 <xPortStartScheduler+0xdc>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a0d      	ldr	r2, [pc, #52]	; (800ae44 <xPortStartScheduler+0xdc>)
 800ae10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae16:	f000 f8b9 	bl	800af8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae1a:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <xPortStartScheduler+0xe0>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae20:	f7ff ff92 	bl	800ad48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae24:	f7ff fbdc 	bl	800a5e0 <vTaskSwitchContext>
	prvTaskExitError();
 800ae28:	f7ff ff4e 	bl	800acc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	e000e400 	.word	0xe000e400
 800ae3c:	20001d9c 	.word	0x20001d9c
 800ae40:	20001da0 	.word	0x20001da0
 800ae44:	e000ed20 	.word	0xe000ed20
 800ae48:	2000011c 	.word	0x2000011c

0800ae4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	607b      	str	r3, [r7, #4]
}
 800ae64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae66:	4b0f      	ldr	r3, [pc, #60]	; (800aea4 <vPortEnterCritical+0x58>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	4a0d      	ldr	r2, [pc, #52]	; (800aea4 <vPortEnterCritical+0x58>)
 800ae6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae70:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <vPortEnterCritical+0x58>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d10f      	bne.n	800ae98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <vPortEnterCritical+0x5c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	603b      	str	r3, [r7, #0]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <vPortEnterCritical+0x4a>
	}
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bc80      	pop	{r7}
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	2000011c 	.word	0x2000011c
 800aea8:	e000ed04 	.word	0xe000ed04

0800aeac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aeb2:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <vPortExitCritical+0x4c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10a      	bne.n	800aed0 <vPortExitCritical+0x24>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	607b      	str	r3, [r7, #4]
}
 800aecc:	bf00      	nop
 800aece:	e7fe      	b.n	800aece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aed0:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <vPortExitCritical+0x4c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	4a08      	ldr	r2, [pc, #32]	; (800aef8 <vPortExitCritical+0x4c>)
 800aed8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aeda:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <vPortExitCritical+0x4c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <vPortExitCritical+0x42>
 800aee2:	2300      	movs	r3, #0
 800aee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	f383 8811 	msr	BASEPRI, r3
}
 800aeec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bc80      	pop	{r7}
 800aef6:	4770      	bx	lr
 800aef8:	2000011c 	.word	0x2000011c
 800aefc:	00000000 	.word	0x00000000

0800af00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af00:	f3ef 8009 	mrs	r0, PSP
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	4b0d      	ldr	r3, [pc, #52]	; (800af40 <pxCurrentTCBConst>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800af10:	6010      	str	r0, [r2, #0]
 800af12:	e92d 4008 	stmdb	sp!, {r3, lr}
 800af16:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af1a:	f380 8811 	msr	BASEPRI, r0
 800af1e:	f7ff fb5f 	bl	800a5e0 <vTaskSwitchContext>
 800af22:	f04f 0000 	mov.w	r0, #0
 800af26:	f380 8811 	msr	BASEPRI, r0
 800af2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af2e:	6819      	ldr	r1, [r3, #0]
 800af30:	6808      	ldr	r0, [r1, #0]
 800af32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800af36:	f380 8809 	msr	PSP, r0
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	4770      	bx	lr

0800af40 <pxCurrentTCBConst>:
 800af40:	20001c70 	.word	0x20001c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop

0800af48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	607b      	str	r3, [r7, #4]
}
 800af60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af62:	f7ff fa7f 	bl	800a464 <xTaskIncrementTick>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <SysTick_Handler+0x40>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	f383 8811 	msr	BASEPRI, r3
}
 800af7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af90:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <vPortSetupTimerInterrupt+0x30>)
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af96:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <vPortSetupTimerInterrupt+0x34>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af9c:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <vPortSetupTimerInterrupt+0x38>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a09      	ldr	r2, [pc, #36]	; (800afc8 <vPortSetupTimerInterrupt+0x3c>)
 800afa2:	fba2 2303 	umull	r2, r3, r2, r3
 800afa6:	099b      	lsrs	r3, r3, #6
 800afa8:	4a08      	ldr	r2, [pc, #32]	; (800afcc <vPortSetupTimerInterrupt+0x40>)
 800afaa:	3b01      	subs	r3, #1
 800afac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afae:	4b03      	ldr	r3, [pc, #12]	; (800afbc <vPortSetupTimerInterrupt+0x30>)
 800afb0:	2207      	movs	r2, #7
 800afb2:	601a      	str	r2, [r3, #0]
}
 800afb4:	bf00      	nop
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr
 800afbc:	e000e010 	.word	0xe000e010
 800afc0:	e000e018 	.word	0xe000e018
 800afc4:	20000000 	.word	0x20000000
 800afc8:	10624dd3 	.word	0x10624dd3
 800afcc:	e000e014 	.word	0xe000e014

0800afd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afd6:	f3ef 8305 	mrs	r3, IPSR
 800afda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b0f      	cmp	r3, #15
 800afe0:	d914      	bls.n	800b00c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afe2:	4a16      	ldr	r2, [pc, #88]	; (800b03c <vPortValidateInterruptPriority+0x6c>)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4413      	add	r3, r2
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afec:	4b14      	ldr	r3, [pc, #80]	; (800b040 <vPortValidateInterruptPriority+0x70>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	7afa      	ldrb	r2, [r7, #11]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d20a      	bcs.n	800b00c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	607b      	str	r3, [r7, #4]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <vPortValidateInterruptPriority+0x74>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b014:	4b0c      	ldr	r3, [pc, #48]	; (800b048 <vPortValidateInterruptPriority+0x78>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d90a      	bls.n	800b032 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	603b      	str	r3, [r7, #0]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <vPortValidateInterruptPriority+0x60>
	}
 800b032:	bf00      	nop
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr
 800b03c:	e000e3f0 	.word	0xe000e3f0
 800b040:	20001d9c 	.word	0x20001d9c
 800b044:	e000ed0c 	.word	0xe000ed0c
 800b048:	20001da0 	.word	0x20001da0

0800b04c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08a      	sub	sp, #40	; 0x28
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b054:	2300      	movs	r3, #0
 800b056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b058:	f7ff f95a 	bl	800a310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b05c:	4b58      	ldr	r3, [pc, #352]	; (800b1c0 <pvPortMalloc+0x174>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b064:	f000 f910 	bl	800b288 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b068:	4b56      	ldr	r3, [pc, #344]	; (800b1c4 <pvPortMalloc+0x178>)
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4013      	ands	r3, r2
 800b070:	2b00      	cmp	r3, #0
 800b072:	f040 808e 	bne.w	800b192 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d01d      	beq.n	800b0b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b07c:	2208      	movs	r2, #8
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4413      	add	r3, r2
 800b082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d014      	beq.n	800b0b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f023 0307 	bic.w	r3, r3, #7
 800b094:	3308      	adds	r3, #8
 800b096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f003 0307 	and.w	r3, r3, #7
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <pvPortMalloc+0x6c>
	__asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	617b      	str	r3, [r7, #20]
}
 800b0b4:	bf00      	nop
 800b0b6:	e7fe      	b.n	800b0b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d069      	beq.n	800b192 <pvPortMalloc+0x146>
 800b0be:	4b42      	ldr	r3, [pc, #264]	; (800b1c8 <pvPortMalloc+0x17c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d864      	bhi.n	800b192 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0c8:	4b40      	ldr	r3, [pc, #256]	; (800b1cc <pvPortMalloc+0x180>)
 800b0ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0cc:	4b3f      	ldr	r3, [pc, #252]	; (800b1cc <pvPortMalloc+0x180>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0d2:	e004      	b.n	800b0de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d903      	bls.n	800b0f0 <pvPortMalloc+0xa4>
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1f1      	bne.n	800b0d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0f0:	4b33      	ldr	r3, [pc, #204]	; (800b1c0 <pvPortMalloc+0x174>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d04b      	beq.n	800b192 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2208      	movs	r2, #8
 800b100:	4413      	add	r3, r2
 800b102:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	1ad2      	subs	r2, r2, r3
 800b114:	2308      	movs	r3, #8
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	429a      	cmp	r2, r3
 800b11a:	d91f      	bls.n	800b15c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4413      	add	r3, r2
 800b122:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <pvPortMalloc+0xf8>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	613b      	str	r3, [r7, #16]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	1ad2      	subs	r2, r2, r3
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b156:	69b8      	ldr	r0, [r7, #24]
 800b158:	f000 f8f8 	bl	800b34c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b15c:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <pvPortMalloc+0x17c>)
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	4a18      	ldr	r2, [pc, #96]	; (800b1c8 <pvPortMalloc+0x17c>)
 800b168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b16a:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <pvPortMalloc+0x17c>)
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	4b18      	ldr	r3, [pc, #96]	; (800b1d0 <pvPortMalloc+0x184>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d203      	bcs.n	800b17e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <pvPortMalloc+0x17c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a15      	ldr	r2, [pc, #84]	; (800b1d0 <pvPortMalloc+0x184>)
 800b17c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <pvPortMalloc+0x178>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	431a      	orrs	r2, r3
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b192:	f7ff f8cb 	bl	800a32c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <pvPortMalloc+0x16a>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60fb      	str	r3, [r7, #12]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <pvPortMalloc+0x168>
	return pvReturn;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3728      	adds	r7, #40	; 0x28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	20002dac 	.word	0x20002dac
 800b1c4:	20002db8 	.word	0x20002db8
 800b1c8:	20002db0 	.word	0x20002db0
 800b1cc:	20002da4 	.word	0x20002da4
 800b1d0:	20002db4 	.word	0x20002db4

0800b1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d048      	beq.n	800b278 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1e6:	2308      	movs	r3, #8
 800b1e8:	425b      	negs	r3, r3
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	4b21      	ldr	r3, [pc, #132]	; (800b280 <vPortFree+0xac>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <vPortFree+0x44>
	__asm volatile
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	60fb      	str	r3, [r7, #12]
}
 800b214:	bf00      	nop
 800b216:	e7fe      	b.n	800b216 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00a      	beq.n	800b236 <vPortFree+0x62>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	60bb      	str	r3, [r7, #8]
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	4b11      	ldr	r3, [pc, #68]	; (800b280 <vPortFree+0xac>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4013      	ands	r3, r2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d019      	beq.n	800b278 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d115      	bne.n	800b278 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <vPortFree+0xac>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	43db      	mvns	r3, r3
 800b256:	401a      	ands	r2, r3
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b25c:	f7ff f858 	bl	800a310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	4b07      	ldr	r3, [pc, #28]	; (800b284 <vPortFree+0xb0>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4413      	add	r3, r2
 800b26a:	4a06      	ldr	r2, [pc, #24]	; (800b284 <vPortFree+0xb0>)
 800b26c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b26e:	6938      	ldr	r0, [r7, #16]
 800b270:	f000 f86c 	bl	800b34c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b274:	f7ff f85a 	bl	800a32c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b278:	bf00      	nop
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20002db8 	.word	0x20002db8
 800b284:	20002db0 	.word	0x20002db0

0800b288 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b28e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b292:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b294:	4b27      	ldr	r3, [pc, #156]	; (800b334 <prvHeapInit+0xac>)
 800b296:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f003 0307 	and.w	r3, r3, #7
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00c      	beq.n	800b2bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3307      	adds	r3, #7
 800b2a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0307 	bic.w	r3, r3, #7
 800b2ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	4a1f      	ldr	r2, [pc, #124]	; (800b334 <prvHeapInit+0xac>)
 800b2b8:	4413      	add	r3, r2
 800b2ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2c0:	4a1d      	ldr	r2, [pc, #116]	; (800b338 <prvHeapInit+0xb0>)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2c6:	4b1c      	ldr	r3, [pc, #112]	; (800b338 <prvHeapInit+0xb0>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2d4:	2208      	movs	r2, #8
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	1a9b      	subs	r3, r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f023 0307 	bic.w	r3, r3, #7
 800b2e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4a15      	ldr	r2, [pc, #84]	; (800b33c <prvHeapInit+0xb4>)
 800b2e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2ea:	4b14      	ldr	r3, [pc, #80]	; (800b33c <prvHeapInit+0xb4>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2f2:	4b12      	ldr	r3, [pc, #72]	; (800b33c <prvHeapInit+0xb4>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	1ad2      	subs	r2, r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b308:	4b0c      	ldr	r3, [pc, #48]	; (800b33c <prvHeapInit+0xb4>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	4a0a      	ldr	r2, [pc, #40]	; (800b340 <prvHeapInit+0xb8>)
 800b316:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	4a09      	ldr	r2, [pc, #36]	; (800b344 <prvHeapInit+0xbc>)
 800b31e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b320:	4b09      	ldr	r3, [pc, #36]	; (800b348 <prvHeapInit+0xc0>)
 800b322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b326:	601a      	str	r2, [r3, #0]
}
 800b328:	bf00      	nop
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bc80      	pop	{r7}
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	20001da4 	.word	0x20001da4
 800b338:	20002da4 	.word	0x20002da4
 800b33c:	20002dac 	.word	0x20002dac
 800b340:	20002db4 	.word	0x20002db4
 800b344:	20002db0 	.word	0x20002db0
 800b348:	20002db8 	.word	0x20002db8

0800b34c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b354:	4b27      	ldr	r3, [pc, #156]	; (800b3f4 <prvInsertBlockIntoFreeList+0xa8>)
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	e002      	b.n	800b360 <prvInsertBlockIntoFreeList+0x14>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	60fb      	str	r3, [r7, #12]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	429a      	cmp	r2, r3
 800b368:	d8f7      	bhi.n	800b35a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	4413      	add	r3, r2
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d108      	bne.n	800b38e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	441a      	add	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	441a      	add	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d118      	bne.n	800b3d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	4b14      	ldr	r3, [pc, #80]	; (800b3f8 <prvInsertBlockIntoFreeList+0xac>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d00d      	beq.n	800b3ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	441a      	add	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	e008      	b.n	800b3dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3ca:	4b0b      	ldr	r3, [pc, #44]	; (800b3f8 <prvInsertBlockIntoFreeList+0xac>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e003      	b.n	800b3dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d002      	beq.n	800b3ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3ea:	bf00      	nop
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bc80      	pop	{r7}
 800b3f2:	4770      	bx	lr
 800b3f4:	20002da4 	.word	0x20002da4
 800b3f8:	20002dac 	.word	0x20002dac

0800b3fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b400:	2200      	movs	r2, #0
 800b402:	4912      	ldr	r1, [pc, #72]	; (800b44c <MX_USB_DEVICE_Init+0x50>)
 800b404:	4812      	ldr	r0, [pc, #72]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b406:	f7fc fe49 	bl	800809c <USBD_Init>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b410:	f7f7 f87a 	bl	8002508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b414:	490f      	ldr	r1, [pc, #60]	; (800b454 <MX_USB_DEVICE_Init+0x58>)
 800b416:	480e      	ldr	r0, [pc, #56]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b418:	f7fc fe6b 	bl	80080f2 <USBD_RegisterClass>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b422:	f7f7 f871 	bl	8002508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b426:	490c      	ldr	r1, [pc, #48]	; (800b458 <MX_USB_DEVICE_Init+0x5c>)
 800b428:	4809      	ldr	r0, [pc, #36]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b42a:	f7fc fdcb 	bl	8007fc4 <USBD_CDC_RegisterInterface>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b434:	f7f7 f868 	bl	8002508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b438:	4805      	ldr	r0, [pc, #20]	; (800b450 <MX_USB_DEVICE_Init+0x54>)
 800b43a:	f7fc fe73 	bl	8008124 <USBD_Start>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b444:	f7f7 f860 	bl	8002508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b448:	bf00      	nop
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20000130 	.word	0x20000130
 800b450:	20002dbc 	.word	0x20002dbc
 800b454:	20000018 	.word	0x20000018
 800b458:	20000120 	.word	0x20000120

0800b45c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b460:	2200      	movs	r2, #0
 800b462:	4905      	ldr	r1, [pc, #20]	; (800b478 <CDC_Init_FS+0x1c>)
 800b464:	4805      	ldr	r0, [pc, #20]	; (800b47c <CDC_Init_FS+0x20>)
 800b466:	f7fc fdc3 	bl	8007ff0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b46a:	4905      	ldr	r1, [pc, #20]	; (800b480 <CDC_Init_FS+0x24>)
 800b46c:	4803      	ldr	r0, [pc, #12]	; (800b47c <CDC_Init_FS+0x20>)
 800b46e:	f7fc fdd8 	bl	8008022 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b474:	4618      	mov	r0, r3
 800b476:	bd80      	pop	{r7, pc}
 800b478:	20003468 	.word	0x20003468
 800b47c:	20002dbc 	.word	0x20002dbc
 800b480:	20003080 	.word	0x20003080

0800b484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bc80      	pop	{r7}
 800b490:	4770      	bx	lr
	...

0800b494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	6039      	str	r1, [r7, #0]
 800b49e:	71fb      	strb	r3, [r7, #7]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	2b23      	cmp	r3, #35	; 0x23
 800b4a8:	d84a      	bhi.n	800b540 <CDC_Control_FS+0xac>
 800b4aa:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <CDC_Control_FS+0x1c>)
 800b4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b0:	0800b541 	.word	0x0800b541
 800b4b4:	0800b541 	.word	0x0800b541
 800b4b8:	0800b541 	.word	0x0800b541
 800b4bc:	0800b541 	.word	0x0800b541
 800b4c0:	0800b541 	.word	0x0800b541
 800b4c4:	0800b541 	.word	0x0800b541
 800b4c8:	0800b541 	.word	0x0800b541
 800b4cc:	0800b541 	.word	0x0800b541
 800b4d0:	0800b541 	.word	0x0800b541
 800b4d4:	0800b541 	.word	0x0800b541
 800b4d8:	0800b541 	.word	0x0800b541
 800b4dc:	0800b541 	.word	0x0800b541
 800b4e0:	0800b541 	.word	0x0800b541
 800b4e4:	0800b541 	.word	0x0800b541
 800b4e8:	0800b541 	.word	0x0800b541
 800b4ec:	0800b541 	.word	0x0800b541
 800b4f0:	0800b541 	.word	0x0800b541
 800b4f4:	0800b541 	.word	0x0800b541
 800b4f8:	0800b541 	.word	0x0800b541
 800b4fc:	0800b541 	.word	0x0800b541
 800b500:	0800b541 	.word	0x0800b541
 800b504:	0800b541 	.word	0x0800b541
 800b508:	0800b541 	.word	0x0800b541
 800b50c:	0800b541 	.word	0x0800b541
 800b510:	0800b541 	.word	0x0800b541
 800b514:	0800b541 	.word	0x0800b541
 800b518:	0800b541 	.word	0x0800b541
 800b51c:	0800b541 	.word	0x0800b541
 800b520:	0800b541 	.word	0x0800b541
 800b524:	0800b541 	.word	0x0800b541
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b541 	.word	0x0800b541
 800b530:	0800b541 	.word	0x0800b541
 800b534:	0800b541 	.word	0x0800b541
 800b538:	0800b541 	.word	0x0800b541
 800b53c:	0800b541 	.word	0x0800b541
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b540:	bf00      	nop
  }

  return (USBD_OK);
 800b542:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	bc80      	pop	{r7}
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop

0800b550 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b55a:	6879      	ldr	r1, [r7, #4]
 800b55c:	4808      	ldr	r0, [pc, #32]	; (800b580 <CDC_Receive_FS+0x30>)
 800b55e:	f7fc fd60 	bl	8008022 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b562:	4807      	ldr	r0, [pc, #28]	; (800b580 <CDC_Receive_FS+0x30>)
 800b564:	f7fc fd70 	bl	8008048 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, *Len);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7f6 fd5a 	bl	8002028 <CDC_ReceiveCallback>
  return (USBD_OK);
 800b574:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20002dbc 	.word	0x20002dbc

0800b584 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	6039      	str	r1, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2212      	movs	r2, #18
 800b594:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b596:	4b03      	ldr	r3, [pc, #12]	; (800b5a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	2000014c 	.word	0x2000014c

0800b5a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	6039      	str	r1, [r7, #0]
 800b5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2204      	movs	r2, #4
 800b5b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ba:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bc80      	pop	{r7}
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	20000160 	.word	0x20000160

0800b5cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5d8:	79fb      	ldrb	r3, [r7, #7]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d105      	bne.n	800b5ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	4907      	ldr	r1, [pc, #28]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5e2:	4808      	ldr	r0, [pc, #32]	; (800b604 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5e4:	f7fd fd50 	bl	8009088 <USBD_GetString>
 800b5e8:	e004      	b.n	800b5f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	4904      	ldr	r1, [pc, #16]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5ee:	4805      	ldr	r0, [pc, #20]	; (800b604 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5f0:	f7fd fd4a 	bl	8009088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20003850 	.word	0x20003850
 800b604:	0800bf14 	.word	0x0800bf14

0800b608 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	6039      	str	r1, [r7, #0]
 800b612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	4904      	ldr	r1, [pc, #16]	; (800b628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b618:	4804      	ldr	r0, [pc, #16]	; (800b62c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b61a:	f7fd fd35 	bl	8009088 <USBD_GetString>
  return USBD_StrDesc;
 800b61e:	4b02      	ldr	r3, [pc, #8]	; (800b628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	20003850 	.word	0x20003850
 800b62c:	0800bf2c 	.word	0x0800bf2c

0800b630 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	221a      	movs	r2, #26
 800b640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b642:	f000 f843 	bl	800b6cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b646:	4b02      	ldr	r3, [pc, #8]	; (800b650 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20000164 	.word	0x20000164

0800b654 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d105      	bne.n	800b672 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4907      	ldr	r1, [pc, #28]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b66a:	4808      	ldr	r0, [pc, #32]	; (800b68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b66c:	f7fd fd0c 	bl	8009088 <USBD_GetString>
 800b670:	e004      	b.n	800b67c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	4904      	ldr	r1, [pc, #16]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b676:	4805      	ldr	r0, [pc, #20]	; (800b68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b678:	f7fd fd06 	bl	8009088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20003850 	.word	0x20003850
 800b68c:	0800bf40 	.word	0x0800bf40

0800b690 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4907      	ldr	r1, [pc, #28]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6a6:	4808      	ldr	r0, [pc, #32]	; (800b6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6a8:	f7fd fcee 	bl	8009088 <USBD_GetString>
 800b6ac:	e004      	b.n	800b6b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4904      	ldr	r1, [pc, #16]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6b2:	4805      	ldr	r0, [pc, #20]	; (800b6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b4:	f7fd fce8 	bl	8009088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20003850 	.word	0x20003850
 800b6c8:	0800bf4c 	.word	0x0800bf4c

0800b6cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6d2:	4b0f      	ldr	r3, [pc, #60]	; (800b710 <Get_SerialNum+0x44>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <Get_SerialNum+0x48>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6de:	4b0e      	ldr	r3, [pc, #56]	; (800b718 <Get_SerialNum+0x4c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d009      	beq.n	800b706 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	4909      	ldr	r1, [pc, #36]	; (800b71c <Get_SerialNum+0x50>)
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f000 f814 	bl	800b724 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	4908      	ldr	r1, [pc, #32]	; (800b720 <Get_SerialNum+0x54>)
 800b700:	68b8      	ldr	r0, [r7, #8]
 800b702:	f000 f80f 	bl	800b724 <IntToUnicode>
  }
}
 800b706:	bf00      	nop
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	1ffff7e8 	.word	0x1ffff7e8
 800b714:	1ffff7ec 	.word	0x1ffff7ec
 800b718:	1ffff7f0 	.word	0x1ffff7f0
 800b71c:	20000166 	.word	0x20000166
 800b720:	20000176 	.word	0x20000176

0800b724 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]
 800b73a:	e027      	b.n	800b78c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	0f1b      	lsrs	r3, r3, #28
 800b740:	2b09      	cmp	r3, #9
 800b742:	d80b      	bhi.n	800b75c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	0f1b      	lsrs	r3, r3, #28
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	4619      	mov	r1, r3
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	440b      	add	r3, r1
 800b754:	3230      	adds	r2, #48	; 0x30
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	e00a      	b.n	800b772 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	0f1b      	lsrs	r3, r3, #28
 800b760:	b2da      	uxtb	r2, r3
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4619      	mov	r1, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	440b      	add	r3, r1
 800b76c:	3237      	adds	r2, #55	; 0x37
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	3301      	adds	r3, #1
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	4413      	add	r3, r2
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	3301      	adds	r3, #1
 800b78a:	75fb      	strb	r3, [r7, #23]
 800b78c:	7dfa      	ldrb	r2, [r7, #23]
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	429a      	cmp	r2, r3
 800b792:	d3d3      	bcc.n	800b73c <IntToUnicode+0x18>
  }
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bc80      	pop	{r7}
 800b79e:	4770      	bx	lr

0800b7a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7a8:	f107 0310 	add.w	r3, r7, #16
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	605a      	str	r2, [r3, #4]
 800b7b2:	609a      	str	r2, [r3, #8]
 800b7b4:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7be:	d12c      	bne.n	800b81a <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7c0:	4b18      	ldr	r3, [pc, #96]	; (800b824 <HAL_PCD_MspInit+0x84>)
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	4a17      	ldr	r2, [pc, #92]	; (800b824 <HAL_PCD_MspInit+0x84>)
 800b7c6:	f043 0304 	orr.w	r3, r3, #4
 800b7ca:	6193      	str	r3, [r2, #24]
 800b7cc:	4b15      	ldr	r3, [pc, #84]	; (800b824 <HAL_PCD_MspInit+0x84>)
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	f003 0304 	and.w	r3, r3, #4
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7e6:	f107 0310 	add.w	r3, r7, #16
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	480e      	ldr	r0, [pc, #56]	; (800b828 <HAL_PCD_MspInit+0x88>)
 800b7ee:	f7f8 fbd1 	bl	8003f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7f2:	4b0c      	ldr	r3, [pc, #48]	; (800b824 <HAL_PCD_MspInit+0x84>)
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	4a0b      	ldr	r2, [pc, #44]	; (800b824 <HAL_PCD_MspInit+0x84>)
 800b7f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7fc:	6153      	str	r3, [r2, #20]
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <HAL_PCD_MspInit+0x84>)
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b806:	60bb      	str	r3, [r7, #8]
 800b808:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b80a:	2200      	movs	r2, #0
 800b80c:	2105      	movs	r1, #5
 800b80e:	2043      	movs	r0, #67	; 0x43
 800b810:	f7f8 fb95 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b814:	2043      	movs	r0, #67	; 0x43
 800b816:	f7f8 fbae 	bl	8003f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b81a:	bf00      	nop
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	40021000 	.word	0x40021000
 800b828:	40010800 	.word	0x40010800

0800b82c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b840:	4619      	mov	r1, r3
 800b842:	4610      	mov	r0, r2
 800b844:	f7fc fcb6 	bl	80081b4 <USBD_LL_SetupStage>
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800b862:	78fa      	ldrb	r2, [r7, #3]
 800b864:	6879      	ldr	r1, [r7, #4]
 800b866:	4613      	mov	r3, r2
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	4413      	add	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	440b      	add	r3, r1
 800b870:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	4619      	mov	r1, r3
 800b87a:	f7fc fce8 	bl	800824e <USBD_LL_DataOutStage>
}
 800b87e:	bf00      	nop
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	460b      	mov	r3, r1
 800b890:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800b898:	78fa      	ldrb	r2, [r7, #3]
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4613      	mov	r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	440b      	add	r3, r1
 800b8a6:	3348      	adds	r3, #72	; 0x48
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	78fb      	ldrb	r3, [r7, #3]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	f7fc fd3f 	bl	8008330 <USBD_LL_DataInStage>
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fc fe4f 	bl	800856c <USBD_LL_SOF>
}
 800b8ce:	bf00      	nop
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b084      	sub	sp, #16
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d001      	beq.n	800b8ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8ea:	f7f6 fe0d 	bl	8002508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b8f4:	7bfa      	ldrb	r2, [r7, #15]
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fc fdff 	bl	80084fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b904:	4618      	mov	r0, r3
 800b906:	f7fc fdb8 	bl	800847a <USBD_LL_Reset>
}
 800b90a:	bf00      	nop
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b922:	4618      	mov	r0, r3
 800b924:	f7fc fdf9 	bl	800851a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	6812      	ldr	r2, [r2, #0]
 800b936:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b93a:	f043 0301 	orr.w	r3, r3, #1
 800b93e:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a1b      	ldr	r3, [r3, #32]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b948:	4b04      	ldr	r3, [pc, #16]	; (800b95c <HAL_PCD_SuspendCallback+0x48>)
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	4a03      	ldr	r2, [pc, #12]	; (800b95c <HAL_PCD_SuspendCallback+0x48>)
 800b94e:	f043 0306 	orr.w	r3, r3, #6
 800b952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	e000ed00 	.word	0xe000ed00

0800b960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fc fde7 	bl	8008542 <USBD_LL_Resume>
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b98e:	78fa      	ldrb	r2, [r7, #3]
 800b990:	4611      	mov	r1, r2
 800b992:	4618      	mov	r0, r3
 800b994:	f7fc fe10 	bl	80085b8 <USBD_LL_IsoOUTIncomplete>
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b9b2:	78fa      	ldrb	r2, [r7, #3]
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fc fdf2 	bl	80085a0 <USBD_LL_IsoINIncomplete>
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fc fdfc 	bl	80085d0 <USBD_LL_DevConnected>
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fc fdf8 	bl	80085e4 <USBD_LL_DevDisconnected>
}
 800b9f4:	bf00      	nop
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d133      	bne.n	800ba74 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba0c:	4a1c      	ldr	r2, [pc, #112]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a1a      	ldr	r2, [pc, #104]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba1c:	4b18      	ldr	r3, [pc, #96]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba24:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba26:	2204      	movs	r2, #4
 800ba28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba2a:	4b15      	ldr	r3, [pc, #84]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba30:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba32:	2202      	movs	r2, #2
 800ba34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba36:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba3c:	4b10      	ldr	r3, [pc, #64]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ba42:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba44:	2201      	movs	r2, #1
 800ba46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba48:	480d      	ldr	r0, [pc, #52]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba4a:	f7f8 fc3f 	bl	80042cc <HAL_PCD_Init>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ba54:	f7f6 fd58 	bl	8002508 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ba58:	2180      	movs	r1, #128	; 0x80
 800ba5a:	4809      	ldr	r0, [pc, #36]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba5c:	f7f9 fd58 	bl	8005510 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba60:	2240      	movs	r2, #64	; 0x40
 800ba62:	2100      	movs	r1, #0
 800ba64:	4806      	ldr	r0, [pc, #24]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba66:	f7f9 fd0d 	bl	8005484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba6a:	2280      	movs	r2, #128	; 0x80
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	4804      	ldr	r0, [pc, #16]	; (800ba80 <USBD_LL_Init+0x84>)
 800ba70:	f7f9 fd08 	bl	8005484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	20003a50 	.word	0x20003a50

0800ba84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7f8 fd33 	bl	8004506 <HAL_PCD_Start>
 800baa0:	4603      	mov	r3, r0
 800baa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f944 	bl	800bd34 <USBD_Get_USB_Status>
 800baac:	4603      	mov	r3, r0
 800baae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	4608      	mov	r0, r1
 800bac4:	4611      	mov	r1, r2
 800bac6:	461a      	mov	r2, r3
 800bac8:	4603      	mov	r3, r0
 800baca:	70fb      	strb	r3, [r7, #3]
 800bacc:	460b      	mov	r3, r1
 800bace:	70bb      	strb	r3, [r7, #2]
 800bad0:	4613      	mov	r3, r2
 800bad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bae2:	78bb      	ldrb	r3, [r7, #2]
 800bae4:	883a      	ldrh	r2, [r7, #0]
 800bae6:	78f9      	ldrb	r1, [r7, #3]
 800bae8:	f7f9 f9ac 	bl	8004e44 <HAL_PCD_EP_Open>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f91e 	bl	800bd34 <USBD_Get_USB_Status>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb20:	78fa      	ldrb	r2, [r7, #3]
 800bb22:	4611      	mov	r1, r2
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7f9 f9f5 	bl	8004f14 <HAL_PCD_EP_Close>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f8ff 	bl	800bd34 <USBD_Get_USB_Status>
 800bb36:	4603      	mov	r3, r0
 800bb38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb5e:	78fa      	ldrb	r2, [r7, #3]
 800bb60:	4611      	mov	r1, r2
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7f9 fa9a 	bl	800509c <HAL_PCD_EP_SetStall>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 f8e0 	bl	800bd34 <USBD_Get_USB_Status>
 800bb74:	4603      	mov	r3, r0
 800bb76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb9c:	78fa      	ldrb	r2, [r7, #3]
 800bb9e:	4611      	mov	r1, r2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7f9 fadd 	bl	8005160 <HAL_PCD_EP_ClrStall>
 800bba6:	4603      	mov	r3, r0
 800bba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 f8c1 	bl	800bd34 <USBD_Get_USB_Status>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bbd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	da0b      	bge.n	800bbf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbdc:	78fb      	ldrb	r3, [r7, #3]
 800bbde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbe2:	68f9      	ldr	r1, [r7, #12]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	00db      	lsls	r3, r3, #3
 800bbe8:	4413      	add	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	440b      	add	r3, r1
 800bbee:	333e      	adds	r3, #62	; 0x3e
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	e00b      	b.n	800bc0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbf4:	78fb      	ldrb	r3, [r7, #3]
 800bbf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbfa:	68f9      	ldr	r1, [r7, #12]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bc0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bc80      	pop	{r7}
 800bc14:	4770      	bx	lr

0800bc16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc30:	78fa      	ldrb	r2, [r7, #3]
 800bc32:	4611      	mov	r1, r2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7f9 f8e0 	bl	8004dfa <HAL_PCD_SetAddress>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 f877 	bl	800bd34 <USBD_Get_USB_Status>
 800bc46:	4603      	mov	r3, r0
 800bc48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	607a      	str	r2, [r7, #4]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	460b      	mov	r3, r1
 800bc62:	72fb      	strb	r3, [r7, #11]
 800bc64:	4613      	mov	r3, r2
 800bc66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc76:	893b      	ldrh	r3, [r7, #8]
 800bc78:	7af9      	ldrb	r1, [r7, #11]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	f7f9 f9dd 	bl	800503a <HAL_PCD_EP_Transmit>
 800bc80:	4603      	mov	r3, r0
 800bc82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc84:	7dfb      	ldrb	r3, [r7, #23]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 f854 	bl	800bd34 <USBD_Get_USB_Status>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc90:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b086      	sub	sp, #24
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	461a      	mov	r2, r3
 800bca6:	460b      	mov	r3, r1
 800bca8:	72fb      	strb	r3, [r7, #11]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcbc:	893b      	ldrh	r3, [r7, #8]
 800bcbe:	7af9      	ldrb	r1, [r7, #11]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	f7f9 f971 	bl	8004fa8 <HAL_PCD_EP_Receive>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 f831 	bl	800bd34 <USBD_Get_USB_Status>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcd6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	460b      	mov	r3, r1
 800bcea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf2:	78fa      	ldrb	r2, [r7, #3]
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7f9 f988 	bl	800500c <HAL_PCD_EP_GetRxCount>
 800bcfc:	4603      	mov	r3, r0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd10:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <USBD_static_malloc+0x14>)
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bc80      	pop	{r7}
 800bd1a:	4770      	bx	lr
 800bd1c:	20003f54 	.word	0x20003f54

0800bd20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]

}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bc80      	pop	{r7}
 800bd30:	4770      	bx	lr
	...

0800bd34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d817      	bhi.n	800bd78 <USBD_Get_USB_Status+0x44>
 800bd48:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <USBD_Get_USB_Status+0x1c>)
 800bd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4e:	bf00      	nop
 800bd50:	0800bd61 	.word	0x0800bd61
 800bd54:	0800bd67 	.word	0x0800bd67
 800bd58:	0800bd6d 	.word	0x0800bd6d
 800bd5c:	0800bd73 	.word	0x0800bd73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73fb      	strb	r3, [r7, #15]
    break;
 800bd64:	e00b      	b.n	800bd7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd66:	2302      	movs	r3, #2
 800bd68:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6a:	e008      	b.n	800bd7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd70:	e005      	b.n	800bd7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd72:	2302      	movs	r3, #2
 800bd74:	73fb      	strb	r3, [r7, #15]
    break;
 800bd76:	e002      	b.n	800bd7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd78:	2302      	movs	r3, #2
 800bd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd7c:	bf00      	nop
  }
  return usb_status;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3714      	adds	r7, #20
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bc80      	pop	{r7}
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop

0800bd8c <__libc_init_array>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	2600      	movs	r6, #0
 800bd90:	4d0c      	ldr	r5, [pc, #48]	; (800bdc4 <__libc_init_array+0x38>)
 800bd92:	4c0d      	ldr	r4, [pc, #52]	; (800bdc8 <__libc_init_array+0x3c>)
 800bd94:	1b64      	subs	r4, r4, r5
 800bd96:	10a4      	asrs	r4, r4, #2
 800bd98:	42a6      	cmp	r6, r4
 800bd9a:	d109      	bne.n	800bdb0 <__libc_init_array+0x24>
 800bd9c:	f000 f830 	bl	800be00 <_init>
 800bda0:	2600      	movs	r6, #0
 800bda2:	4d0a      	ldr	r5, [pc, #40]	; (800bdcc <__libc_init_array+0x40>)
 800bda4:	4c0a      	ldr	r4, [pc, #40]	; (800bdd0 <__libc_init_array+0x44>)
 800bda6:	1b64      	subs	r4, r4, r5
 800bda8:	10a4      	asrs	r4, r4, #2
 800bdaa:	42a6      	cmp	r6, r4
 800bdac:	d105      	bne.n	800bdba <__libc_init_array+0x2e>
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb4:	4798      	blx	r3
 800bdb6:	3601      	adds	r6, #1
 800bdb8:	e7ee      	b.n	800bd98 <__libc_init_array+0xc>
 800bdba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdbe:	4798      	blx	r3
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	e7f2      	b.n	800bdaa <__libc_init_array+0x1e>
 800bdc4:	0800bf9c 	.word	0x0800bf9c
 800bdc8:	0800bf9c 	.word	0x0800bf9c
 800bdcc:	0800bf9c 	.word	0x0800bf9c
 800bdd0:	0800bfa0 	.word	0x0800bfa0

0800bdd4 <memcpy>:
 800bdd4:	440a      	add	r2, r1
 800bdd6:	4291      	cmp	r1, r2
 800bdd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bddc:	d100      	bne.n	800bde0 <memcpy+0xc>
 800bdde:	4770      	bx	lr
 800bde0:	b510      	push	{r4, lr}
 800bde2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bde6:	4291      	cmp	r1, r2
 800bde8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdec:	d1f9      	bne.n	800bde2 <memcpy+0xe>
 800bdee:	bd10      	pop	{r4, pc}

0800bdf0 <memset>:
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	4402      	add	r2, r0
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d100      	bne.n	800bdfa <memset+0xa>
 800bdf8:	4770      	bx	lr
 800bdfa:	f803 1b01 	strb.w	r1, [r3], #1
 800bdfe:	e7f9      	b.n	800bdf4 <memset+0x4>

0800be00 <_init>:
 800be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be02:	bf00      	nop
 800be04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be06:	bc08      	pop	{r3}
 800be08:	469e      	mov	lr, r3
 800be0a:	4770      	bx	lr

0800be0c <_fini>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr
