
Shift by wire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007298  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ac  080075ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075b4  080075b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080075bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be0  20000010  080075cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bf0  080075cc  00022bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f12  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332a  00000000  00000000  00033f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  000384f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e0d  00000000  00000000  000395f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014426  00000000  00000000  0003c3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0a66  00000000  00000000  00050823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec8  00000000  00000000  001112dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08007470 	.word	0x08007470

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08007470 	.word	0x08007470

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2iz>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d215      	bcs.n	8000a02 <__aeabi_d2iz+0x36>
 80009d6:	d511      	bpl.n	80009fc <__aeabi_d2iz+0x30>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d912      	bls.n	8000a08 <__aeabi_d2iz+0x3c>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f2:	fa23 f002 	lsr.w	r0, r3, r2
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d105      	bne.n	8000a14 <__aeabi_d2iz+0x48>
 8000a08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	bf08      	it	eq
 8000a0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_frsub>:
 8000a1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a20:	e002      	b.n	8000a28 <__addsf3>
 8000a22:	bf00      	nop

08000a24 <__aeabi_fsub>:
 8000a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a28 <__addsf3>:
 8000a28:	0042      	lsls	r2, r0, #1
 8000a2a:	bf1f      	itttt	ne
 8000a2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a30:	ea92 0f03 	teqne	r2, r3
 8000a34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3c:	d06a      	beq.n	8000b14 <__addsf3+0xec>
 8000a3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a46:	bfc1      	itttt	gt
 8000a48:	18d2      	addgt	r2, r2, r3
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	4048      	eorgt	r0, r1
 8000a4e:	4041      	eorgt	r1, r0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	2b19      	cmp	r3, #25
 8000a56:	bf88      	it	hi
 8000a58:	4770      	bxhi	lr
 8000a5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4249      	negne	r1, r1
 8000a7a:	ea92 0f03 	teq	r2, r3
 8000a7e:	d03f      	beq.n	8000b00 <__addsf3+0xd8>
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	fa41 fc03 	asr.w	ip, r1, r3
 8000a88:	eb10 000c 	adds.w	r0, r0, ip
 8000a8c:	f1c3 0320 	rsb	r3, r3, #32
 8000a90:	fa01 f103 	lsl.w	r1, r1, r3
 8000a94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__addsf3+0x78>
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa4:	d313      	bcc.n	8000ace <__addsf3+0xa6>
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aaa:	d306      	bcc.n	8000aba <__addsf3+0x92>
 8000aac:	0840      	lsrs	r0, r0, #1
 8000aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ab2:	f102 0201 	add.w	r2, r2, #1
 8000ab6:	2afe      	cmp	r2, #254	; 0xfe
 8000ab8:	d251      	bcs.n	8000b5e <__addsf3+0x136>
 8000aba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000abe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ac2:	bf08      	it	eq
 8000ac4:	f020 0001 	biceq.w	r0, r0, #1
 8000ac8:	ea40 0003 	orr.w	r0, r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	eb40 0000 	adc.w	r0, r0, r0
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000adc:	d2ed      	bcs.n	8000aba <__addsf3+0x92>
 8000ade:	fab0 fc80 	clz	ip, r0
 8000ae2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aee:	bfaa      	itet	ge
 8000af0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af4:	4252      	neglt	r2, r2
 8000af6:	4318      	orrge	r0, r3
 8000af8:	bfbc      	itt	lt
 8000afa:	40d0      	lsrlt	r0, r2
 8000afc:	4318      	orrlt	r0, r3
 8000afe:	4770      	bx	lr
 8000b00:	f092 0f00 	teq	r2, #0
 8000b04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b08:	bf06      	itte	eq
 8000b0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0e:	3201      	addeq	r2, #1
 8000b10:	3b01      	subne	r3, #1
 8000b12:	e7b5      	b.n	8000a80 <__addsf3+0x58>
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d021      	beq.n	8000b68 <__addsf3+0x140>
 8000b24:	ea92 0f03 	teq	r2, r3
 8000b28:	d004      	beq.n	8000b34 <__addsf3+0x10c>
 8000b2a:	f092 0f00 	teq	r2, #0
 8000b2e:	bf08      	it	eq
 8000b30:	4608      	moveq	r0, r1
 8000b32:	4770      	bx	lr
 8000b34:	ea90 0f01 	teq	r0, r1
 8000b38:	bf1c      	itt	ne
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	4770      	bxne	lr
 8000b3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b42:	d104      	bne.n	8000b4e <__addsf3+0x126>
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	bf28      	it	cs
 8000b48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b52:	bf3c      	itt	cc
 8000b54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bxcc	lr
 8000b5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	4770      	bx	lr
 8000b68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b6c:	bf16      	itet	ne
 8000b6e:	4608      	movne	r0, r1
 8000b70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b74:	4601      	movne	r1, r0
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	bf06      	itte	eq
 8000b7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7e:	ea90 0f01 	teqeq	r0, r1
 8000b82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_ui2f>:
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e004      	b.n	8000b98 <__aeabi_i2f+0x8>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_i2f>:
 8000b90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	bf48      	it	mi
 8000b96:	4240      	negmi	r0, r0
 8000b98:	ea5f 0c00 	movs.w	ip, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	e01c      	b.n	8000be6 <__aeabi_l2f+0x2a>

08000bac <__aeabi_ul2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <__aeabi_l2f+0x14>
 8000bba:	bf00      	nop

08000bbc <__aeabi_l2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_l2f+0x14>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	ea5f 0c01 	movs.w	ip, r1
 8000bd4:	bf02      	ittt	eq
 8000bd6:	4684      	moveq	ip, r0
 8000bd8:	4601      	moveq	r1, r0
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000be0:	bf08      	it	eq
 8000be2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bea:	fabc f28c 	clz	r2, ip
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf4:	db10      	blt.n	8000c18 <__aeabi_l2f+0x5c>
 8000bf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f102 0220 	add.w	r2, r2, #32
 8000c1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c28:	fa21 f202 	lsr.w	r2, r1, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_fmul>:
 8000c38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c40:	bf1e      	ittt	ne
 8000c42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c46:	ea92 0f0c 	teqne	r2, ip
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d06f      	beq.n	8000d30 <__aeabi_fmul+0xf8>
 8000c50:	441a      	add	r2, r3
 8000c52:	ea80 0c01 	eor.w	ip, r0, r1
 8000c56:	0240      	lsls	r0, r0, #9
 8000c58:	bf18      	it	ne
 8000c5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5e:	d01e      	beq.n	8000c9e <__aeabi_fmul+0x66>
 8000c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c78:	bf3e      	ittt	cc
 8000c7a:	0049      	lslcc	r1, r1, #1
 8000c7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	ea40 0001 	orr.w	r0, r0, r1
 8000c86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c8a:	2afd      	cmp	r2, #253	; 0xfd
 8000c8c:	d81d      	bhi.n	8000cca <__aeabi_fmul+0x92>
 8000c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	f090 0f00 	teq	r0, #0
 8000ca2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	0249      	lsleq	r1, r1, #9
 8000caa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cb2:	3a7f      	subs	r2, #127	; 0x7f
 8000cb4:	bfc2      	ittt	gt
 8000cb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cbe:	4770      	bxgt	lr
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	dc5d      	bgt.n	8000d88 <__aeabi_fmul+0x150>
 8000ccc:	f112 0f19 	cmn.w	r2, #25
 8000cd0:	bfdc      	itt	le
 8000cd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cd6:	4770      	bxle	lr
 8000cd8:	f1c2 0200 	rsb	r2, r2, #0
 8000cdc:	0041      	lsls	r1, r0, #1
 8000cde:	fa21 f102 	lsr.w	r1, r1, r2
 8000ce2:	f1c2 0220 	rsb	r2, r2, #32
 8000ce6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cee:	f140 0000 	adc.w	r0, r0, #0
 8000cf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf6:	bf08      	it	eq
 8000cf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfc:	4770      	bx	lr
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xce>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xe6>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fmul+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	bf18      	it	ne
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d00a      	beq.n	8000d56 <__aeabi_fmul+0x11e>
 8000d40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d44:	bf18      	it	ne
 8000d46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	d1d8      	bne.n	8000cfe <__aeabi_fmul+0xc6>
 8000d4c:	ea80 0001 	eor.w	r0, r0, r1
 8000d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	bf17      	itett	ne
 8000d5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d60:	4608      	moveq	r0, r1
 8000d62:	f091 0f00 	teqne	r1, #0
 8000d66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d6a:	d014      	beq.n	8000d96 <__aeabi_fmul+0x15e>
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	d101      	bne.n	8000d76 <__aeabi_fmul+0x13e>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d10f      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d76:	ea93 0f0c 	teq	r3, ip
 8000d7a:	d103      	bne.n	8000d84 <__aeabi_fmul+0x14c>
 8000d7c:	024b      	lsls	r3, r1, #9
 8000d7e:	bf18      	it	ne
 8000d80:	4608      	movne	r0, r1
 8000d82:	d108      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_fdiv>:
 8000da0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da8:	bf1e      	ittt	ne
 8000daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dae:	ea92 0f0c 	teqne	r2, ip
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d069      	beq.n	8000e8c <__aeabi_fdiv+0xec>
 8000db8:	eba2 0203 	sub.w	r2, r2, r3
 8000dbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc6:	d037      	beq.n	8000e38 <__aeabi_fdiv+0x98>
 8000dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf38      	it	cc
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000de2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000de6:	428b      	cmp	r3, r1
 8000de8:	bf24      	itt	cs
 8000dea:	1a5b      	subcs	r3, r3, r1
 8000dec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df4:	bf24      	itt	cs
 8000df6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e02:	bf24      	itt	cs
 8000e04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e22:	d1e0      	bne.n	8000de6 <__aeabi_fdiv+0x46>
 8000e24:	2afd      	cmp	r2, #253	; 0xfd
 8000e26:	f63f af50 	bhi.w	8000cca <__aeabi_fmul+0x92>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e40:	327f      	adds	r2, #127	; 0x7f
 8000e42:	bfc2      	ittt	gt
 8000e44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4c:	4770      	bxgt	lr
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	3a01      	subs	r2, #1
 8000e58:	e737      	b.n	8000cca <__aeabi_fmul+0x92>
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xc2>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xda>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e795      	b.n	8000db8 <__aeabi_fdiv+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d108      	bne.n	8000ea8 <__aeabi_fdiv+0x108>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	f47f af7d 	bne.w	8000d96 <__aeabi_fmul+0x15e>
 8000e9c:	ea93 0f0c 	teq	r3, ip
 8000ea0:	f47f af70 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e776      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fdiv+0x118>
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	f43f af4c 	beq.w	8000d4c <__aeabi_fmul+0x114>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e76e      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000eb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ebc:	bf18      	it	ne
 8000ebe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	d1ca      	bne.n	8000e5a <__aeabi_fdiv+0xba>
 8000ec4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec8:	f47f af5c 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ecc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ed0:	f47f af3c 	bne.w	8000d4c <__aeabi_fmul+0x114>
 8000ed4:	e75f      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ed6:	bf00      	nop

08000ed8 <__gesf2>:
 8000ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8000edc:	e006      	b.n	8000eec <__cmpsf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__lesf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	e002      	b.n	8000eec <__cmpsf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__cmpsf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	bf18      	it	ne
 8000efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f02:	d011      	beq.n	8000f28 <__cmpsf2+0x40>
 8000f04:	b001      	add	sp, #4
 8000f06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f0a:	bf18      	it	ne
 8000f0c:	ea90 0f01 	teqne	r0, r1
 8000f10:	bf58      	it	pl
 8000f12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f16:	bf88      	it	hi
 8000f18:	17c8      	asrhi	r0, r1, #31
 8000f1a:	bf38      	it	cc
 8000f1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f20:	bf18      	it	ne
 8000f22:	f040 0001 	orrne.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	d102      	bne.n	8000f34 <__cmpsf2+0x4c>
 8000f2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f32:	d105      	bne.n	8000f40 <__cmpsf2+0x58>
 8000f34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f38:	d1e4      	bne.n	8000f04 <__cmpsf2+0x1c>
 8000f3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f3e:	d0e1      	beq.n	8000f04 <__cmpsf2+0x1c>
 8000f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__aeabi_cfrcmple>:
 8000f48:	4684      	mov	ip, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4661      	mov	r1, ip
 8000f4e:	e7ff      	b.n	8000f50 <__aeabi_cfcmpeq>

08000f50 <__aeabi_cfcmpeq>:
 8000f50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f52:	f7ff ffc9 	bl	8000ee8 <__cmpsf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf48      	it	mi
 8000f5a:	f110 0f00 	cmnmi.w	r0, #0
 8000f5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f60 <__aeabi_fcmpeq>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff fff4 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f68:	bf0c      	ite	eq
 8000f6a:	2001      	moveq	r0, #1
 8000f6c:	2000      	movne	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmplt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffea 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmple>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffe0 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f90:	bf94      	ite	ls
 8000f92:	2001      	movls	r0, #1
 8000f94:	2000      	movhi	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpge>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffd2 	bl	8000f48 <__aeabi_cfrcmple>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpgt>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffc8 	bl	8000f48 <__aeabi_cfrcmple>
 8000fb8:	bf34      	ite	cc
 8000fba:	2001      	movcc	r0, #1
 8000fbc:	2000      	movcs	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b976 	b.w	80012c8 <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f806 	bl	8000ff4 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9e08      	ldr	r6, [sp, #32]
 8000ffa:	460d      	mov	r5, r1
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	4688      	mov	r8, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d14d      	bne.n	80010a0 <__udivmoddi4+0xac>
 8001004:	428a      	cmp	r2, r1
 8001006:	4694      	mov	ip, r2
 8001008:	d968      	bls.n	80010dc <__udivmoddi4+0xe8>
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b152      	cbz	r2, 8001026 <__udivmoddi4+0x32>
 8001010:	fa01 f302 	lsl.w	r3, r1, r2
 8001014:	f1c2 0120 	rsb	r1, r2, #32
 8001018:	fa20 f101 	lsr.w	r1, r0, r1
 800101c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001020:	ea41 0803 	orr.w	r8, r1, r3
 8001024:	4094      	lsls	r4, r2
 8001026:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800102a:	fbb8 f7f1 	udiv	r7, r8, r1
 800102e:	fa1f fe8c 	uxth.w	lr, ip
 8001032:	fb01 8817 	mls	r8, r1, r7, r8
 8001036:	fb07 f00e 	mul.w	r0, r7, lr
 800103a:	0c23      	lsrs	r3, r4, #16
 800103c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001040:	4298      	cmp	r0, r3
 8001042:	d90a      	bls.n	800105a <__udivmoddi4+0x66>
 8001044:	eb1c 0303 	adds.w	r3, ip, r3
 8001048:	f107 35ff 	add.w	r5, r7, #4294967295
 800104c:	f080 811e 	bcs.w	800128c <__udivmoddi4+0x298>
 8001050:	4298      	cmp	r0, r3
 8001052:	f240 811b 	bls.w	800128c <__udivmoddi4+0x298>
 8001056:	3f02      	subs	r7, #2
 8001058:	4463      	add	r3, ip
 800105a:	1a1b      	subs	r3, r3, r0
 800105c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001060:	fb01 3310 	mls	r3, r1, r0, r3
 8001064:	fb00 fe0e 	mul.w	lr, r0, lr
 8001068:	b2a4      	uxth	r4, r4
 800106a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800106e:	45a6      	cmp	lr, r4
 8001070:	d90a      	bls.n	8001088 <__udivmoddi4+0x94>
 8001072:	eb1c 0404 	adds.w	r4, ip, r4
 8001076:	f100 33ff 	add.w	r3, r0, #4294967295
 800107a:	f080 8109 	bcs.w	8001290 <__udivmoddi4+0x29c>
 800107e:	45a6      	cmp	lr, r4
 8001080:	f240 8106 	bls.w	8001290 <__udivmoddi4+0x29c>
 8001084:	4464      	add	r4, ip
 8001086:	3802      	subs	r0, #2
 8001088:	2100      	movs	r1, #0
 800108a:	eba4 040e 	sub.w	r4, r4, lr
 800108e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001092:	b11e      	cbz	r6, 800109c <__udivmoddi4+0xa8>
 8001094:	2300      	movs	r3, #0
 8001096:	40d4      	lsrs	r4, r2
 8001098:	e9c6 4300 	strd	r4, r3, [r6]
 800109c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0xc2>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	f000 80ee 	beq.w	8001286 <__udivmoddi4+0x292>
 80010aa:	2100      	movs	r1, #0
 80010ac:	e9c6 0500 	strd	r0, r5, [r6]
 80010b0:	4608      	mov	r0, r1
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	fab3 f183 	clz	r1, r3
 80010ba:	2900      	cmp	r1, #0
 80010bc:	d14a      	bne.n	8001154 <__udivmoddi4+0x160>
 80010be:	42ab      	cmp	r3, r5
 80010c0:	d302      	bcc.n	80010c8 <__udivmoddi4+0xd4>
 80010c2:	4282      	cmp	r2, r0
 80010c4:	f200 80fc 	bhi.w	80012c0 <__udivmoddi4+0x2cc>
 80010c8:	1a84      	subs	r4, r0, r2
 80010ca:	eb65 0303 	sbc.w	r3, r5, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	4698      	mov	r8, r3
 80010d2:	2e00      	cmp	r6, #0
 80010d4:	d0e2      	beq.n	800109c <__udivmoddi4+0xa8>
 80010d6:	e9c6 4800 	strd	r4, r8, [r6]
 80010da:	e7df      	b.n	800109c <__udivmoddi4+0xa8>
 80010dc:	b902      	cbnz	r2, 80010e0 <__udivmoddi4+0xec>
 80010de:	deff      	udf	#255	; 0xff
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	f040 8091 	bne.w	800120c <__udivmoddi4+0x218>
 80010ea:	eba1 000c 	sub.w	r0, r1, ip
 80010ee:	2101      	movs	r1, #1
 80010f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f4:	fa1f fe8c 	uxth.w	lr, ip
 80010f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80010fc:	fb07 0013 	mls	r0, r7, r3, r0
 8001100:	0c25      	lsrs	r5, r4, #16
 8001102:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001106:	fb0e f003 	mul.w	r0, lr, r3
 800110a:	42a8      	cmp	r0, r5
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x12c>
 800110e:	eb1c 0505 	adds.w	r5, ip, r5
 8001112:	f103 38ff 	add.w	r8, r3, #4294967295
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x12a>
 8001118:	42a8      	cmp	r0, r5
 800111a:	f200 80ce 	bhi.w	80012ba <__udivmoddi4+0x2c6>
 800111e:	4643      	mov	r3, r8
 8001120:	1a2d      	subs	r5, r5, r0
 8001122:	fbb5 f0f7 	udiv	r0, r5, r7
 8001126:	fb07 5510 	mls	r5, r7, r0, r5
 800112a:	fb0e fe00 	mul.w	lr, lr, r0
 800112e:	b2a4      	uxth	r4, r4
 8001130:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x156>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x154>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80b6 	bhi.w	80012b4 <__udivmoddi4+0x2c0>
 8001148:	4628      	mov	r0, r5
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001152:	e79e      	b.n	8001092 <__udivmoddi4+0x9e>
 8001154:	f1c1 0720 	rsb	r7, r1, #32
 8001158:	408b      	lsls	r3, r1
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa25 fa07 	lsr.w	sl, r5, r7
 8001166:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800116a:	fbba f8f9 	udiv	r8, sl, r9
 800116e:	fa20 f307 	lsr.w	r3, r0, r7
 8001172:	fb09 aa18 	mls	sl, r9, r8, sl
 8001176:	408d      	lsls	r5, r1
 8001178:	fa1f fe8c 	uxth.w	lr, ip
 800117c:	431d      	orrs	r5, r3
 800117e:	fa00 f301 	lsl.w	r3, r0, r1
 8001182:	fb08 f00e 	mul.w	r0, r8, lr
 8001186:	0c2c      	lsrs	r4, r5, #16
 8001188:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800118c:	42a0      	cmp	r0, r4
 800118e:	fa02 f201 	lsl.w	r2, r2, r1
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b8>
 8001194:	eb1c 0404 	adds.w	r4, ip, r4
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295
 800119c:	f080 8088 	bcs.w	80012b0 <__udivmoddi4+0x2bc>
 80011a0:	42a0      	cmp	r0, r4
 80011a2:	f240 8085 	bls.w	80012b0 <__udivmoddi4+0x2bc>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4464      	add	r4, ip
 80011ac:	1a24      	subs	r4, r4, r0
 80011ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80011b2:	fb09 4410 	mls	r4, r9, r0, r4
 80011b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ba:	b2ad      	uxth	r5, r5
 80011bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011c0:	45a6      	cmp	lr, r4
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1e2>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011cc:	d26c      	bcs.n	80012a8 <__udivmoddi4+0x2b4>
 80011ce:	45a6      	cmp	lr, r4
 80011d0:	d96a      	bls.n	80012a8 <__udivmoddi4+0x2b4>
 80011d2:	3802      	subs	r0, #2
 80011d4:	4464      	add	r4, ip
 80011d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011da:	fba0 9502 	umull	r9, r5, r0, r2
 80011de:	eba4 040e 	sub.w	r4, r4, lr
 80011e2:	42ac      	cmp	r4, r5
 80011e4:	46c8      	mov	r8, r9
 80011e6:	46ae      	mov	lr, r5
 80011e8:	d356      	bcc.n	8001298 <__udivmoddi4+0x2a4>
 80011ea:	d053      	beq.n	8001294 <__udivmoddi4+0x2a0>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d069      	beq.n	80012c4 <__udivmoddi4+0x2d0>
 80011f0:	ebb3 0208 	subs.w	r2, r3, r8
 80011f4:	eb64 040e 	sbc.w	r4, r4, lr
 80011f8:	fa22 f301 	lsr.w	r3, r2, r1
 80011fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001200:	431f      	orrs	r7, r3
 8001202:	40cc      	lsrs	r4, r1
 8001204:	e9c6 7400 	strd	r7, r4, [r6]
 8001208:	2100      	movs	r1, #0
 800120a:	e747      	b.n	800109c <__udivmoddi4+0xa8>
 800120c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001210:	f1c2 0120 	rsb	r1, r2, #32
 8001214:	fa25 f301 	lsr.w	r3, r5, r1
 8001218:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800121c:	fa20 f101 	lsr.w	r1, r0, r1
 8001220:	4095      	lsls	r5, r2
 8001222:	430d      	orrs	r5, r1
 8001224:	fbb3 f1f7 	udiv	r1, r3, r7
 8001228:	fb07 3311 	mls	r3, r7, r1, r3
 800122c:	fa1f fe8c 	uxth.w	lr, ip
 8001230:	0c28      	lsrs	r0, r5, #16
 8001232:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001236:	fb01 f30e 	mul.w	r3, r1, lr
 800123a:	4283      	cmp	r3, r0
 800123c:	fa04 f402 	lsl.w	r4, r4, r2
 8001240:	d908      	bls.n	8001254 <__udivmoddi4+0x260>
 8001242:	eb1c 0000 	adds.w	r0, ip, r0
 8001246:	f101 38ff 	add.w	r8, r1, #4294967295
 800124a:	d22f      	bcs.n	80012ac <__udivmoddi4+0x2b8>
 800124c:	4283      	cmp	r3, r0
 800124e:	d92d      	bls.n	80012ac <__udivmoddi4+0x2b8>
 8001250:	3902      	subs	r1, #2
 8001252:	4460      	add	r0, ip
 8001254:	1ac0      	subs	r0, r0, r3
 8001256:	fbb0 f3f7 	udiv	r3, r0, r7
 800125a:	fb07 0013 	mls	r0, r7, r3, r0
 800125e:	b2ad      	uxth	r5, r5
 8001260:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001264:	fb03 f00e 	mul.w	r0, r3, lr
 8001268:	42a8      	cmp	r0, r5
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0x28a>
 800126c:	eb1c 0505 	adds.w	r5, ip, r5
 8001270:	f103 38ff 	add.w	r8, r3, #4294967295
 8001274:	d216      	bcs.n	80012a4 <__udivmoddi4+0x2b0>
 8001276:	42a8      	cmp	r0, r5
 8001278:	d914      	bls.n	80012a4 <__udivmoddi4+0x2b0>
 800127a:	3b02      	subs	r3, #2
 800127c:	4465      	add	r5, ip
 800127e:	1a28      	subs	r0, r5, r0
 8001280:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001284:	e738      	b.n	80010f8 <__udivmoddi4+0x104>
 8001286:	4631      	mov	r1, r6
 8001288:	4630      	mov	r0, r6
 800128a:	e707      	b.n	800109c <__udivmoddi4+0xa8>
 800128c:	462f      	mov	r7, r5
 800128e:	e6e4      	b.n	800105a <__udivmoddi4+0x66>
 8001290:	4618      	mov	r0, r3
 8001292:	e6f9      	b.n	8001088 <__udivmoddi4+0x94>
 8001294:	454b      	cmp	r3, r9
 8001296:	d2a9      	bcs.n	80011ec <__udivmoddi4+0x1f8>
 8001298:	ebb9 0802 	subs.w	r8, r9, r2
 800129c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012a0:	3801      	subs	r0, #1
 80012a2:	e7a3      	b.n	80011ec <__udivmoddi4+0x1f8>
 80012a4:	4643      	mov	r3, r8
 80012a6:	e7ea      	b.n	800127e <__udivmoddi4+0x28a>
 80012a8:	4628      	mov	r0, r5
 80012aa:	e794      	b.n	80011d6 <__udivmoddi4+0x1e2>
 80012ac:	4641      	mov	r1, r8
 80012ae:	e7d1      	b.n	8001254 <__udivmoddi4+0x260>
 80012b0:	46d0      	mov	r8, sl
 80012b2:	e77b      	b.n	80011ac <__udivmoddi4+0x1b8>
 80012b4:	4464      	add	r4, ip
 80012b6:	3802      	subs	r0, #2
 80012b8:	e747      	b.n	800114a <__udivmoddi4+0x156>
 80012ba:	3b02      	subs	r3, #2
 80012bc:	4465      	add	r5, ip
 80012be:	e72f      	b.n	8001120 <__udivmoddi4+0x12c>
 80012c0:	4608      	mov	r0, r1
 80012c2:	e706      	b.n	80010d2 <__udivmoddi4+0xde>
 80012c4:	4631      	mov	r1, r6
 80012c6:	e6e9      	b.n	800109c <__udivmoddi4+0xa8>

080012c8 <__aeabi_idiv0>:
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <toyota_checksum>:
    checksum += data[i];
  }
  return checksum;
}

uint8_t toyota_checksum(uint32_t address, uint64_t d, uint8_t lenght) {
 80012cc:	b4f0      	push	{r4, r5, r6, r7}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	e9c7 2300 	strd	r2, r3, [r7]
   // D = d;
    d >>= ((8 - lenght) * 8); // remove padding
 80012d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012dc:	f1c3 0308 	rsb	r3, r3, #8
 80012e0:	00d9      	lsls	r1, r3, #3
 80012e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e6:	f1c1 0620 	rsb	r6, r1, #32
 80012ea:	f1a1 0020 	sub.w	r0, r1, #32
 80012ee:	fa22 f401 	lsr.w	r4, r2, r1
 80012f2:	fa03 f606 	lsl.w	r6, r3, r6
 80012f6:	4334      	orrs	r4, r6
 80012f8:	fa23 f000 	lsr.w	r0, r3, r0
 80012fc:	4304      	orrs	r4, r0
 80012fe:	fa23 f501 	lsr.w	r5, r3, r1
 8001302:	e9c7 4500 	strd	r4, r5, [r7]
    d >>= 8; // remove checksum
 8001306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0a02      	lsrs	r2, r0, #8
 8001314:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001318:	0a0b      	lsrs	r3, r1, #8
 800131a:	e9c7 2300 	strd	r2, r3, [r7]

    unsigned int s = lenght;
 800131e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001322:	617b      	str	r3, [r7, #20]
    while (address) { s += address & 0xFF; address >>= 8; }
 8001324:	e007      	b.n	8001336 <toyota_checksum+0x6a>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4413      	add	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f4      	bne.n	8001326 <toyota_checksum+0x5a>
    while (d) { s += d & 0xFF; d >>= 8; }
 800133c:	e010      	b.n	8001360 <toyota_checksum+0x94>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4413      	add	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	0a02      	lsrs	r2, r0, #8
 8001356:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800135a:	0a0b      	lsrs	r3, r1, #8
 800135c:	e9c7 2300 	strd	r2, r3, [r7]
 8001360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001364:	4313      	orrs	r3, r2
 8001366:	d1ea      	bne.n	800133e <toyota_checksum+0x72>

    return s & 0xFF;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	b2db      	uxtb	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	4770      	bx	lr
	...

08001378 <CAN_FilterConfig>:
    CAN_Error_Struct Can1;
    CAN_Error_Struct Can2;
} myErrorFlag;

void CAN_FilterConfig(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001382:	2301      	movs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = (uint32_t)0;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = (uint32_t)0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = (uint32_t)0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = (uint32_t)0;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FilterFIFO0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
		sFilterConfig.SlaveStartFilterBank = 13;
 80013a2:	230d      	movs	r3, #13
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24

    // ### Configurate CAN 1 ###
    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4826      	ldr	r0, [pc, #152]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013ac:	f001 fe5e 	bl	800306c <HAL_CAN_ConfigFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <CAN_FilterConfig+0x48>
    {

        myErrorFlag.Can1.ConfigFilter = true;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	70da      	strb	r2, [r3, #3]
        Error_Handler();
 80013bc:	f000 ff9c 	bl	80022f8 <Error_Handler>
    }

    if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80013c0:	4820      	ldr	r0, [pc, #128]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013c2:	f001 ff33 	bl	800322c <HAL_CAN_Start>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <CAN_FilterConfig+0x5e>
    {
        myErrorFlag.Can1.Start = true;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	709a      	strb	r2, [r3, #2]
        Error_Handler();
 80013d2:	f000 ff91 	bl	80022f8 <Error_Handler>
    }

    if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80013d6:	2103      	movs	r1, #3
 80013d8:	481a      	ldr	r0, [pc, #104]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013da:	f002 f98f 	bl	80036fc <HAL_CAN_ActivateNotification>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <CAN_FilterConfig+0x76>
    {
        myErrorFlag.Can1.Act_Notif = true;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
        Error_Handler();
 80013ea:	f000 ff85 	bl	80022f8 <Error_Handler>
    }



    // ### Configurate CAN 2 ###
		sFilterConfig.FilterBank = 13;
 80013ee:	230d      	movs	r3, #13
 80013f0:	617b      	str	r3, [r7, #20]
    if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <CAN_FilterConfig+0xd4>)
 80013f8:	f001 fe38 	bl	800306c <HAL_CAN_ConfigFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <CAN_FilterConfig+0x94>
    {
        /* Filter configuration Error */
        myErrorFlag.Can2.ConfigFilter = true;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <CAN_FilterConfig+0xd0>)
 8001404:	2201      	movs	r2, #1
 8001406:	729a      	strb	r2, [r3, #10]
        Error_Handler();
 8001408:	f000 ff76 	bl	80022f8 <Error_Handler>
    }

    if(HAL_CAN_Start(&hcan2) != HAL_OK)
 800140c:	480f      	ldr	r0, [pc, #60]	; (800144c <CAN_FilterConfig+0xd4>)
 800140e:	f001 ff0d 	bl	800322c <HAL_CAN_Start>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <CAN_FilterConfig+0xaa>
    {
        myErrorFlag.Can2.Start = true;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <CAN_FilterConfig+0xd0>)
 800141a:	2201      	movs	r2, #1
 800141c:	725a      	strb	r2, [r3, #9]
        Error_Handler();
 800141e:	f000 ff6b 	bl	80022f8 <Error_Handler>
    }
    
    if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001422:	2113      	movs	r1, #19
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <CAN_FilterConfig+0xd4>)
 8001426:	f002 f969 	bl	80036fc <HAL_CAN_ActivateNotification>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <CAN_FilterConfig+0xc2>
    {
        myErrorFlag.Can2.Act_Notif = true;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <CAN_FilterConfig+0xd0>)
 8001432:	2201      	movs	r2, #1
 8001434:	71da      	strb	r2, [r3, #7]
        Error_Handler();
 8001436:	f000 ff5f 	bl	80022f8 <Error_Handler>
    }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200019b0 	.word	0x200019b0
 8001448:	20000f48 	.word	0x20000f48
 800144c:	200019d8 	.word	0x200019d8

08001450 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e043      	b.n	80014e6 <HAL_CAN_TxMailbox0CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 800145e:	4926      	ldr	r1, [pc, #152]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3324      	adds	r3, #36	; 0x24
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d135      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 8001474:	4920      	ldr	r1, [pc, #128]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d12a      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014a6:	4413      	add	r3, r2
 80014a8:	1d19      	adds	r1, r3, #4
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	3318      	adds	r3, #24
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014b8:	4413      	add	r3, r2
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	f001 fef8 	bl	80032b4 <HAL_CAN_AddTxMessage>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 80014ca:	490b      	ldr	r1, [pc, #44]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	3324      	adds	r3, #36	; 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    break;
 80014de:	e006      	b.n	80014ee <HAL_CAN_TxMailbox0CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	ddb8      	ble.n	800145e <HAL_CAN_TxMailbox0CompleteCallback+0xe>
        }

    }


}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000002c 	.word	0x2000002c

080014fc <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e043      	b.n	8001592 <HAL_CAN_TxMailbox1CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 800150a:	4926      	ldr	r1, [pc, #152]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	3324      	adds	r3, #36	; 0x24
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d135      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 8001520:	4920      	ldr	r1, [pc, #128]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d12a      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 8001536:	491b      	ldr	r1, [pc, #108]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001552:	4413      	add	r3, r2
 8001554:	1d19      	adds	r1, r3, #4
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	3318      	adds	r3, #24
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001564:	4413      	add	r3, r2
 8001566:	1d1a      	adds	r2, r3, #4
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	f001 fea2 	bl	80032b4 <HAL_CAN_AddTxMessage>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10a      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 8001576:	490b      	ldr	r1, [pc, #44]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3324      	adds	r3, #36	; 0x24
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
                    break;
 800158a:	e006      	b.n	800159a <HAL_CAN_TxMailbox1CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b13      	cmp	r3, #19
 8001596:	ddb8      	ble.n	800150a <HAL_CAN_TxMailbox1CompleteCallback+0xe>
            }
        }

    }

}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000002c 	.word	0x2000002c

080015a8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e043      	b.n	800163e <HAL_CAN_TxMailbox2CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 80015b6:	4926      	ldr	r1, [pc, #152]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3324      	adds	r3, #36	; 0x24
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d135      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 80015cc:	4920      	ldr	r1, [pc, #128]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d12a      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 80015e2:	491b      	ldr	r1, [pc, #108]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015fe:	4413      	add	r3, r2
 8001600:	1d19      	adds	r1, r3, #4
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	3318      	adds	r3, #24
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 8001610:	4413      	add	r3, r2
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	f001 fe4c 	bl	80032b4 <HAL_CAN_AddTxMessage>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10a      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 8001622:	490b      	ldr	r1, [pc, #44]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3324      	adds	r3, #36	; 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
                    break;
 8001636:	e006      	b.n	8001646 <HAL_CAN_TxMailbox2CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b13      	cmp	r3, #19
 8001642:	ddb8      	ble.n	80015b6 <HAL_CAN_TxMailbox2CompleteCallback+0xe>
            }
        }

    }

}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000002c 	.word	0x2000002c

08001654 <CAN_SendMessage>:




void CAN_SendMessage(CAN_HandleTypeDef *hcan,uint32_t ID,uint32_t DLC, uint8_t *data)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
    uint32_t pTxMailbox;

    if(IS_CAN_STDID(ID))
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001668:	d206      	bcs.n	8001678 <CAN_SendMessage+0x24>
    {
        pHeader.IDE = CAN_ID_STD;
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <CAN_SendMessage+0x164>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
        pHeader.StdId = ID;
 8001670:	4a51      	ldr	r2, [pc, #324]	; (80017b8 <CAN_SendMessage+0x164>)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e019      	b.n	80016ac <CAN_SendMessage+0x58>
    }
    else if (IS_CAN_EXTID(ID))
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167e:	d206      	bcs.n	800168e <CAN_SendMessage+0x3a>
    {
        pHeader.IDE = CAN_ID_EXT;
 8001680:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <CAN_SendMessage+0x164>)
 8001682:	2204      	movs	r2, #4
 8001684:	609a      	str	r2, [r3, #8]
        pHeader.ExtId = ID;
 8001686:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <CAN_SendMessage+0x164>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	6053      	str	r3, [r2, #4]
 800168c:	e00e      	b.n	80016ac <CAN_SendMessage+0x58>
    }
    else
    {
        if (hcan == &hcan1) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <CAN_SendMessage+0x168>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d103      	bne.n	800169e <CAN_SendMessage+0x4a>
            myErrorFlag.Can1.Send.noProperId = true;
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <CAN_SendMessage+0x16c>)
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
 800169c:	e006      	b.n	80016ac <CAN_SendMessage+0x58>
        }
        else if (hcan == &hcan2) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <CAN_SendMessage+0x170>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d102      	bne.n	80016ac <CAN_SendMessage+0x58>
            myErrorFlag.Can2.Send.noProperId = true;
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	72da      	strb	r2, [r3, #11]
        }
    }

    if (DLC <= 8)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d803      	bhi.n	80016ba <CAN_SendMessage+0x66>
    {
        pHeader.DLC = DLC;
 80016b2:	4a41      	ldr	r2, [pc, #260]	; (80017b8 <CAN_SendMessage+0x164>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6113      	str	r3, [r2, #16]
 80016b8:	e00e      	b.n	80016d8 <CAN_SendMessage+0x84>
    }
    else
    {
        if (hcan == &hcan1) {
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <CAN_SendMessage+0x168>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d103      	bne.n	80016ca <CAN_SendMessage+0x76>
            myErrorFlag.Can1.Send.noValidDLC = true;
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	715a      	strb	r2, [r3, #5]
 80016c8:	e006      	b.n	80016d8 <CAN_SendMessage+0x84>
        }
        else if (hcan == &hcan2) {
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4a3d      	ldr	r2, [pc, #244]	; (80017c4 <CAN_SendMessage+0x170>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d102      	bne.n	80016d8 <CAN_SendMessage+0x84>
            myErrorFlag.Can2.Send.noValidDLC = true;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	731a      	strb	r2, [r3, #12]
        }
    }

    if(HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0)// check mailboxes
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f001 feba 	bl	8003452 <HAL_CAN_GetTxMailboxesFreeLevel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <CAN_SendMessage+0xa0>
    {
        HAL_CAN_AddTxMessage(hcan, &pHeader, data, &pTxMailbox);
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4933      	ldr	r1, [pc, #204]	; (80017b8 <CAN_SendMessage+0x164>)
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f001 fde1 	bl	80032b4 <HAL_CAN_AddTxMessage>
        {
            Canbuffer[indx].data[i] = *data++;
        }
        Canbuffer[indx].Tr = 1;
    }
}
 80016f2:	e05d      	b.n	80017b0 <CAN_SendMessage+0x15c>
        if(Canbuffer[indx].Tr == 1)
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <CAN_SendMessage+0x174>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4a34      	ldr	r2, [pc, #208]	; (80017cc <CAN_SendMessage+0x178>)
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	3324      	adds	r3, #36	; 0x24
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <CAN_SendMessage+0xc6>
            indx++;
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <CAN_SendMessage+0x174>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <CAN_SendMessage+0x174>)
 8001718:	701a      	strb	r2, [r3, #0]
        if(indx >= (CAN_TX_BUFFER_SIZE -1) )
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <CAN_SendMessage+0x174>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b12      	cmp	r3, #18
 8001720:	d902      	bls.n	8001728 <CAN_SendMessage+0xd4>
            indx = 0;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <CAN_SendMessage+0x174>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
        Canbuffer[indx].hcan = hcan;
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <CAN_SendMessage+0x174>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <CAN_SendMessage+0x178>)
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]
        Canbuffer[indx].pHeader = pHeader;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <CAN_SendMessage+0x174>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <CAN_SendMessage+0x178>)
 8001746:	460b      	mov	r3, r1
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <CAN_SendMessage+0x164>)
 8001752:	1d1c      	adds	r4, r3, #4
 8001754:	4615      	mov	r5, r2
 8001756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800175e:	e884 0003 	stmia.w	r4, {r0, r1}
        for(int i = 0; i<8; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e014      	b.n	8001792 <CAN_SendMessage+0x13e>
            Canbuffer[indx].data[i] = *data++;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	603a      	str	r2, [r7, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <CAN_SendMessage+0x174>)
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4611      	mov	r1, r2
 8001774:	7818      	ldrb	r0, [r3, #0]
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <CAN_SendMessage+0x178>)
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	441a      	add	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	331c      	adds	r3, #28
 8001788:	4602      	mov	r2, r0
 800178a:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i<8; i++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b07      	cmp	r3, #7
 8001796:	dde7      	ble.n	8001768 <CAN_SendMessage+0x114>
        Canbuffer[indx].Tr = 1;
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <CAN_SendMessage+0x174>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <CAN_SendMessage+0x178>)
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	3324      	adds	r3, #36	; 0x24
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	2000034c 	.word	0x2000034c
 80017bc:	200019b0 	.word	0x200019b0
 80017c0:	20000f48 	.word	0x20000f48
 80017c4:	200019d8 	.word	0x200019d8
 80017c8:	20000364 	.word	0x20000364
 80017cc:	2000002c 	.word	0x2000002c

080017d0 <CAN_GetMessage>:



void CAN_GetMessage(CAN_HandleTypeDef *hcan) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b092      	sub	sp, #72	; 0x48
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef myRxHeader;
    uint8_t CAN_Rx_Buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80017d8:	4a93      	ldr	r2, [pc, #588]	; (8001a28 <CAN_GetMessage+0x258>)
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e2:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_CAN_GetRxMessage(hcan, CAN_FilterFIFO0, &myRxHeader, CAN_Rx_Buffer);
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	f107 0218 	add.w	r2, r7, #24
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f001 fe62 	bl	80034ba <HAL_CAN_GetRxMessage>
    uint32_t ID;
    if(hcan == &hcan1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a8c      	ldr	r2, [pc, #560]	; (8001a2c <CAN_GetMessage+0x25c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	f040 8081 	bne.w	8001902 <CAN_GetMessage+0x132>
    {
			if(myRxHeader.StdId == 0)// if recieved message id is 0x343, add this message into queue
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10b      	bne.n	800181e <CAN_GetMessage+0x4e>
				{
					BaseType_t pxHigherPriorityTaskWoken = pdFALSE; 
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
					xQueueSendToBackFromISR( myQueue01Handle, (typedef_343h*)CAN_Rx_Buffer, &pxHigherPriorityTaskWoken );
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <CAN_GetMessage+0x260>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	f107 020c 	add.w	r2, r7, #12
 8001812:	f107 0110 	add.w	r1, r7, #16
 8001816:	2300      	movs	r3, #0
 8001818:	f004 f8d2 	bl	80059c0 <xQueueGenericSendFromISR>
					}

    }


}
 800181c:	e100      	b.n	8001a20 <CAN_GetMessage+0x250>
        if (myRxHeader.IDE == CAN_ID_STD)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10e      	bne.n	8001842 <CAN_GetMessage+0x72>
            CAN_SendMessage(&hcan2,myRxHeader.StdId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4881      	ldr	r0, [pc, #516]	; (8001a34 <CAN_GetMessage+0x264>)
 800182e:	f7ff ff11 	bl	8001654 <CAN_SendMessage>
            StoreCANID(myRxHeader.StdId, 1);
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2101      	movs	r1, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f902 	bl	8001a40 <StoreCANID>
            ID = myRxHeader.StdId;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
 8001840:	e010      	b.n	8001864 <CAN_GetMessage+0x94>
        else if (myRxHeader.IDE == CAN_ID_EXT)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d10d      	bne.n	8001864 <CAN_GetMessage+0x94>
            CAN_SendMessage(&hcan2,myRxHeader.ExtId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001848:	69f9      	ldr	r1, [r7, #28]
 800184a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4878      	ldr	r0, [pc, #480]	; (8001a34 <CAN_GetMessage+0x264>)
 8001852:	f7ff feff 	bl	8001654 <CAN_SendMessage>
            ID = myRxHeader.ExtId;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	647b      	str	r3, [r7, #68]	; 0x44
            StoreCANID(myRxHeader.ExtId, 1);
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	2101      	movs	r1, #1
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8ee 	bl	8001a40 <StoreCANID>
        for(int i = 0; i<CAN1_Buffer_size; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
 8001868:	e047      	b.n	80018fa <CAN_GetMessage+0x12a>
            if(CAN_Bridge_MSG.CAN1_MSG[i].ID == ID || CAN_Bridge_MSG.CAN1_MSG[i].ID == 0x00)
 800186a:	4a73      	ldr	r2, [pc, #460]	; (8001a38 <CAN_GetMessage+0x268>)
 800186c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001876:	429a      	cmp	r2, r3
 8001878:	d006      	beq.n	8001888 <CAN_GetMessage+0xb8>
 800187a:	4a6f      	ldr	r2, [pc, #444]	; (8001a38 <CAN_GetMessage+0x268>)
 800187c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4413      	add	r3, r2
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d135      	bne.n	80018f4 <CAN_GetMessage+0x124>
				CAN_Bridge_MSG.CAN1_MSG[i].DLC = myRxHeader.DLC;
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	b2d9      	uxtb	r1, r3
 800188c:	4a6a      	ldr	r2, [pc, #424]	; (8001a38 <CAN_GetMessage+0x268>)
 800188e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	330c      	adds	r3, #12
 8001896:	460a      	mov	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
                CAN_Bridge_MSG.CAN1_MSG[i].ID = ID;
 800189a:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <CAN_GetMessage+0x268>)
 800189c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018a4:	601a      	str	r2, [r3, #0]
                CAN_Bridge_MSG.CAN1_MSG[i].cnt++;
 80018a6:	4a64      	ldr	r2, [pc, #400]	; (8001a38 <CAN_GetMessage+0x268>)
 80018a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	330d      	adds	r3, #13
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2d9      	uxtb	r1, r3
 80018b6:	4a60      	ldr	r2, [pc, #384]	; (8001a38 <CAN_GetMessage+0x268>)
 80018b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	330d      	adds	r3, #13
 80018c0:	460a      	mov	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
                for(int j = 0; j<8; j++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c8:	e010      	b.n	80018ec <CAN_GetMessage+0x11c>
                    CAN_Bridge_MSG.CAN1_MSG[i].Data[j] = CAN_Rx_Buffer[j];
 80018ca:	f107 0210 	add.w	r2, r7, #16
 80018ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d0:	4413      	add	r3, r2
 80018d2:	7819      	ldrb	r1, [r3, #0]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <CAN_GetMessage+0x268>)
 80018d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	441a      	add	r2, r3
 80018dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	460a      	mov	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
                for(int j = 0; j<8; j++)
 80018e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e8:	3301      	adds	r3, #1
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	ddeb      	ble.n	80018ca <CAN_GetMessage+0xfa>
                break;
 80018f2:	e095      	b.n	8001a20 <CAN_GetMessage+0x250>
        for(int i = 0; i<CAN1_Buffer_size; i++)
 80018f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f6:	3301      	adds	r3, #1
 80018f8:	643b      	str	r3, [r7, #64]	; 0x40
 80018fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fc:	2b27      	cmp	r3, #39	; 0x27
 80018fe:	ddb4      	ble.n	800186a <CAN_GetMessage+0x9a>
}
 8001900:	e08e      	b.n	8001a20 <CAN_GetMessage+0x250>
    else if(hcan == &hcan2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <CAN_GetMessage+0x264>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 808a 	bne.w	8001a20 <CAN_GetMessage+0x250>
				if(myRxHeader.StdId == 0x191)// if recieved message id is ShiftCommand_ID, add this message into queue
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f240 1291 	movw	r2, #401	; 0x191
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <CAN_GetMessage+0x15e>
					BaseType_t pxHigherPriorityTaskWoken = pdFALSE; 
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
					xQueueSendToBackFromISR( myQueue02Handle, CAN_Rx_Buffer, &pxHigherPriorityTaskWoken );
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <CAN_GetMessage+0x26c>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 0208 	add.w	r2, r7, #8
 8001922:	f107 0110 	add.w	r1, r7, #16
 8001926:	2300      	movs	r3, #0
 8001928:	f004 f84a 	bl	80059c0 <xQueueGenericSendFromISR>
 800192c:	e022      	b.n	8001974 <CAN_GetMessage+0x1a4>
					if (myRxHeader.IDE == CAN_ID_STD)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10e      	bne.n	8001952 <CAN_GetMessage+0x182>
							CAN_SendMessage(&hcan1,myRxHeader.StdId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001934:	69b9      	ldr	r1, [r7, #24]
 8001936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	483b      	ldr	r0, [pc, #236]	; (8001a2c <CAN_GetMessage+0x25c>)
 800193e:	f7ff fe89 	bl	8001654 <CAN_SendMessage>
							ID = myRxHeader.StdId;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
							StoreCANID(myRxHeader.StdId, 2);
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2102      	movs	r1, #2
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f878 	bl	8001a40 <StoreCANID>
 8001950:	e010      	b.n	8001974 <CAN_GetMessage+0x1a4>
					else if (myRxHeader.IDE == CAN_ID_EXT)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d10d      	bne.n	8001974 <CAN_GetMessage+0x1a4>
							CAN_SendMessage(&hcan1,myRxHeader.ExtId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001958:	69f9      	ldr	r1, [r7, #28]
 800195a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4832      	ldr	r0, [pc, #200]	; (8001a2c <CAN_GetMessage+0x25c>)
 8001962:	f7ff fe77 	bl	8001654 <CAN_SendMessage>
							ID = myRxHeader.ExtId;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
							StoreCANID(myRxHeader.ExtId, 2);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f866 	bl	8001a40 <StoreCANID>
				for(int i = 0; i<CAN2_Buffer_size; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
 8001978:	e04e      	b.n	8001a18 <CAN_GetMessage+0x248>
							if(CAN_Bridge_MSG.CAN2_MSG[i].ID == ID || CAN_Bridge_MSG.CAN2_MSG[i].ID == 0x00)
 800197a:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <CAN_GetMessage+0x268>)
 800197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197e:	3328      	adds	r3, #40	; 0x28
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001988:	429a      	cmp	r2, r3
 800198a:	d007      	beq.n	800199c <CAN_GetMessage+0x1cc>
 800198c:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <CAN_GetMessage+0x268>)
 800198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001990:	3328      	adds	r3, #40	; 0x28
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d13a      	bne.n	8001a12 <CAN_GetMessage+0x242>
									CAN_Bridge_MSG.CAN2_MSG[i].DLC = myRxHeader.DLC;
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <CAN_GetMessage+0x268>)
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80019ac:	460a      	mov	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
									CAN_Bridge_MSG.CAN2_MSG[i].ID = ID;
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <CAN_GetMessage+0x268>)
 80019b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b4:	3328      	adds	r3, #40	; 0x28
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019bc:	601a      	str	r2, [r3, #0]
									CAN_Bridge_MSG.CAN2_MSG[i].cnt++;
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <CAN_GetMessage+0x268>)
 80019c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	f203 238d 	addw	r3, r3, #653	; 0x28d
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2d9      	uxtb	r1, r3
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <CAN_GetMessage+0x268>)
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	f203 238d 	addw	r3, r3, #653	; 0x28d
 80019dc:	460a      	mov	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
									for(int j = 0; j<8; j++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
 80019e4:	e011      	b.n	8001a0a <CAN_GetMessage+0x23a>
											CAN_Bridge_MSG.CAN2_MSG[i].Data[j] = CAN_Rx_Buffer[j];
 80019e6:	f107 0210 	add.w	r2, r7, #16
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	4413      	add	r3, r2
 80019ee:	7819      	ldrb	r1, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <CAN_GetMessage+0x268>)
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	441a      	add	r2, r3
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001a00:	460a      	mov	r2, r1
 8001a02:	701a      	strb	r2, [r3, #0]
									for(int j = 0; j<8; j++)
 8001a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a06:	3301      	adds	r3, #1
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	ddea      	ble.n	80019e6 <CAN_GetMessage+0x216>
									break;
 8001a10:	e006      	b.n	8001a20 <CAN_GetMessage+0x250>
				for(int i = 0; i<CAN2_Buffer_size; i++)
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a14:	3301      	adds	r3, #1
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	2b95      	cmp	r3, #149	; 0x95
 8001a1c:	ddad      	ble.n	800197a <CAN_GetMessage+0x1aa>
}
 8001a1e:	e7ff      	b.n	8001a20 <CAN_GetMessage+0x250>
 8001a20:	bf00      	nop
 8001a22:	3748      	adds	r7, #72	; 0x48
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	08007488 	.word	0x08007488
 8001a2c:	200019b0 	.word	0x200019b0
 8001a30:	20001a14 	.word	0x20001a14
 8001a34:	200019d8 	.word	0x200019d8
 8001a38:	20000368 	.word	0x20000368
 8001a3c:	20001a18 	.word	0x20001a18

08001a40 <StoreCANID>:

uint32_t IDlist1[250],IDlist2[250];
uint8_t StoreCANID(uint32_t ID, uint8_t Port)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
	static uint16_t index1=0,index2=0;
	if(Port == 1)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11c      	bne.n	8001a8c <StoreCANID+0x4c>
	{
		for(int i=0;i<250;i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e00b      	b.n	8001a70 <StoreCANID+0x30>
		{
			if(IDlist1[i]==ID)
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <StoreCANID+0x98>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d101      	bne.n	8001a6a <StoreCANID+0x2a>
				return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e031      	b.n	8001ace <StoreCANID+0x8e>
		for(int i=0;i<250;i++)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2bf9      	cmp	r3, #249	; 0xf9
 8001a74:	ddf0      	ble.n	8001a58 <StoreCANID+0x18>
		}
		IDlist1[index1++] = ID;
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <StoreCANID+0x9c>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	b291      	uxth	r1, r2
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <StoreCANID+0x9c>)
 8001a80:	8011      	strh	r1, [r2, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <StoreCANID+0x98>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	}
	if(Port == 2)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d11c      	bne.n	8001acc <StoreCANID+0x8c>
	{
		for(int i=0;i<250;i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	e00b      	b.n	8001ab0 <StoreCANID+0x70>
		{
			if(IDlist2[i]==ID)
 8001a98:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <StoreCANID+0xa0>)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d101      	bne.n	8001aaa <StoreCANID+0x6a>
				return 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e011      	b.n	8001ace <StoreCANID+0x8e>
		for(int i=0;i<250;i++)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2bf9      	cmp	r3, #249	; 0xf9
 8001ab4:	ddf0      	ble.n	8001a98 <StoreCANID+0x58>
		}
		IDlist2[index2++] = ID;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <StoreCANID+0xa4>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	b291      	uxth	r1, r2
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <StoreCANID+0xa4>)
 8001ac0:	8011      	strh	r1, [r2, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <StoreCANID+0xa0>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	}


	return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000f58 	.word	0x20000f58
 8001adc:	20001728 	.word	0x20001728
 8001ae0:	20001340 	.word	0x20001340
 8001ae4:	2000172a 	.word	0x2000172a

08001ae8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <vApplicationGetIdleTaskMemory+0x28>)
 8001af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8001afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	2000172c 	.word	0x2000172c
 8001b14:	20001780 	.word	0x20001780

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b0b2      	sub	sp, #200	; 0xc8
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1e:	f000 fe53 	bl	80027c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b22:	f000 f8db 	bl	8001cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b26:	f000 f9e7 	bl	8001ef8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001b2a:	f000 f979 	bl	8001e20 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001b2e:	f000 f9ad 	bl	8001e8c <MX_CAN2_Init>
  MX_ADC1_Init();
 8001b32:	f000 f937 	bl	8001da4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig();
 8001b36:	f7ff fc1f 	bl	8001378 <CAN_FilterConfig>
  HAL_ADC_Start(&hadc1);
 8001b3a:	4857      	ldr	r0, [pc, #348]	; (8001c98 <main+0x180>)
 8001b3c:	f000 ff4e 	bl	80029dc <HAL_ADC_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SartStopSem01 */
  osSemaphoreDef(SartStopSem01);
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  SartStopSem01Handle = osSemaphoreCreate(osSemaphore(SartStopSem01), 1);
 8001b4c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fbf0 	bl	8005338 <osSemaphoreCreate>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <main+0x184>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* definition and creation of HandBrakeSem02 */
  osSemaphoreDef(HandBrakeSem02);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HandBrakeSem02Handle = osSemaphoreCreate(osSemaphore(HandBrakeSem02), 1);
 8001b6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fbe1 	bl	8005338 <osSemaphoreCreate>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <main+0x188>)
 8001b7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ParkBrakeSem03 */
  osSemaphoreDef(ParkBrakeSem03);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ParkBrakeSem03Handle = osSemaphoreCreate(osSemaphore(ParkBrakeSem03), 1);
 8001b88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fbd2 	bl	8005338 <osSemaphoreCreate>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <main+0x18c>)
 8001b98:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 8, typedef_343h);
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <main+0x190>)
 8001b9c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001ba6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fbf5 	bl	800539c <osMessageCreate>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <main+0x194>)
 8001bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 8, uint8_t[8]);
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <main+0x190>)
 8001bba:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8001bc4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fbe6 	bl	800539c <osMessageCreate>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <main+0x198>)
 8001bd4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <main+0x19c>)
 8001bd8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001bdc:	461d      	mov	r5, r3
 8001bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001bea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 fb41 	bl	8005278 <osThreadCreate>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <main+0x1a0>)
 8001bfa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myButtonTask */
  osThreadDef(myButtonTask, StartTask02, osPriorityBelowNormal, 0, 128);
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <main+0x1a4>)
 8001bfe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001c02:	461d      	mov	r5, r3
 8001c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myButtonTaskHandle = osThreadCreate(osThread(myButtonTask), NULL);
 8001c10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fb2e 	bl	8005278 <osThreadCreate>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <main+0x1a8>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, HandBrake, osPriorityLow, 0, 128);
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <main+0x1ac>)
 8001c24:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001c28:	461d      	mov	r5, r3
 8001c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001c36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fb1b 	bl	8005278 <osThreadCreate>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <main+0x1b0>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartStop, osPriorityLow, 0, 128);
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <main+0x1b4>)
 8001c4a:	f107 0420 	add.w	r4, r7, #32
 8001c4e:	461d      	mov	r5, r3
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fb08 	bl	8005278 <osThreadCreate>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <main+0x1b8>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, ParkBrake, osPriorityLow, 0, 128);
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <main+0x1bc>)
 8001c70:	1d3c      	adds	r4, r7, #4
 8001c72:	461d      	mov	r5, r3
 8001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 faf7 	bl	8005278 <osThreadCreate>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <main+0x1c0>)
 8001c8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c90:	f003 faeb 	bl	800526a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <main+0x17c>
 8001c96:	bf00      	nop
 8001c98:	20001980 	.word	0x20001980
 8001c9c:	20001a1c 	.word	0x20001a1c
 8001ca0:	20001a20 	.word	0x20001a20
 8001ca4:	20001a24 	.word	0x20001a24
 8001ca8:	080074d0 	.word	0x080074d0
 8001cac:	20001a14 	.word	0x20001a14
 8001cb0:	20001a18 	.word	0x20001a18
 8001cb4:	080074e0 	.word	0x080074e0
 8001cb8:	20001a00 	.word	0x20001a00
 8001cbc:	080074fc 	.word	0x080074fc
 8001cc0:	20001a04 	.word	0x20001a04
 8001cc4:	08007518 	.word	0x08007518
 8001cc8:	20001a08 	.word	0x20001a08
 8001ccc:	08007534 	.word	0x08007534
 8001cd0:	20001a0c 	.word	0x20001a0c
 8001cd4:	08007550 	.word	0x08007550
 8001cd8:	20001a10 	.word	0x20001a10

08001cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b09c      	sub	sp, #112	; 0x70
 8001ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ce6:	2238      	movs	r2, #56	; 0x38
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 fbb8 	bl	8007460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2220      	movs	r2, #32
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fbaa 	bl	8007460 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d22:	2302      	movs	r3, #2
 8001d24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f990 	bl	8004060 <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001d46:	f000 fad7 	bl	80022f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	2102      	movs	r1, #2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fc90 	bl	800468c <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d72:	f000 fac1 	bl	80022f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d76:	2302      	movs	r3, #2
 8001d78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fecc 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d8e:	f000 fab3 	bl	80022f8 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001d92:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <SystemClock_Config+0xc4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	3770      	adds	r7, #112	; 0x70
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	42420070 	.word	0x42420070

08001da4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001db6:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <MX_ADC1_Init+0x78>)
 8001db8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001de2:	f000 fd23 	bl	800282c <HAL_ADC_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001dec:	f000 fa84 	bl	80022f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001df0:	2306      	movs	r3, #6
 8001df2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001e02:	f000 fea5 	bl	8002b50 <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e0c:	f000 fa74 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20001980 	.word	0x20001980
 8001e1c:	40012400 	.word	0x40012400

08001e20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <MX_CAN1_Init+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e2c:	2209      	movs	r2, #9
 8001e2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e3e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001e42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e70:	f001 f801 	bl	8002e76 <HAL_CAN_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001e7a:	f000 fa3d 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200019b0 	.word	0x200019b0
 8001e88:	40006400 	.word	0x40006400

08001e8c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <MX_CAN2_Init+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001e98:	2209      	movs	r2, #9
 8001e9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eaa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001eae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001edc:	f000 ffcb 	bl	8002e76 <HAL_CAN_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001ee6:	f000 fa07 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200019d8 	.word	0x200019d8
 8001ef4:	40006800 	.word	0x40006800

08001ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a36      	ldr	r2, [pc, #216]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f12:	f043 0320 	orr.w	r3, r3, #32
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a30      	ldr	r2, [pc, #192]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_COIL_Pin|LS_SWITCH_2_Pin, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	210a      	movs	r1, #10
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <MX_GPIO_Init+0xf8>)
 8001f72:	f002 f85d 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LS_SWITCH_1_GPIO_Port, LS_SWITCH_1_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2101      	movs	r1, #1
 8001f7a:	481e      	ldr	r0, [pc, #120]	; (8001ff4 <MX_GPIO_Init+0xfc>)
 8001f7c:	f002 f858 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_PULL_Pin|HB_PUSH_Pin|CAN2_STBY_Pin|CAN1_STBY_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f243 0190 	movw	r1, #12432	; 0x3090
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <MX_GPIO_Init+0x100>)
 8001f88:	f002 f852 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_COIL_Pin LS_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = RELAY_COIL_Pin|LS_SWITCH_2_Pin;
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <MX_GPIO_Init+0xf8>)
 8001fa4:	f001 fec0 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LS_SWITCH_1_Pin;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <MX_GPIO_Init+0xfc>)
 8001fc0:	f001 feb2 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_PULL_Pin HB_PUSH_Pin CAN2_STBY_Pin CAN1_STBY_Pin */
  GPIO_InitStruct.Pin = HB_PULL_Pin|HB_PUSH_Pin|CAN2_STBY_Pin|CAN1_STBY_Pin;
 8001fc4:	f243 0390 	movw	r3, #12432	; 0x3090
 8001fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <MX_GPIO_Init+0x100>)
 8001fde:	f001 fea3 	bl	8003d28 <HAL_GPIO_Init>

}
 8001fe2:	bf00      	nop
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	00000000 	.word	0x00000000

08002000 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af02      	add	r7, sp, #8
 8002006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  xQueueReceive( myQueue02Handle, bytes, portMAX_DELAY );//Task will be blocked until CAN frame is recieved
 8002008:	4b69      	ldr	r3, [pc, #420]	; (80021b0 <StartDefaultTask+0x1b0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	4968      	ldr	r1, [pc, #416]	; (80021b4 <StartDefaultTask+0x1b4>)
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fd6c 	bl	8005af0 <xQueueReceive>





	  			memcpy((void *)bytesc,(const void *)bytes,(size_t)8);
 8002018:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <StartDefaultTask+0x1b8>)
 800201a:	4a66      	ldr	r2, [pc, #408]	; (80021b4 <StartDefaultTask+0x1b4>)
 800201c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002020:	e883 0003 	stmia.w	r3, {r0, r1}
	  			byte0.set_me_X1 = 1;
 8002024:	4a65      	ldr	r2, [pc, #404]	; (80021bc <StartDefaultTask+0x1bc>)
 8002026:	7813      	ldrb	r3, [r2, #0]
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	7013      	strb	r3, [r2, #0]
	  			byte0.steer_request = 1;
 800202e:	4a63      	ldr	r2, [pc, #396]	; (80021bc <StartDefaultTask+0x1bc>)
 8002030:	7813      	ldrb	r3, [r2, #0]
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	7013      	strb	r3, [r2, #0]
	  			byte0.cnt = (bytes[0] >> 1) & 0x3F;
 8002038:	4b5e      	ldr	r3, [pc, #376]	; (80021b4 <StartDefaultTask+0x1b4>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002044:	b2d9      	uxtb	r1, r3
 8002046:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <StartDefaultTask+0x1bc>)
 8002048:	7813      	ldrb	r3, [r2, #0]
 800204a:	f361 0346 	bfi	r3, r1, #1, #6
 800204e:	7013      	strb	r3, [r2, #0]
	  			SETME_X64 = 100;
 8002050:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <StartDefaultTask+0x1c0>)
 8002052:	2264      	movs	r2, #100	; 0x64
 8002054:	701a      	strb	r2, [r3, #0]
	  			ANGLE = 0;
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <StartDefaultTask+0x1c4>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
	  			PERCENTAGE = 100;
 800205c:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <StartDefaultTask+0x1c8>)
 800205e:	2264      	movs	r2, #100	; 0x64
 8002060:	701a      	strb	r2, [r3, #0]
	  			byte3.SETME_X3 = 3;
 8002062:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <StartDefaultTask+0x1cc>)
 8002064:	7813      	ldrb	r3, [r2, #0]
 8002066:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800206a:	7013      	strb	r3, [r2, #0]
	  			byte3.STEER_REQUEST_2 = 1;
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <StartDefaultTask+0x1cc>)
 800206e:	7813      	ldrb	r3, [r2, #0]
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	7013      	strb	r3, [r2, #0]
	  			byte3.BIT = 0;
 8002076:	4a55      	ldr	r2, [pc, #340]	; (80021cc <StartDefaultTask+0x1cc>)
 8002078:	7813      	ldrb	r3, [r2, #0]
 800207a:	f36f 1386 	bfc	r3, #6, #1
 800207e:	7013      	strb	r3, [r2, #0]
	  			byte3.LKA_ACTIVE = 0;
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <StartDefaultTask+0x1cc>)
 8002082:	7813      	ldrb	r3, [r2, #0]
 8002084:	f36f 0382 	bfc	r3, #2, #1
 8002088:	7013      	strb	r3, [r2, #0]



	  			SetSteerAngle = (int16_t)(Commandstruct.SetSteerAngle / 0.0573);
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <StartDefaultTask+0x1d0>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa32 	bl	80004f8 <__aeabi_f2d>
 8002094:	a344      	add	r3, pc, #272	; (adr r3, 80021a8 <StartDefaultTask+0x1a8>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fbaf 	bl	80007fc <__aeabi_ddiv>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fc91 	bl	80009cc <__aeabi_d2iz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <StartDefaultTask+0x1d4>)
 80020b0:	801a      	strh	r2, [r3, #0]
	  			bytesc[0] = *(uint8_t*)&byte0;
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <StartDefaultTask+0x1bc>)
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <StartDefaultTask+0x1b8>)
 80020b8:	701a      	strb	r2, [r3, #0]
	  			bytesc[1] = SetSteerAngle >> 8;
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <StartDefaultTask+0x1d4>)
 80020bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c0:	121b      	asrs	r3, r3, #8
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <StartDefaultTask+0x1b8>)
 80020c8:	705a      	strb	r2, [r3, #1]
	  			bytesc[2] = SetSteerAngle & 0x00FF;
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <StartDefaultTask+0x1d4>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <StartDefaultTask+0x1b8>)
 80020d4:	709a      	strb	r2, [r3, #2]
	  			bytesc[3] = *(uint8_t*)&byte3;
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <StartDefaultTask+0x1cc>)
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <StartDefaultTask+0x1b8>)
 80020dc:	70da      	strb	r2, [r3, #3]
				bytesc[4] = PERCENTAGE;
 80020de:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <StartDefaultTask+0x1c8>)
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <StartDefaultTask+0x1b8>)
 80020e4:	711a      	strb	r2, [r3, #4]
				bytesc[5] = SETME_X64;
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <StartDefaultTask+0x1c0>)
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <StartDefaultTask+0x1b8>)
 80020ec:	715a      	strb	r2, [r3, #5]
				bytesc[6] = ANGLE;
 80020ee:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <StartDefaultTask+0x1c4>)
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <StartDefaultTask+0x1b8>)
 80020f4:	719a      	strb	r2, [r3, #6]

	  			uint8_t temp[8];
	  			for(int i= 0;i<8;i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e00d      	b.n	8002118 <StartDefaultTask+0x118>
	  			{
	  				temp[i] = bytesc[7-i];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <StartDefaultTask+0x1b8>)
 8002104:	5cd1      	ldrb	r1, [r2, r3]
 8002106:	f107 0210 	add.w	r2, r7, #16
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4413      	add	r3, r2
 800210e:	460a      	mov	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
	  			for(int i= 0;i<8;i++)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b07      	cmp	r3, #7
 800211c:	ddee      	ble.n	80020fc <StartDefaultTask+0xfc>
	  			}
	  			bytesc[7] = toyota_checksum(0x191, *(uint64_t*)temp, 8);
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	2108      	movs	r1, #8
 8002128:	9100      	str	r1, [sp, #0]
 800212a:	f240 1091 	movw	r0, #401	; 0x191
 800212e:	f7ff f8cd 	bl	80012cc <toyota_checksum>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <StartDefaultTask+0x1b8>)
 8002138:	71da      	strb	r2, [r3, #7]
	  			//Checksum = toyota_checksum(0x191, *(uint64_t*)bytesc, 8);
	  			//bytesc[7] = Checksum;
	  		if(Commandstruct.AutonomuosMode){
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <StartDefaultTask+0x1d0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <StartDefaultTask+0x152>

	  			CAN_SendMessage(&hcan1,0x191,8, bytesc);
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <StartDefaultTask+0x1b8>)
 8002144:	2208      	movs	r2, #8
 8002146:	f240 1191 	movw	r1, #401	; 0x191
 800214a:	4823      	ldr	r0, [pc, #140]	; (80021d8 <StartDefaultTask+0x1d8>)
 800214c:	f7ff fa82 	bl	8001654 <CAN_SendMessage>
 8002150:	e75a      	b.n	8002008 <StartDefaultTask+0x8>

	  		}
	  		else
	  		{
	  			uint8_t temp[8];
	  			for(int i= 0;i<8;i++)
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	e00d      	b.n	8002174 <StartDefaultTask+0x174>
	  			{
	  				temp[i] = bytes[7-i];
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <StartDefaultTask+0x1b4>)
 8002160:	5cd1      	ldrb	r1, [r2, r3]
 8002162:	f107 0208 	add.w	r2, r7, #8
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	460a      	mov	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
	  			for(int i= 0;i<8;i++)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	3301      	adds	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b07      	cmp	r3, #7
 8002178:	ddee      	ble.n	8002158 <StartDefaultTask+0x158>
	  			}
	  			bytes[7] = toyota_checksum(0x191, *(uint64_t*)temp, 8);
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	2108      	movs	r1, #8
 8002184:	9100      	str	r1, [sp, #0]
 8002186:	f240 1091 	movw	r0, #401	; 0x191
 800218a:	f7ff f89f 	bl	80012cc <toyota_checksum>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <StartDefaultTask+0x1b4>)
 8002194:	71da      	strb	r2, [r3, #7]

	  			CAN_SendMessage(&hcan1,0x191,8, bytes);
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <StartDefaultTask+0x1b4>)
 8002198:	2208      	movs	r2, #8
 800219a:	f240 1191 	movw	r1, #401	; 0x191
 800219e:	480e      	ldr	r0, [pc, #56]	; (80021d8 <StartDefaultTask+0x1d8>)
 80021a0:	f7ff fa58 	bl	8001654 <CAN_SendMessage>
  {
 80021a4:	e730      	b.n	8002008 <StartDefaultTask+0x8>
 80021a6:	bf00      	nop
 80021a8:	f41f212d 	.word	0xf41f212d
 80021ac:	3fad566c 	.word	0x3fad566c
 80021b0:	20001a18 	.word	0x20001a18
 80021b4:	20001a38 	.word	0x20001a38
 80021b8:	20001a40 	.word	0x20001a40
 80021bc:	20001a4c 	.word	0x20001a4c
 80021c0:	20001a4d 	.word	0x20001a4d
 80021c4:	20001a4e 	.word	0x20001a4e
 80021c8:	20001a4f 	.word	0x20001a4f
 80021cc:	20001a48 	.word	0x20001a48
 80021d0:	20001a28 	.word	0x20001a28
 80021d4:	20001a50 	.word	0x20001a50
 80021d8:	200019b0 	.word	0x200019b0

080021dc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	adc = HAL_ADC_GetValue(&hadc1);
 80021e4:	4827      	ldr	r0, [pc, #156]	; (8002284 <StartTask02+0xa8>)
 80021e6:	f000 fca7 	bl	8002b38 <HAL_ADC_GetValue>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <StartTask02+0xac>)
 80021ee:	6013      	str	r3, [r2, #0]
	float min = -100;
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <StartTask02+0xb0>)
 80021f2:	60fb      	str	r3, [r7, #12]
	float max = 100;
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <StartTask02+0xb4>)
 80021f6:	60bb      	str	r3, [r7, #8]
	Commandstruct.SetSteerAngle = (float)((float)adc - 100.0f) * (float)(max - min) / (float)(2015.0f - 100.0f) + min;
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <StartTask02+0xac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fcc3 	bl	8000b88 <__aeabi_ui2f>
 8002202:	4603      	mov	r3, r0
 8002204:	4922      	ldr	r1, [pc, #136]	; (8002290 <StartTask02+0xb4>)
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fc0c 	bl	8000a24 <__aeabi_fsub>
 800220c:	4603      	mov	r3, r0
 800220e:	461c      	mov	r4, r3
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	68b8      	ldr	r0, [r7, #8]
 8002214:	f7fe fc06 	bl	8000a24 <__aeabi_fsub>
 8002218:	4603      	mov	r3, r0
 800221a:	4619      	mov	r1, r3
 800221c:	4620      	mov	r0, r4
 800221e:	f7fe fd0b 	bl	8000c38 <__aeabi_fmul>
 8002222:	4603      	mov	r3, r0
 8002224:	491b      	ldr	r1, [pc, #108]	; (8002294 <StartTask02+0xb8>)
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fdba 	bl	8000da0 <__aeabi_fdiv>
 800222c:	4603      	mov	r3, r0
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fbf9 	bl	8000a28 <__addsf3>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <StartTask02+0xbc>)
 800223c:	605a      	str	r2, [r3, #4]
	Commandstruct.SetSteerAngle = Commandstruct.SetSteerAngle > 540 ? 540 : Commandstruct.SetSteerAngle;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <StartTask02+0xbc>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4916      	ldr	r1, [pc, #88]	; (800229c <StartTask02+0xc0>)
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe feb3 	bl	8000fb0 <__aeabi_fcmpgt>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <StartTask02+0x78>
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <StartTask02+0xc0>)
 8002252:	e001      	b.n	8002258 <StartTask02+0x7c>
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <StartTask02+0xbc>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <StartTask02+0xbc>)
 800225a:	6053      	str	r3, [r2, #4]
	Commandstruct.SetSteerAngle = Commandstruct.SetSteerAngle < -540 ? -540 : Commandstruct.SetSteerAngle;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <StartTask02+0xbc>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	490f      	ldr	r1, [pc, #60]	; (80022a0 <StartTask02+0xc4>)
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fe86 	bl	8000f74 <__aeabi_fcmplt>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <StartTask02+0x96>
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <StartTask02+0xc4>)
 8002270:	e001      	b.n	8002276 <StartTask02+0x9a>
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <StartTask02+0xbc>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a08      	ldr	r2, [pc, #32]	; (8002298 <StartTask02+0xbc>)
 8002278:	6053      	str	r3, [r2, #4]
	osDelay(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f003 f848 	bl	8005310 <osDelay>
  {
 8002280:	e7b0      	b.n	80021e4 <StartTask02+0x8>
 8002282:	bf00      	nop
 8002284:	20001980 	.word	0x20001980
 8002288:	20001a34 	.word	0x20001a34
 800228c:	c2c80000 	.word	0xc2c80000
 8002290:	42c80000 	.word	0x42c80000
 8002294:	44ef6000 	.word	0x44ef6000
 8002298:	20001a28 	.word	0x20001a28
 800229c:	44070000 	.word	0x44070000
 80022a0:	c4070000 	.word	0xc4070000

080022a4 <HandBrake>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandBrake */
void HandBrake(void const * argument)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandBrake */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f003 f82f 	bl	8005310 <osDelay>
 80022b2:	e7fb      	b.n	80022ac <HandBrake+0x8>

080022b4 <StartStop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStop */
void StartStop(void const * argument)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStop */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022bc:	2001      	movs	r0, #1
 80022be:	f003 f827 	bl	8005310 <osDelay>
 80022c2:	e7fb      	b.n	80022bc <StartStop+0x8>

080022c4 <ParkBrake>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ParkBrake */
void ParkBrake(void const * argument)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ParkBrake */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f003 f81f 	bl	8005310 <osDelay>
 80022d2:	e7fb      	b.n	80022cc <ParkBrake+0x8>

080022d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022e6:	f000 fa85 	bl	80027f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40001000 	.word	0x40001000

080022f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002300:	e7fe      	b.n	8002300 <Error_Handler+0x8>
	...

08002304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_MspInit+0x68>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_MspInit+0x68>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6193      	str	r3, [r2, #24]
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_MspInit+0x68>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_MspInit+0x68>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_MspInit+0x68>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_MspInit+0x68>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	210f      	movs	r1, #15
 800233e:	f06f 0001 	mvn.w	r0, #1
 8002342:	f001 fcc6 	bl	8003cd2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_MspInit+0x6c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_MspInit+0x6c>)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40010000 	.word	0x40010000

08002374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <HAL_ADC_MspInit+0x6c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d121      	bne.n	80023d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_ADC_MspInit+0x70>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_ADC_MspInit+0x70>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_ADC_MspInit+0x70>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_ADC_MspInit+0x70>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_ADC_MspInit+0x70>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_ADC_MspInit+0x70>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023c4:	2340      	movs	r3, #64	; 0x40
 80023c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c8:	2303      	movs	r3, #3
 80023ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_ADC_MspInit+0x74>)
 80023d4:	f001 fca8 	bl	8003d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40012400 	.word	0x40012400
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010800 	.word	0x40010800

080023ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0320 	add.w	r3, r7, #32
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6a      	ldr	r2, [pc, #424]	; (80025b0 <HAL_CAN_MspInit+0x1c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d15d      	bne.n	80024c8 <HAL_CAN_MspInit+0xdc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800240c:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <HAL_CAN_MspInit+0x1c8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a68      	ldr	r2, [pc, #416]	; (80025b4 <HAL_CAN_MspInit+0x1c8>)
 8002414:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_CAN_MspInit+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10b      	bne.n	8002436 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800241e:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 8002424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 800243c:	f043 0308 	orr.w	r3, r3, #8
 8002440:	6193      	str	r3, [r2, #24]
 8002442:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4619      	mov	r1, r3
 8002462:	4856      	ldr	r0, [pc, #344]	; (80025bc <HAL_CAN_MspInit+0x1d0>)
 8002464:	f001 fc60 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0320 	add.w	r3, r7, #32
 800247a:	4619      	mov	r1, r3
 800247c:	484f      	ldr	r0, [pc, #316]	; (80025bc <HAL_CAN_MspInit+0x1d0>)
 800247e:	f001 fc53 	bl	8003d28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002482:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_CAN_MspInit+0x1d4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
 80024a0:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <HAL_CAN_MspInit+0x1d4>)
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2105      	movs	r1, #5
 80024aa:	2013      	movs	r0, #19
 80024ac:	f001 fc11 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80024b0:	2013      	movs	r0, #19
 80024b2:	f001 fc2a 	bl	8003d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2105      	movs	r1, #5
 80024ba:	2014      	movs	r0, #20
 80024bc:	f001 fc09 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80024c0:	2014      	movs	r0, #20
 80024c2:	f001 fc22 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80024c6:	e06f      	b.n	80025a8 <HAL_CAN_MspInit+0x1bc>
  else if(hcan->Instance==CAN2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3d      	ldr	r2, [pc, #244]	; (80025c4 <HAL_CAN_MspInit+0x1d8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d16a      	bne.n	80025a8 <HAL_CAN_MspInit+0x1bc>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a38      	ldr	r2, [pc, #224]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 80024d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024dc:	61d3      	str	r3, [r2, #28]
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80024ea:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_CAN_MspInit+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <HAL_CAN_MspInit+0x1c8>)
 80024f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_CAN_MspInit+0x1c8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10b      	bne.n	8002514 <HAL_CAN_MspInit+0x128>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a2d      	ldr	r2, [pc, #180]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 8002502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002506:	61d3      	str	r3, [r2, #28]
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 800251a:	f043 0308 	orr.w	r3, r3, #8
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_CAN_MspInit+0x1cc>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800252c:	2320      	movs	r3, #32
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	4619      	mov	r1, r3
 800253e:	481f      	ldr	r0, [pc, #124]	; (80025bc <HAL_CAN_MspInit+0x1d0>)
 8002540:	f001 fbf2 	bl	8003d28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002544:	2340      	movs	r3, #64	; 0x40
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 0320 	add.w	r3, r7, #32
 8002554:	4619      	mov	r1, r3
 8002556:	4819      	ldr	r0, [pc, #100]	; (80025bc <HAL_CAN_MspInit+0x1d0>)
 8002558:	f001 fbe6 	bl	8003d28 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_CAN_MspInit+0x1d4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
 8002572:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_CAN_MspInit+0x1d4>)
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2105      	movs	r1, #5
 800257c:	203f      	movs	r0, #63	; 0x3f
 800257e:	f001 fba8 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002582:	203f      	movs	r0, #63	; 0x3f
 8002584:	f001 fbc1 	bl	8003d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2105      	movs	r1, #5
 800258c:	2040      	movs	r0, #64	; 0x40
 800258e:	f001 fba0 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002592:	2040      	movs	r0, #64	; 0x40
 8002594:	f001 fbb9 	bl	8003d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2105      	movs	r1, #5
 800259c:	2041      	movs	r0, #65	; 0x41
 800259e:	f001 fb98 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80025a2:	2041      	movs	r0, #65	; 0x41
 80025a4:	f001 fbb1 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 80025a8:	bf00      	nop
 80025aa:	3738      	adds	r7, #56	; 0x38
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40006400 	.word	0x40006400
 80025b4:	20001a54 	.word	0x20001a54
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010c00 	.word	0x40010c00
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40006800 	.word	0x40006800

080025c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025de:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_InitTick+0xe8>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a33      	ldr	r2, [pc, #204]	; (80026b0 <HAL_InitTick+0xe8>)
 80025e4:	f043 0310 	orr.w	r3, r3, #16
 80025e8:	61d3      	str	r3, [r2, #28]
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_InitTick+0xe8>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025f6:	f107 0210 	add.w	r2, r7, #16
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fa3f 	bl	8004a84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002610:	f002 fa24 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 8002614:	6378      	str	r0, [r7, #52]	; 0x34
 8002616:	e004      	b.n	8002622 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002618:	f002 fa20 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 800261c:	4603      	mov	r3, r0
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	4a23      	ldr	r2, [pc, #140]	; (80026b4 <HAL_InitTick+0xec>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9b      	lsrs	r3, r3, #18
 800262c:	3b01      	subs	r3, #1
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_InitTick+0xf0>)
 8002632:	4a22      	ldr	r2, [pc, #136]	; (80026bc <HAL_InitTick+0xf4>)
 8002634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_InitTick+0xf0>)
 8002638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800263c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800263e:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <HAL_InitTick+0xf0>)
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_InitTick+0xf0>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_InitTick+0xf0>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_InitTick+0xf0>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002656:	4818      	ldr	r0, [pc, #96]	; (80026b8 <HAL_InitTick+0xf0>)
 8002658:	f002 fb94 	bl	8004d84 <HAL_TIM_Base_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002662:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11b      	bne.n	80026a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800266a:	4813      	ldr	r0, [pc, #76]	; (80026b8 <HAL_InitTick+0xf0>)
 800266c:	f002 fbe2 	bl	8004e34 <HAL_TIM_Base_Start_IT>
 8002670:	4603      	mov	r3, r0
 8002672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002676:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800267a:	2b00      	cmp	r3, #0
 800267c:	d111      	bne.n	80026a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800267e:	2036      	movs	r0, #54	; 0x36
 8002680:	f001 fb43 	bl	8003d0a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b0f      	cmp	r3, #15
 8002688:	d808      	bhi.n	800269c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800268a:	2200      	movs	r2, #0
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	2036      	movs	r0, #54	; 0x36
 8002690:	f001 fb1f 	bl	8003cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_InitTick+0xf8>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e002      	b.n	80026a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	431bde83 	.word	0x431bde83
 80026b8:	20001a58 	.word	0x20001a58
 80026bc:	40001000 	.word	0x40001000
 80026c0:	20000004 	.word	0x20000004

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler+0x4>

080026ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <CAN1_TX_IRQHandler+0x10>)
 80026f6:	f001 f826 	bl	8003746 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200019b0 	.word	0x200019b0

08002704 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	CAN_GetMessage(&hcan1);
 8002708:	4803      	ldr	r0, [pc, #12]	; (8002718 <CAN1_RX0_IRQHandler+0x14>)
 800270a:	f7ff f861 	bl	80017d0 <CAN_GetMessage>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800270e:	4802      	ldr	r0, [pc, #8]	; (8002718 <CAN1_RX0_IRQHandler+0x14>)
 8002710:	f001 f819 	bl	8003746 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200019b0 	.word	0x200019b0

0800271c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <TIM6_IRQHandler+0x10>)
 8002722:	f002 fbe1 	bl	8004ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20001a58 	.word	0x20001a58

08002730 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <CAN2_TX_IRQHandler+0x10>)
 8002736:	f001 f806 	bl	8003746 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200019d8 	.word	0x200019d8

08002744 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	CAN_GetMessage(&hcan2);
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <CAN2_RX0_IRQHandler+0x14>)
 800274a:	f7ff f841 	bl	80017d0 <CAN_GetMessage>
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800274e:	4802      	ldr	r0, [pc, #8]	; (8002758 <CAN2_RX0_IRQHandler+0x14>)
 8002750:	f000 fff9 	bl	8003746 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200019d8 	.word	0x200019d8

0800275c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <CAN2_RX1_IRQHandler+0x10>)
 8002762:	f000 fff0 	bl	8003746 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200019d8 	.word	0x200019d8

08002770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800277c:	f7ff fff8 	bl	8002770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002782:	490c      	ldr	r1, [pc, #48]	; (80027b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002788:	e002      	b.n	8002790 <LoopCopyDataInit>

0800278a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800278c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278e:	3304      	adds	r3, #4

08002790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002794:	d3f9      	bcc.n	800278a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002798:	4c09      	ldr	r4, [pc, #36]	; (80027c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800279c:	e001      	b.n	80027a2 <LoopFillZerobss>

0800279e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a0:	3204      	adds	r2, #4

080027a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a4:	d3fb      	bcc.n	800279e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027a6:	f004 fe29 	bl	80073fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027aa:	f7ff f9b5 	bl	8001b18 <main>
  bx lr
 80027ae:	4770      	bx	lr
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80027b8:	080075bc 	.word	0x080075bc
  ldr r2, =_sbss
 80027bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80027c0:	20002bf0 	.word	0x20002bf0

080027c4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC1_2_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_Init+0x28>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_Init+0x28>)
 80027d2:	f043 0310 	orr.w	r3, r3, #16
 80027d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f001 fa6f 	bl	8003cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7ff fef2 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e4:	f7ff fd8e 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x1c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_IncTick+0x20>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_IncTick+0x20>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000008 	.word	0x20000008
 8002814:	20001aa0 	.word	0x20001aa0

08002818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <HAL_GetTick+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	20001aa0 	.word	0x20001aa0

0800282c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0be      	b.n	80029cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fd82 	bl	8002374 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fabf 	bl	8002df4 <ADC_ConversionStop_Disable>
 8002876:	4603      	mov	r3, r0
 8002878:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 8099 	bne.w	80029ba <HAL_ADC_Init+0x18e>
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 8095 	bne.w	80029ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002898:	f023 0302 	bic.w	r3, r3, #2
 800289c:	f043 0202 	orr.w	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7b1b      	ldrb	r3, [r3, #12]
 80028b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c4:	d003      	beq.n	80028ce <HAL_ADC_Init+0xa2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_ADC_Init+0xa8>
 80028ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d2:	e000      	b.n	80028d6 <HAL_ADC_Init+0xaa>
 80028d4:	2300      	movs	r3, #0
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7d1b      	ldrb	r3, [r3, #20]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d119      	bne.n	8002918 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7b1b      	ldrb	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	035a      	lsls	r2, r3, #13
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e00b      	b.n	8002918 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_ADC_Init+0x1a8>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	430b      	orrs	r3, r1
 800293e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002948:	d003      	beq.n	8002952 <HAL_ADC_Init+0x126>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d104      	bne.n	800295c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	3b01      	subs	r3, #1
 8002958:	051b      	lsls	r3, r3, #20
 800295a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	430a      	orrs	r2, r1
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_ADC_Init+0x1ac>)
 8002978:	4013      	ands	r3, r2
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002996:	e018      	b.n	80029ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f023 0312 	bic.w	r3, r3, #18
 80029a0:	f043 0210 	orr.w	r2, r3, #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029b8:	e007      	b.n	80029ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	ffe1f7fd 	.word	0xffe1f7fd
 80029d8:	ff1f0efe 	.word	0xff1f0efe

080029dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Start+0x1a>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e098      	b.n	8002b28 <HAL_ADC_Start+0x14c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f99e 	bl	8002d40 <ADC_Enable>
 8002a04:	4603      	mov	r3, r0
 8002a06:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 8087 	bne.w	8002b1e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <HAL_ADC_Start+0x154>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d105      	bne.n	8002a3a <HAL_ADC_Start+0x5e>
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_ADC_Start+0x158>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d115      	bne.n	8002a66 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d026      	beq.n	8002aa2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a64:	e01d      	b.n	8002aa2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2f      	ldr	r2, [pc, #188]	; (8002b34 <HAL_ADC_Start+0x158>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_ADC_Start+0xaa>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_ADC_Start+0x154>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10d      	bne.n	8002aa2 <HAL_ADC_Start+0xc6>
 8002a86:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_ADC_Start+0x158>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f023 0206 	bic.w	r2, r3, #6
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aba:	e002      	b.n	8002ac2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0202 	mvn.w	r2, #2
 8002ad2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ade:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ae2:	d113      	bne.n	8002b0c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ae8:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <HAL_ADC_Start+0x154>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d105      	bne.n	8002afa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_ADC_Start+0x158>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	e00c      	b.n	8002b26 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	e003      	b.n	8002b26 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40012800 	.word	0x40012800
 8002b34:	40012400 	.word	0x40012400

08002b38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x20>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0dc      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1da>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d81c      	bhi.n	8002bba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b05      	subs	r3, #5
 8002b92:	221f      	movs	r2, #31
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	4019      	ands	r1, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	3b05      	subs	r3, #5
 8002bac:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb8:	e03c      	b.n	8002c34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d81c      	bhi.n	8002bfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b23      	subs	r3, #35	; 0x23
 8002bd4:	221f      	movs	r2, #31
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	4019      	ands	r1, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	3b23      	subs	r3, #35	; 0x23
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfa:	e01b      	b.n	8002c34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b41      	subs	r3, #65	; 0x41
 8002c0e:	221f      	movs	r2, #31
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	4019      	ands	r1, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	3b41      	subs	r3, #65	; 0x41
 8002c28:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d91c      	bls.n	8002c76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68d9      	ldr	r1, [r3, #12]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b1e      	subs	r3, #30
 8002c4e:	2207      	movs	r2, #7
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	4019      	ands	r1, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6898      	ldr	r0, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	3b1e      	subs	r3, #30
 8002c68:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	e019      	b.n	8002caa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6919      	ldr	r1, [r3, #16]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	2207      	movs	r2, #7
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4019      	ands	r1, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6898      	ldr	r0, [r3, #8]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d003      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cb6:	2b11      	cmp	r3, #17
 8002cb8:	d132      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <HAL_ADC_ConfigChannel+0x1e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d125      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d126      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ce0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d11a      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <HAL_ADC_ConfigChannel+0x1ec>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	0c9a      	lsrs	r2, r3, #18
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x1b2>
 8002d0e:	e007      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012400 	.word	0x40012400
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	431bde83 	.word	0x431bde83

08002d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d040      	beq.n	8002de0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <ADC_Enable+0xac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <ADC_Enable+0xb0>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d7c:	e002      	b.n	8002d84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f9      	bne.n	8002d7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d8a:	f7ff fd45 	bl	8002818 <HAL_GetTick>
 8002d8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d90:	e01f      	b.n	8002dd2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d92:	f7ff fd41 	bl	8002818 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d918      	bls.n	8002dd2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d011      	beq.n	8002dd2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f043 0210 	orr.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e007      	b.n	8002de2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d1d8      	bne.n	8002d92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000000 	.word	0x20000000
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d12e      	bne.n	8002e6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e1e:	f7ff fcfb 	bl	8002818 <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e24:	e01b      	b.n	8002e5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e26:	f7ff fcf7 	bl	8002818 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d914      	bls.n	8002e5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f043 0210 	orr.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e007      	b.n	8002e6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d0dc      	beq.n	8002e26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ed      	b.n	8003064 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff faa9 	bl	80023ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eaa:	f7ff fcb5 	bl	8002818 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb0:	e012      	b.n	8002ed8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb2:	f7ff fcb1 	bl	8002818 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b0a      	cmp	r3, #10
 8002ebe:	d90b      	bls.n	8002ed8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2205      	movs	r2, #5
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0c5      	b.n	8003064 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0e5      	beq.n	8002eb2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0202 	bic.w	r2, r2, #2
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef6:	f7ff fc8f 	bl	8002818 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002efc:	e012      	b.n	8002f24 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002efe:	f7ff fc8b 	bl	8002818 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b0a      	cmp	r3, #10
 8002f0a:	d90b      	bls.n	8002f24 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e09f      	b.n	8003064 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7e1b      	ldrb	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e5b      	ldrb	r3, [r3, #25]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d108      	bne.n	8002f76 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e007      	b.n	8002f86 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7e9b      	ldrb	r3, [r3, #26]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d108      	bne.n	8002fa0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0220 	orr.w	r2, r2, #32
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e007      	b.n	8002fb0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0220 	bic.w	r2, r2, #32
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7edb      	ldrb	r3, [r3, #27]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0210 	bic.w	r2, r2, #16
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e007      	b.n	8002fda <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0210 	orr.w	r2, r2, #16
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0208 	bic.w	r2, r2, #8
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7f5b      	ldrb	r3, [r3, #29]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0204 	orr.w	r2, r2, #4
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0204 	bic.w	r2, r2, #4
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	ea42 0103 	orr.w	r1, r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003082:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <HAL_CAN_ConfigFilter+0x26>
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b02      	cmp	r3, #2
 800308e:	f040 80be 	bne.w	800320e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_CAN_ConfigFilter+0x1bc>)
 8003094:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	431a      	orrs	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2201      	movs	r2, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	401a      	ands	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d123      	bne.n	800313c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003116:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3248      	adds	r2, #72	; 0x48
 800311c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003130:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	3348      	adds	r3, #72	; 0x48
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d122      	bne.n	800318a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	431a      	orrs	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003164:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3248      	adds	r2, #72	; 0x48
 800316a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800317e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	3348      	adds	r3, #72	; 0x48
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43db      	mvns	r3, r3
 800319c:	401a      	ands	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031a4:	e007      	b.n	80031b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	401a      	ands	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80031d0:	e007      	b.n	80031e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	431a      	orrs	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003200:	f023 0201 	bic.w	r2, r3, #1
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e006      	b.n	800321c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40006400 	.word	0x40006400

0800322c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d12e      	bne.n	800329e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003258:	f7ff fade 	bl	8002818 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800325e:	e012      	b.n	8003286 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003260:	f7ff fada 	bl	8002818 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b0a      	cmp	r3, #10
 800326c:	d90b      	bls.n	8003286 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2205      	movs	r2, #5
 800327e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e012      	b.n	80032ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e5      	bne.n	8003260 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e006      	b.n	80032ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d003      	beq.n	80032e0 <HAL_CAN_AddTxMessage+0x2c>
 80032d8:	7ffb      	ldrb	r3, [r7, #31]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	f040 80ad 	bne.w	800343a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8095 	beq.w	800342a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	0e1b      	lsrs	r3, r3, #24
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800330a:	2201      	movs	r2, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	409a      	lsls	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	6809      	ldr	r1, [r1, #0]
 800332a:	431a      	orrs	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3318      	adds	r3, #24
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	440b      	add	r3, r1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e00f      	b.n	8003358 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003342:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800334c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3318      	adds	r3, #24
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	440b      	add	r3, r1
 8003356:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3318      	adds	r3, #24
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	440b      	add	r3, r1
 8003368:	3304      	adds	r3, #4
 800336a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	7d1b      	ldrb	r3, [r3, #20]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d111      	bne.n	8003398 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3318      	adds	r3, #24
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	4413      	add	r3, r2
 8003380:	3304      	adds	r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	6811      	ldr	r1, [r2, #0]
 8003388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3318      	adds	r3, #24
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	440b      	add	r3, r1
 8003394:	3304      	adds	r3, #4
 8003396:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3307      	adds	r3, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	061a      	lsls	r2, r3, #24
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3306      	adds	r3, #6
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3305      	adds	r3, #5
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	4313      	orrs	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	3204      	adds	r2, #4
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	4610      	mov	r0, r2
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	6811      	ldr	r1, [r2, #0]
 80033c0:	ea43 0200 	orr.w	r2, r3, r0
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3303      	adds	r3, #3
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	061a      	lsls	r2, r3, #24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3302      	adds	r3, #2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3301      	adds	r3, #1
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	4313      	orrs	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	4610      	mov	r0, r2
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	ea43 0200 	orr.w	r2, r3, r0
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	440b      	add	r3, r1
 8003400:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003404:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3318      	adds	r3, #24
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	4413      	add	r3, r2
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	6811      	ldr	r1, [r2, #0]
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3318      	adds	r3, #24
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	440b      	add	r3, r1
 8003424:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e00e      	b.n	8003448 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e006      	b.n	8003448 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3724      	adds	r7, #36	; 0x24
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003464:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d002      	beq.n	8003472 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d11d      	bne.n	80034ae <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3301      	adds	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d003      	beq.n	80034de <HAL_CAN_GetRxMessage+0x24>
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	f040 8103 	bne.w	80036e4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10e      	bne.n	8003502 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0f7      	b.n	80036f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0e8      	b.n	80036f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	331b      	adds	r3, #27
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4413      	add	r3, r2
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0204 	and.w	r2, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	331b      	adds	r3, #27
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4413      	add	r3, r2
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0d5b      	lsrs	r3, r3, #21
 800354e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00b      	b.n	8003570 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	331b      	adds	r3, #27
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	08db      	lsrs	r3, r3, #3
 8003568:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	331b      	adds	r3, #27
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	4413      	add	r3, r2
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0202 	and.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	331b      	adds	r3, #27
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	611a      	str	r2, [r3, #16]
 80035a4:	e00b      	b.n	80035be <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	331b      	adds	r3, #27
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	4413      	add	r3, r2
 80035b2:	3304      	adds	r3, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 020f 	and.w	r2, r3, #15
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	331b      	adds	r3, #27
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	331b      	adds	r3, #27
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	4413      	add	r3, r2
 800360e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0a1a      	lsrs	r2, r3, #8
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	4413      	add	r3, r2
 8003628:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0c1a      	lsrs	r2, r3, #16
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	3302      	adds	r3, #2
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	4413      	add	r3, r2
 8003642:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e1a      	lsrs	r2, r3, #24
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	3303      	adds	r3, #3
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	4413      	add	r3, r2
 800365c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	3304      	adds	r3, #4
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0a1a      	lsrs	r2, r3, #8
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	3305      	adds	r3, #5
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	4413      	add	r3, r2
 800368e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0c1a      	lsrs	r2, r3, #16
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	3306      	adds	r3, #6
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e1a      	lsrs	r2, r3, #24
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	3307      	adds	r3, #7
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0220 	orr.w	r2, r2, #32
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	e007      	b.n	80036e0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0220 	orr.w	r2, r2, #32
 80036de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e006      	b.n	80036f2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d002      	beq.n	800371a <HAL_CAN_ActivateNotification+0x1e>
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d109      	bne.n	800372e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6959      	ldr	r1, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e006      	b.n	800373c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
  }
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08a      	sub	sp, #40	; 0x28
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d07c      	beq.n	8003886 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d023      	beq.n	80037de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2201      	movs	r2, #1
 800379c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fd fe51 	bl	8001450 <HAL_CAN_TxMailbox0CompleteCallback>
 80037ae:	e016      	b.n	80037de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	e00c      	b.n	80037de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e002      	b.n	80037de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f96b 	bl	8003ab4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d024      	beq.n	8003832 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7fd fe7d 	bl	80014fc <HAL_CAN_TxMailbox1CompleteCallback>
 8003802:	e016      	b.n	8003832 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e00c      	b.n	8003832 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	e002      	b.n	8003832 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f94a 	bl	8003ac6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d024      	beq.n	8003886 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003844:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd fea9 	bl	80015a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003856:	e016      	b.n	8003886 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	e00c      	b.n	8003886 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	e002      	b.n	8003886 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f929 	bl	8003ad8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00c      	beq.n	80038aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2210      	movs	r2, #16
 80038a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2208      	movs	r2, #8
 80038c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f918 	bl	8003afc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f900 	bl	8003aea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003904:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2208      	movs	r2, #8
 8003928:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8f8 	bl	8003b20 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8e0 	bl	8003b0e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2210      	movs	r2, #16
 8003968:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8e1 	bl	8003b32 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2208      	movs	r2, #8
 800398a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8d9 	bl	8003b44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d07b      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d072      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d043      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03e      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a14:	2b60      	cmp	r3, #96	; 0x60
 8003a16:	d02b      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x32a>
 8003a18:	2b60      	cmp	r3, #96	; 0x60
 8003a1a:	d82e      	bhi.n	8003a7a <HAL_CAN_IRQHandler+0x334>
 8003a1c:	2b50      	cmp	r3, #80	; 0x50
 8003a1e:	d022      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x320>
 8003a20:	2b50      	cmp	r3, #80	; 0x50
 8003a22:	d82a      	bhi.n	8003a7a <HAL_CAN_IRQHandler+0x334>
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d019      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x316>
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d826      	bhi.n	8003a7a <HAL_CAN_IRQHandler+0x334>
 8003a2c:	2b30      	cmp	r3, #48	; 0x30
 8003a2e:	d010      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x30c>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d822      	bhi.n	8003a7a <HAL_CAN_IRQHandler+0x334>
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d002      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x2f8>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d005      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a3c:	e01d      	b.n	8003a7a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	f043 0308 	orr.w	r3, r3, #8
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a46:	e019      	b.n	8003a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f043 0310 	orr.w	r3, r3, #16
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a50:	e014      	b.n	8003a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f043 0320 	orr.w	r3, r3, #32
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5a:	e00f      	b.n	8003a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a64:	e00a      	b.n	8003a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a6e:	e005      	b.n	8003a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a78:	e000      	b.n	8003a7c <HAL_CAN_IRQHandler+0x336>
            break;
 8003a7a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a8a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2204      	movs	r2, #4
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f855 	bl	8003b56 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aac:	bf00      	nop
 8003aae:	3728      	adds	r7, #40	; 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b84:	4013      	ands	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60d3      	str	r3, [r2, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 0307 	and.w	r3, r3, #7
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db0b      	blt.n	8003bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4906      	ldr	r1, [pc, #24]	; (8003c00 <__NVIC_EnableIRQ+0x34>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2001      	movs	r0, #1
 8003bee:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	e000e100 	.word	0xe000e100

08003c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db0a      	blt.n	8003c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	490c      	ldr	r1, [pc, #48]	; (8003c50 <__NVIC_SetPriority+0x4c>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	440b      	add	r3, r1
 8003c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c2c:	e00a      	b.n	8003c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4908      	ldr	r1, [pc, #32]	; (8003c54 <__NVIC_SetPriority+0x50>)
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	761a      	strb	r2, [r3, #24]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e100 	.word	0xe000e100
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	bf28      	it	cs
 8003c76:	2304      	movcs	r3, #4
 8003c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d902      	bls.n	8003c88 <NVIC_EncodePriority+0x30>
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3b03      	subs	r3, #3
 8003c86:	e000      	b.n	8003c8a <NVIC_EncodePriority+0x32>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43d9      	mvns	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb0:	4313      	orrs	r3, r2
         );
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff4f 	bl	8003b68 <__NVIC_SetPriorityGrouping>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce4:	f7ff ff64 	bl	8003bb0 <__NVIC_GetPriorityGrouping>
 8003ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ffb2 	bl	8003c58 <NVIC_EncodePriority>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff81 	bl	8003c04 <__NVIC_SetPriority>
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	4603      	mov	r3, r0
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff57 	bl	8003bcc <__NVIC_EnableIRQ>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b08b      	sub	sp, #44	; 0x2c
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d3a:	e169      	b.n	8004010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	f040 8158 	bne.w	800400a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a9a      	ldr	r2, [pc, #616]	; (8003fc8 <HAL_GPIO_Init+0x2a0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d05e      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d64:	4a98      	ldr	r2, [pc, #608]	; (8003fc8 <HAL_GPIO_Init+0x2a0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d875      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d6a:	4a98      	ldr	r2, [pc, #608]	; (8003fcc <HAL_GPIO_Init+0x2a4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d058      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d70:	4a96      	ldr	r2, [pc, #600]	; (8003fcc <HAL_GPIO_Init+0x2a4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d86f      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d76:	4a96      	ldr	r2, [pc, #600]	; (8003fd0 <HAL_GPIO_Init+0x2a8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d052      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d7c:	4a94      	ldr	r2, [pc, #592]	; (8003fd0 <HAL_GPIO_Init+0x2a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d869      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d82:	4a94      	ldr	r2, [pc, #592]	; (8003fd4 <HAL_GPIO_Init+0x2ac>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04c      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d88:	4a92      	ldr	r2, [pc, #584]	; (8003fd4 <HAL_GPIO_Init+0x2ac>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d863      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d8e:	4a92      	ldr	r2, [pc, #584]	; (8003fd8 <HAL_GPIO_Init+0x2b0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d046      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d94:	4a90      	ldr	r2, [pc, #576]	; (8003fd8 <HAL_GPIO_Init+0x2b0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d85d      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d9a:	2b12      	cmp	r3, #18
 8003d9c:	d82a      	bhi.n	8003df4 <HAL_GPIO_Init+0xcc>
 8003d9e:	2b12      	cmp	r3, #18
 8003da0:	d859      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_GPIO_Init+0x80>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003e23 	.word	0x08003e23
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003e0f 	.word	0x08003e0f
 8003db4:	08003e51 	.word	0x08003e51
 8003db8:	08003e57 	.word	0x08003e57
 8003dbc:	08003e57 	.word	0x08003e57
 8003dc0:	08003e57 	.word	0x08003e57
 8003dc4:	08003e57 	.word	0x08003e57
 8003dc8:	08003e57 	.word	0x08003e57
 8003dcc:	08003e57 	.word	0x08003e57
 8003dd0:	08003e57 	.word	0x08003e57
 8003dd4:	08003e57 	.word	0x08003e57
 8003dd8:	08003e57 	.word	0x08003e57
 8003ddc:	08003e57 	.word	0x08003e57
 8003de0:	08003e57 	.word	0x08003e57
 8003de4:	08003e57 	.word	0x08003e57
 8003de8:	08003e57 	.word	0x08003e57
 8003dec:	08003e05 	.word	0x08003e05
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	4a79      	ldr	r2, [pc, #484]	; (8003fdc <HAL_GPIO_Init+0x2b4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dfa:	e02c      	b.n	8003e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	623b      	str	r3, [r7, #32]
          break;
 8003e02:	e029      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	623b      	str	r3, [r7, #32]
          break;
 8003e0c:	e024      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	3308      	adds	r3, #8
 8003e14:	623b      	str	r3, [r7, #32]
          break;
 8003e16:	e01f      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	623b      	str	r3, [r7, #32]
          break;
 8003e20:	e01a      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	623b      	str	r3, [r7, #32]
          break;
 8003e2e:	e013      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e38:	2308      	movs	r3, #8
 8003e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	611a      	str	r2, [r3, #16]
          break;
 8003e42:	e009      	b.n	8003e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e44:	2308      	movs	r3, #8
 8003e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	615a      	str	r2, [r3, #20]
          break;
 8003e4e:	e003      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
          break;
 8003e54:	e000      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          break;
 8003e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2bff      	cmp	r3, #255	; 0xff
 8003e5c:	d801      	bhi.n	8003e62 <HAL_GPIO_Init+0x13a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	e001      	b.n	8003e66 <HAL_GPIO_Init+0x13e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2bff      	cmp	r3, #255	; 0xff
 8003e6c:	d802      	bhi.n	8003e74 <HAL_GPIO_Init+0x14c>
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	e002      	b.n	8003e7a <HAL_GPIO_Init+0x152>
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	3b08      	subs	r3, #8
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	210f      	movs	r1, #15
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	431a      	orrs	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80b1 	beq.w	800400a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ea8:	4b4d      	ldr	r3, [pc, #308]	; (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6193      	str	r3, [r2, #24]
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ec0:	4a48      	ldr	r2, [pc, #288]	; (8003fe4 <HAL_GPIO_Init+0x2bc>)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a40      	ldr	r2, [pc, #256]	; (8003fe8 <HAL_GPIO_Init+0x2c0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_GPIO_Init+0x1ec>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	; (8003fec <HAL_GPIO_Init+0x2c4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00d      	beq.n	8003f10 <HAL_GPIO_Init+0x1e8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3e      	ldr	r2, [pc, #248]	; (8003ff0 <HAL_GPIO_Init+0x2c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <HAL_GPIO_Init+0x1e4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	; (8003ff4 <HAL_GPIO_Init+0x2cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_GPIO_Init+0x1e0>
 8003f04:	2303      	movs	r3, #3
 8003f06:	e006      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	e004      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e002      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f14:	2300      	movs	r3, #0
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	f002 0203 	and.w	r2, r2, #3
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	4093      	lsls	r3, r2
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f26:	492f      	ldr	r1, [pc, #188]	; (8003fe4 <HAL_GPIO_Init+0x2bc>)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f40:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	492c      	ldr	r1, [pc, #176]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
 8003f4c:	e006      	b.n	8003f5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4928      	ldr	r1, [pc, #160]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	4922      	ldr	r1, [pc, #136]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	491e      	ldr	r1, [pc, #120]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4918      	ldr	r1, [pc, #96]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	e006      	b.n	8003fac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	4914      	ldr	r1, [pc, #80]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
 8003fc4:	e021      	b.n	800400a <HAL_GPIO_Init+0x2e2>
 8003fc6:	bf00      	nop
 8003fc8:	10320000 	.word	0x10320000
 8003fcc:	10310000 	.word	0x10310000
 8003fd0:	10220000 	.word	0x10220000
 8003fd4:	10210000 	.word	0x10210000
 8003fd8:	10120000 	.word	0x10120000
 8003fdc:	10110000 	.word	0x10110000
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010800 	.word	0x40010800
 8003fec:	40010c00 	.word	0x40010c00
 8003ff0:	40011000 	.word	0x40011000
 8003ff4:	40011400 	.word	0x40011400
 8003ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_GPIO_Init+0x304>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	43db      	mvns	r3, r3
 8004004:	4909      	ldr	r1, [pc, #36]	; (800402c <HAL_GPIO_Init+0x304>)
 8004006:	4013      	ands	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	3301      	adds	r3, #1
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f47f ae8e 	bne.w	8003d3c <HAL_GPIO_Init+0x14>
  }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	372c      	adds	r7, #44	; 0x2c
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40010400 	.word	0x40010400

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800404c:	e003      	b.n	8004056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	041a      	lsls	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e304      	b.n	800467c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8087 	beq.w	800418e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004080:	4b92      	ldr	r3, [pc, #584]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	2b04      	cmp	r3, #4
 800408a:	d00c      	beq.n	80040a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800408c:	4b8f      	ldr	r3, [pc, #572]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d112      	bne.n	80040be <HAL_RCC_OscConfig+0x5e>
 8004098:	4b8c      	ldr	r3, [pc, #560]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a4:	d10b      	bne.n	80040be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a6:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d06c      	beq.n	800418c <HAL_RCC_OscConfig+0x12c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d168      	bne.n	800418c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e2de      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x76>
 80040c8:	4b80      	ldr	r3, [pc, #512]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a7f      	ldr	r2, [pc, #508]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80040ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e02e      	b.n	8004134 <HAL_RCC_OscConfig+0xd4>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x98>
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7a      	ldr	r2, [pc, #488]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80040e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b78      	ldr	r3, [pc, #480]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a77      	ldr	r2, [pc, #476]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80040f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e01d      	b.n	8004134 <HAL_RCC_OscConfig+0xd4>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0xbc>
 8004102:	4b72      	ldr	r3, [pc, #456]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a71      	ldr	r2, [pc, #452]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6e      	ldr	r2, [pc, #440]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0xd4>
 800411c:	4b6b      	ldr	r3, [pc, #428]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b68      	ldr	r3, [pc, #416]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a67      	ldr	r2, [pc, #412]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 800412e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fe fb6c 	bl	8002818 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe fb68 	bl	8002818 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e292      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0xe4>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fe fb58 	bl	8002818 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fe fb54 	bl	8002818 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e27e      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	4b53      	ldr	r3, [pc, #332]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x10c>
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d063      	beq.n	8004262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419a:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041a6:	4b49      	ldr	r3, [pc, #292]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d11c      	bne.n	80041ec <HAL_RCC_OscConfig+0x18c>
 80041b2:	4b46      	ldr	r3, [pc, #280]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041be:	4b43      	ldr	r3, [pc, #268]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_RCC_OscConfig+0x176>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e252      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4939      	ldr	r1, [pc, #228]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	e03a      	b.n	8004262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f4:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <HAL_RCC_OscConfig+0x270>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fa:	f7fe fb0d 	bl	8002818 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004202:	f7fe fb09 	bl	8002818 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e233      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4927      	ldr	r1, [pc, #156]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
 8004234:	e015      	b.n	8004262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004236:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <HAL_RCC_OscConfig+0x270>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe faec 	bl	8002818 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004244:	f7fe fae8 	bl	8002818 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e212      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d03a      	beq.n	80042e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d019      	beq.n	80042aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427c:	f7fe facc 	bl	8002818 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004284:	f7fe fac8 	bl	8002818 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1f2      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <HAL_RCC_OscConfig+0x26c>)
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042a2:	2001      	movs	r0, #1
 80042a4:	f000 fc1e 	bl	8004ae4 <RCC_Delay>
 80042a8:	e01c      	b.n	80042e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b0:	f7fe fab2 	bl	8002818 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b6:	e00f      	b.n	80042d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b8:	f7fe faae 	bl	8002818 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d908      	bls.n	80042d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e1d8      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	42420000 	.word	0x42420000
 80042d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	4b9b      	ldr	r3, [pc, #620]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e9      	bne.n	80042b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a6 	beq.w	800443e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f6:	4b94      	ldr	r3, [pc, #592]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10d      	bne.n	800431e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004302:	4b91      	ldr	r3, [pc, #580]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4a90      	ldr	r2, [pc, #576]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	61d3      	str	r3, [r2, #28]
 800430e:	4b8e      	ldr	r3, [pc, #568]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	4b8b      	ldr	r3, [pc, #556]	; (800454c <HAL_RCC_OscConfig+0x4ec>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d118      	bne.n	800435c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432a:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x4ec>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a87      	ldr	r2, [pc, #540]	; (800454c <HAL_RCC_OscConfig+0x4ec>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004336:	f7fe fa6f 	bl	8002818 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433e:	f7fe fa6b 	bl	8002818 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	; 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e195      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	4b7e      	ldr	r3, [pc, #504]	; (800454c <HAL_RCC_OscConfig+0x4ec>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x312>
 8004364:	4b78      	ldr	r3, [pc, #480]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a77      	ldr	r2, [pc, #476]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	e02d      	b.n	80043ce <HAL_RCC_OscConfig+0x36e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x334>
 800437a:	4b73      	ldr	r3, [pc, #460]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	4a72      	ldr	r2, [pc, #456]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6213      	str	r3, [r2, #32]
 8004386:	4b70      	ldr	r3, [pc, #448]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4a6f      	ldr	r2, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	6213      	str	r3, [r2, #32]
 8004392:	e01c      	b.n	80043ce <HAL_RCC_OscConfig+0x36e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b05      	cmp	r3, #5
 800439a:	d10c      	bne.n	80043b6 <HAL_RCC_OscConfig+0x356>
 800439c:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	4a69      	ldr	r2, [pc, #420]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	6213      	str	r3, [r2, #32]
 80043a8:	4b67      	ldr	r3, [pc, #412]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4a66      	ldr	r2, [pc, #408]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	e00b      	b.n	80043ce <HAL_RCC_OscConfig+0x36e>
 80043b6:	4b64      	ldr	r3, [pc, #400]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	4a63      	ldr	r2, [pc, #396]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6213      	str	r3, [r2, #32]
 80043c2:	4b61      	ldr	r3, [pc, #388]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4a60      	ldr	r2, [pc, #384]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043c8:	f023 0304 	bic.w	r3, r3, #4
 80043cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d015      	beq.n	8004402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d6:	f7fe fa1f 	bl	8002818 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043de:	f7fe fa1b 	bl	8002818 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e143      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f4:	4b54      	ldr	r3, [pc, #336]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ee      	beq.n	80043de <HAL_RCC_OscConfig+0x37e>
 8004400:	e014      	b.n	800442c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004402:	f7fe fa09 	bl	8002818 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe fa05 	bl	8002818 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e12d      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004420:	4b49      	ldr	r3, [pc, #292]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ee      	bne.n	800440a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b45      	ldr	r3, [pc, #276]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4a44      	ldr	r2, [pc, #272]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 808c 	beq.w	8004560 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004448:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d10e      	bne.n	8004474 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004456:	4b3c      	ldr	r3, [pc, #240]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800445e:	2b08      	cmp	r3, #8
 8004460:	d108      	bne.n	8004474 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004462:	4b39      	ldr	r3, [pc, #228]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e103      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	2b02      	cmp	r3, #2
 800447a:	d14e      	bne.n	800451a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800447c:	4b32      	ldr	r3, [pc, #200]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004488:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0ef      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800449c:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCC_OscConfig+0x4f0>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe f9b9 	bl	8002818 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044aa:	f7fe f9b5 	bl	8002818 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	; 0x64
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e0df      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	491c      	ldr	r1, [pc, #112]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4918      	ldr	r1, [pc, #96]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80044ec:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_RCC_OscConfig+0x4f0>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f2:	f7fe f991 	bl	8002818 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044fa:	f7fe f98d 	bl	8002818 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0b7      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800450c:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x49a>
 8004518:	e022      	b.n	8004560 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <HAL_RCC_OscConfig+0x4e8>)
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_RCC_OscConfig+0x4f0>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe f974 	bl	8002818 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004532:	e00f      	b.n	8004554 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004534:	f7fe f970 	bl	8002818 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d908      	bls.n	8004554 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e09a      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40007000 	.word	0x40007000
 8004550:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e9      	bne.n	8004534 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8088 	beq.w	800467a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800456a:	4b46      	ldr	r3, [pc, #280]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d068      	beq.n	8004648 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d14d      	bne.n	800461a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b42      	ldr	r3, [pc, #264]	; (8004688 <HAL_RCC_OscConfig+0x628>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fe f948 	bl	8002818 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fe f944 	bl	8002818 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e06e      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800459e:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d10f      	bne.n	80045d4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80045b4:	4b33      	ldr	r3, [pc, #204]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4931      	ldr	r1, [pc, #196]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045c2:	4b30      	ldr	r3, [pc, #192]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f023 020f 	bic.w	r2, r3, #15
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	492d      	ldr	r1, [pc, #180]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d4:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	430b      	orrs	r3, r1
 80045e6:	4927      	ldr	r1, [pc, #156]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b26      	ldr	r3, [pc, #152]	; (8004688 <HAL_RCC_OscConfig+0x628>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fe f911 	bl	8002818 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fe f90d 	bl	8002818 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e037      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x59a>
 8004618:	e02f      	b.n	800467a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <HAL_RCC_OscConfig+0x628>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fe f8fa 	bl	8002818 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fe f8f6 	bl	8002818 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e020      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x5c8>
 8004646:	e018      	b.n	800467a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e013      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_OscConfig+0x624>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	429a      	cmp	r2, r3
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	42420060 	.word	0x42420060

0800468c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0d0      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b6a      	ldr	r3, [pc, #424]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d910      	bls.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b67      	ldr	r3, [pc, #412]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0207 	bic.w	r2, r3, #7
 80046b6:	4965      	ldr	r1, [pc, #404]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0b8      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4a58      	ldr	r2, [pc, #352]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004700:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a52      	ldr	r2, [pc, #328]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800470a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470c:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	494d      	ldr	r1, [pc, #308]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d040      	beq.n	80047ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d115      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e07f      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e073      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06b      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4936      	ldr	r1, [pc, #216]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800477c:	f7fe f84c 	bl	8002818 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fe f848 	bl	8002818 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e053      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d210      	bcs.n	80047dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 0207 	bic.w	r2, r3, #7
 80047c2:	4922      	ldr	r1, [pc, #136]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e032      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4916      	ldr	r1, [pc, #88]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	490e      	ldr	r1, [pc, #56]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800481a:	f000 f821 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 800481e:	4602      	mov	r2, r0
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	490a      	ldr	r1, [pc, #40]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	5ccb      	ldrb	r3, [r1, r3]
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1cc>)
 8004834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1d0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fec4 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40022000 	.word	0x40022000
 8004850:	40021000 	.word	0x40021000
 8004854:	08007574 	.word	0x08007574
 8004858:	20000000 	.word	0x20000000
 800485c:	20000004 	.word	0x20000004

08004860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004864:	b092      	sub	sp, #72	; 0x48
 8004866:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486c:	2300      	movs	r3, #0
 800486e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004870:	2300      	movs	r3, #0
 8004872:	647b      	str	r3, [r7, #68]	; 0x44
 8004874:	2300      	movs	r3, #0
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004884:	4b6b      	ldr	r3, [pc, #428]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800488a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b04      	cmp	r3, #4
 8004892:	d002      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0x3a>
 8004894:	2b08      	cmp	r3, #8
 8004896:	d003      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004898:	e0c3      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800489a:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800489c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800489e:	e0c3      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a2:	0c9b      	lsrs	r3, r3, #18
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	4b64      	ldr	r3, [pc, #400]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80048aa:	5c9b      	ldrb	r3, [r3, r2]
 80048ac:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80ac 	beq.w	8004a12 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80048ba:	4b5e      	ldr	r3, [pc, #376]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	4b5f      	ldr	r3, [pc, #380]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1e0>)
 80048c4:	5c9b      	ldrb	r3, [r3, r2]
 80048c6:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80048c8:	4b5a      	ldr	r3, [pc, #360]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 808c 	beq.w	80049ee <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80048d6:	4b57      	ldr	r3, [pc, #348]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	3301      	adds	r3, #1
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80048e4:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	3302      	adds	r3, #2
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	2200      	movs	r2, #0
 80048f6:	623b      	str	r3, [r7, #32]
 80048f8:	627a      	str	r2, [r7, #36]	; 0x24
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	2200      	movs	r2, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	4611      	mov	r1, r2
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	fb00 f203 	mul.w	r2, r0, r3
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	fb03 f301 	mul.w	r3, r3, r1
 800490e:	4413      	add	r3, r2
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	fba2 4500 	umull	r4, r5, r2, r0
 8004916:	442b      	add	r3, r5
 8004918:	461d      	mov	r5, r3
 800491a:	4622      	mov	r2, r4
 800491c:	462b      	mov	r3, r5
 800491e:	f04f 0000 	mov.w	r0, #0
 8004922:	f04f 0100 	mov.w	r1, #0
 8004926:	0159      	lsls	r1, r3, #5
 8004928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492c:	0150      	lsls	r0, r2, #5
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	ebb2 0a04 	subs.w	sl, r2, r4
 8004936:	eb63 0b05 	sbc.w	fp, r3, r5
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004946:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800494a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800494e:	ebb2 080a 	subs.w	r8, r2, sl
 8004952:	eb63 090b 	sbc.w	r9, r3, fp
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496a:	4690      	mov	r8, r2
 800496c:	4699      	mov	r9, r3
 800496e:	eb18 0304 	adds.w	r3, r8, r4
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	eb49 0305 	adc.w	r3, r9, r5
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004986:	4629      	mov	r1, r5
 8004988:	024b      	lsls	r3, r1, #9
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	4604      	mov	r4, r0
 8004990:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004994:	4601      	mov	r1, r0
 8004996:	024a      	lsls	r2, r1, #9
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	2200      	movs	r2, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	617a      	str	r2, [r7, #20]
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2200      	movs	r2, #0
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	60fa      	str	r2, [r7, #12]
 80049ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80049b0:	4622      	mov	r2, r4
 80049b2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80049b6:	4645      	mov	r5, r8
 80049b8:	fb05 f202 	mul.w	r2, r5, r2
 80049bc:	46cc      	mov	ip, r9
 80049be:	4625      	mov	r5, r4
 80049c0:	461c      	mov	r4, r3
 80049c2:	4623      	mov	r3, r4
 80049c4:	fb03 f30c 	mul.w	r3, r3, ip
 80049c8:	4413      	add	r3, r2
 80049ca:	4622      	mov	r2, r4
 80049cc:	4644      	mov	r4, r8
 80049ce:	fba2 2404 	umull	r2, r4, r2, r4
 80049d2:	61fc      	str	r4, [r7, #28]
 80049d4:	61ba      	str	r2, [r7, #24]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e0:	f7fc faf0 	bl	8000fc4 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4613      	mov	r3, r2
 80049ea:	647b      	str	r3, [r7, #68]	; 0x44
 80049ec:	e007      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80049f2:	fb03 f202 	mul.w	r2, r3, r2
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80049fe:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004a00:	7b5b      	ldrb	r3, [r3, #13]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a10:	e004      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a14:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004a20:	e002      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004a26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3748      	adds	r7, #72	; 0x48
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	007a1200 	.word	0x007a1200
 8004a3c:	0800758c 	.word	0x0800758c
 8004a40:	0800759c 	.word	0x0800759c
 8004a44:	003d0900 	.word	0x003d0900

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a4c:	4b02      	ldr	r3, [pc, #8]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	20000000 	.word	0x20000000

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f7ff fff2 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	08007584 	.word	0x08007584

08004a84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	220f      	movs	r2, #15
 8004a92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCC_GetClockConfig+0x58>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0203 	and.w	r2, r3, #3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <HAL_RCC_GetClockConfig+0x58>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_GetClockConfig+0x58>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_RCC_GetClockConfig+0x58>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	08db      	lsrs	r3, r3, #3
 8004abe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0207 	and.w	r2, r3, #7
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40022000 	.word	0x40022000

08004ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <RCC_Delay+0x34>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <RCC_Delay+0x38>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0a5b      	lsrs	r3, r3, #9
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b00:	bf00      	nop
  }
  while (Delay --);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	60fa      	str	r2, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f9      	bne.n	8004b00 <RCC_Delay+0x1c>
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	10624dd3 	.word	0x10624dd3

08004b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d07d      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b40:	2300      	movs	r3, #0
 8004b42:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b44:	4b8b      	ldr	r3, [pc, #556]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b50:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4a87      	ldr	r2, [pc, #540]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	61d3      	str	r3, [r2, #28]
 8004b5c:	4b85      	ldr	r3, [pc, #532]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6c:	4b82      	ldr	r3, [pc, #520]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d118      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7e      	ldr	r2, [pc, #504]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b84:	f7fd fe48 	bl	8002818 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8a:	e008      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8c:	f7fd fe44 	bl	8002818 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0e5      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9e:	4b76      	ldr	r3, [pc, #472]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004baa:	4b72      	ldr	r3, [pc, #456]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d02e      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d027      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bd2:	4b6a      	ldr	r3, [pc, #424]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bde:	4a65      	ldr	r2, [pc, #404]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d014      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fd fe13 	bl	8002818 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fd fe0f 	bl	8002818 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0ae      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0c:	4b59      	ldr	r3, [pc, #356]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ee      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c18:	4b56      	ldr	r3, [pc, #344]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4953      	ldr	r1, [pc, #332]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c2a:	7efb      	ldrb	r3, [r7, #27]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c30:	4b50      	ldr	r3, [pc, #320]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	4a4f      	ldr	r2, [pc, #316]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c48:	4b4a      	ldr	r3, [pc, #296]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4947      	ldr	r1, [pc, #284]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004c66:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	4940      	ldr	r1, [pc, #256]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004c84:	4b3b      	ldr	r3, [pc, #236]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	4938      	ldr	r1, [pc, #224]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8004c96:	4b37      	ldr	r3, [pc, #220]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d105      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004ca2:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d148      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004cb8:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d138      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004cd0:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e042      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004ce4:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	4920      	ldr	r1, [pc, #128]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	491c      	ldr	r1, [pc, #112]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0e:	f7fd fd83 	bl	8002818 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d16:	f7fd fd7f 	bl	8002818 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b64      	cmp	r3, #100	; 0x64
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e020      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004d34:	e009      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e00f      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	4904      	ldr	r1, [pc, #16]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	42420440 	.word	0x42420440
 8004d80:	42420070 	.word	0x42420070

08004d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e041      	b.n	8004e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f839 	bl	8004e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 f9bc 	bl	8005140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e03f      	b.n	8004ecc <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_TIM_Base_Start_IT+0x62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e76:	d00e      	beq.n	8004e96 <HAL_TIM_Base_Start_IT+0x62>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <HAL_TIM_Base_Start_IT+0xa8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_TIM_Base_Start_IT+0x62>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xac>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_TIM_Base_Start_IT+0x62>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d111      	bne.n	8004eba <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d010      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	e007      	b.n	8004eca <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00

08004ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0202 	mvn.w	r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8ed 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8e0 	bl	80050f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8ef 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0204 	mvn.w	r2, #4
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8c3 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f8b6 	bl	80050f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8c5 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0208 	mvn.w	r2, #8
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f899 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f88c 	bl	80050f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f89b 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0210 	mvn.w	r2, #16
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2208      	movs	r2, #8
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f86f 	bl	800510a <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f862 	bl	80050f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f871 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fd f934 	bl	80022d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8c9 	bl	800522a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f835 	bl	800512e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0220 	mvn.w	r2, #32
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f894 	bl	8005218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <TIM_Base_SetConfig+0xc8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0x38>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0x38>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a2a      	ldr	r2, [pc, #168]	; (800520c <TIM_Base_SetConfig+0xcc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0x38>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a29      	ldr	r2, [pc, #164]	; (8005210 <TIM_Base_SetConfig+0xd0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x38>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a28      	ldr	r2, [pc, #160]	; (8005214 <TIM_Base_SetConfig+0xd4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <TIM_Base_SetConfig+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_Base_SetConfig+0x72>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d00b      	beq.n	80051b2 <TIM_Base_SetConfig+0x72>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <TIM_Base_SetConfig+0xcc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_Base_SetConfig+0x72>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <TIM_Base_SetConfig+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_Base_SetConfig+0x72>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <TIM_Base_SetConfig+0xd4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d108      	bne.n	80051c4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a07      	ldr	r2, [pc, #28]	; (8005208 <TIM_Base_SetConfig+0xc8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d103      	bne.n	80051f8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00

08005218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800524a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524e:	2b84      	cmp	r3, #132	; 0x84
 8005250:	d005      	beq.n	800525e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005252:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	3303      	adds	r3, #3
 800525c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800525e:	68fb      	ldr	r3, [r7, #12]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800526e:	f000 ffed 	bl	800624c <vTaskStartScheduler>
  
  return osOK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}

08005278 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800527a:	b089      	sub	sp, #36	; 0x24
 800527c:	af04      	add	r7, sp, #16
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d020      	beq.n	80052cc <osThreadCreate+0x54>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01c      	beq.n	80052cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685c      	ldr	r4, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681d      	ldr	r5, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691e      	ldr	r6, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ffc9 	bl	800523c <makeFreeRtosPriority>
 80052aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052b4:	9202      	str	r2, [sp, #8]
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	9100      	str	r1, [sp, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	4632      	mov	r2, r6
 80052be:	4629      	mov	r1, r5
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fe05 	bl	8005ed0 <xTaskCreateStatic>
 80052c6:	4603      	mov	r3, r0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e01c      	b.n	8005306 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685c      	ldr	r4, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052d8:	b29e      	uxth	r6, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff ffab 	bl	800523c <makeFreeRtosPriority>
 80052e6:	4602      	mov	r2, r0
 80052e8:	f107 030c 	add.w	r3, r7, #12
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	9200      	str	r2, [sp, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4632      	mov	r2, r6
 80052f4:	4629      	mov	r1, r5
 80052f6:	4620      	mov	r0, r4
 80052f8:	f000 fe46 	bl	8005f88 <xTaskCreate>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d001      	beq.n	8005306 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005310 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <osDelay+0x16>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	e000      	b.n	8005328 <osDelay+0x18>
 8005326:	2301      	movs	r3, #1
 8005328:	4618      	mov	r0, r3
 800532a:	f000 ff5b 	bl	80061e4 <vTaskDelay>
  
  return osOK;
 800532e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00f      	beq.n	800536a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d10a      	bne.n	8005366 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2203      	movs	r2, #3
 8005356:	9200      	str	r2, [sp, #0]
 8005358:	2200      	movs	r2, #0
 800535a:	2100      	movs	r1, #0
 800535c:	2001      	movs	r0, #1
 800535e:	f000 f95d 	bl	800561c <xQueueGenericCreateStatic>
 8005362:	4603      	mov	r3, r0
 8005364:	e016      	b.n	8005394 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	e014      	b.n	8005394 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d110      	bne.n	8005392 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005370:	2203      	movs	r2, #3
 8005372:	2100      	movs	r1, #0
 8005374:	2001      	movs	r0, #1
 8005376:	f000 f9c8 	bl	800570a <xQueueGenericCreate>
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <osSemaphoreCreate+0x56>
 8005382:	2300      	movs	r3, #0
 8005384:	2200      	movs	r2, #0
 8005386:	2100      	movs	r1, #0
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fa1b 	bl	80057c4 <xQueueGenericSend>
      return sema;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	e000      	b.n	8005394 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005392:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b085      	sub	sp, #20
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d011      	beq.n	80053d2 <osMessageCreate+0x36>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2400      	movs	r4, #0
 80053c8:	9400      	str	r4, [sp, #0]
 80053ca:	f000 f927 	bl	800561c <xQueueGenericCreateStatic>
 80053ce:	4603      	mov	r3, r0
 80053d0:	e008      	b.n	80053e4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	4619      	mov	r1, r3
 80053de:	f000 f994 	bl	800570a <xQueueGenericCreate>
 80053e2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}

080053ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f103 0208 	add.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f04f 32ff 	mov.w	r2, #4294967295
 8005404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f103 0208 	add.w	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f103 0208 	add.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e00c      	b.n	80054c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3308      	adds	r3, #8
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e002      	b.n	80054b6 <vListInsert+0x2e>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d2f6      	bcs.n	80054b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6892      	ldr	r2, [r2, #8]
 800550e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6852      	ldr	r2, [r2, #4]
 8005518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d103      	bne.n	800552c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	1e5a      	subs	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
	...

0800554c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005576:	f001 fc69 	bl	8006e4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	441a      	add	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	3b01      	subs	r3, #1
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	441a      	add	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	22ff      	movs	r2, #255	; 0xff
 80055ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d114      	bne.n	80055f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01a      	beq.n	800560a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3310      	adds	r3, #16
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f87d 	bl	80066d8 <xTaskRemoveFromEventList>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d012      	beq.n	800560a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <xQueueGenericReset+0xcc>)
 80055e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	e009      	b.n	800560a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3310      	adds	r3, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fef6 	bl	80053ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3324      	adds	r3, #36	; 0x24
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fef1 	bl	80053ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800560a:	f001 fc4f 	bl	8006eac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800560e:	2301      	movs	r3, #1
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08e      	sub	sp, #56	; 0x38
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <xQueueGenericCreateStatic+0x52>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <xQueueGenericCreateStatic+0x56>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <xQueueGenericCreateStatic+0x58>
 8005672:	2300      	movs	r3, #0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	623b      	str	r3, [r7, #32]
}
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <xQueueGenericCreateStatic+0x7e>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <xQueueGenericCreateStatic+0x82>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueGenericCreateStatic+0x84>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61fb      	str	r3, [r7, #28]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056ba:	2348      	movs	r3, #72	; 0x48
 80056bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b48      	cmp	r3, #72	; 0x48
 80056c2:	d00a      	beq.n	80056da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	61bb      	str	r3, [r7, #24]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f843 	bl	8005786 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005702:	4618      	mov	r0, r3
 8005704:	3730      	adds	r7, #48	; 0x30
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800570a:	b580      	push	{r7, lr}
 800570c:	b08a      	sub	sp, #40	; 0x28
 800570e:	af02      	add	r7, sp, #8
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	4613      	mov	r3, r2
 8005716:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10a      	bne.n	8005734 <xQueueGenericCreate+0x2a>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	613b      	str	r3, [r7, #16]
}
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	e004      	b.n	800574a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3348      	adds	r3, #72	; 0x48
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fc7c 	bl	800704c <pvPortMalloc>
 8005754:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00f      	beq.n	800577c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	3348      	adds	r3, #72	; 0x48
 8005760:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800576a:	79fa      	ldrb	r2, [r7, #7]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f805 	bl	8005786 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800577c:	69bb      	ldr	r3, [r7, #24]
	}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e002      	b.n	80057a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057b4:	2101      	movs	r1, #1
 80057b6:	69b8      	ldr	r0, [r7, #24]
 80057b8:	f7ff fec8 	bl	800554c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057d2:	2300      	movs	r3, #0
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <xQueueGenericSend+0x32>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d103      	bne.n	8005804 <xQueueGenericSend+0x40>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <xQueueGenericSend+0x44>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <xQueueGenericSend+0x46>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <xQueueGenericSend+0x60>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d103      	bne.n	8005832 <xQueueGenericSend+0x6e>
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <xQueueGenericSend+0x72>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <xQueueGenericSend+0x74>
 8005836:	2300      	movs	r3, #0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <xQueueGenericSend+0x8e>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	623b      	str	r3, [r7, #32]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005852:	f001 f901 	bl	8006a58 <xTaskGetSchedulerState>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <xQueueGenericSend+0x9e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <xQueueGenericSend+0xa2>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <xQueueGenericSend+0xa4>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericSend+0xbe>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	61fb      	str	r3, [r7, #28]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005882:	f001 fae3 	bl	8006e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	429a      	cmp	r2, r3
 8005890:	d302      	bcc.n	8005898 <xQueueGenericSend+0xd4>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d129      	bne.n	80058ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589e:	f000 fa07 	bl	8005cb0 <prvCopyDataToQueue>
 80058a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	3324      	adds	r3, #36	; 0x24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 ff11 	bl	80066d8 <xTaskRemoveFromEventList>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d013      	beq.n	80058e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058bc:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <xQueueGenericSend+0x1f8>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	e00a      	b.n	80058e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <xQueueGenericSend+0x1f8>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058e4:	f001 fae2 	bl	8006eac <vPortExitCritical>
				return pdPASS;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e063      	b.n	80059b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058f2:	f001 fadb 	bl	8006eac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	e05c      	b.n	80059b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	4618      	mov	r0, r3
 8005906:	f000 ff49 	bl	800679c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800590a:	2301      	movs	r3, #1
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800590e:	f001 facd 	bl	8006eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005912:	f000 fcfb 	bl	800630c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005916:	f001 fa99 	bl	8006e4c <vPortEnterCritical>
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005920:	b25b      	sxtb	r3, r3
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d103      	bne.n	8005930 <xQueueGenericSend+0x16c>
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005936:	b25b      	sxtb	r3, r3
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d103      	bne.n	8005946 <xQueueGenericSend+0x182>
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005946:	f001 fab1 	bl	8006eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800594a:	1d3a      	adds	r2, r7, #4
 800594c:	f107 0314 	add.w	r3, r7, #20
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 ff38 	bl	80067c8 <xTaskCheckForTimeOut>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d124      	bne.n	80059a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800595e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005960:	f000 fa9e 	bl	8005ea0 <prvIsQueueFull>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d018      	beq.n	800599c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	3310      	adds	r3, #16
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4611      	mov	r1, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fe8c 	bl	8006690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800597a:	f000 fa29 	bl	8005dd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800597e:	f000 fcd3 	bl	8006328 <xTaskResumeAll>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	f47f af7c 	bne.w	8005882 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <xQueueGenericSend+0x1f8>)
 800598c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	e772      	b.n	8005882 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800599c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800599e:	f000 fa17 	bl	8005dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059a2:	f000 fcc1 	bl	8006328 <xTaskResumeAll>
 80059a6:	e76c      	b.n	8005882 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059aa:	f000 fa11 	bl	8005dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ae:	f000 fcbb 	bl	8006328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059b2:	2300      	movs	r3, #0
		}
	}
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3738      	adds	r7, #56	; 0x38
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d103      	bne.n	80059fc <xQueueGenericSendFromISR+0x3c>
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <xQueueGenericSendFromISR+0x40>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <xQueueGenericSendFromISR+0x42>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	623b      	str	r3, [r7, #32]
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d103      	bne.n	8005a2a <xQueueGenericSendFromISR+0x6a>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <xQueueGenericSendFromISR+0x6e>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <xQueueGenericSendFromISR+0x70>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	61fb      	str	r3, [r7, #28]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a4a:	f001 fac1 	bl	8006fd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	61ba      	str	r2, [r7, #24]
 8005a64:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a66:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <xQueueGenericSendFromISR+0xbc>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d12c      	bne.n	8005ad6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a8c:	f000 f910 	bl	8005cb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a90:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d112      	bne.n	8005ac0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	3324      	adds	r3, #36	; 0x24
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fe16 	bl	80066d8 <xTaskRemoveFromEventList>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e007      	b.n	8005ad0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	b25a      	sxtb	r2, r3
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ad4:	e001      	b.n	8005ada <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ae4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3738      	adds	r7, #56	; 0x38
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08c      	sub	sp, #48	; 0x30
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <xQueueReceive+0x30>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	623b      	str	r3, [r7, #32]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <xQueueReceive+0x3e>
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <xQueueReceive+0x42>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <xQueueReceive+0x44>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <xQueueReceive+0x5e>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	61fb      	str	r3, [r7, #28]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b4e:	f000 ff83 	bl	8006a58 <xTaskGetSchedulerState>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <xQueueReceive+0x6e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <xQueueReceive+0x72>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <xQueueReceive+0x74>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueReceive+0x8e>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	61bb      	str	r3, [r7, #24]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b7e:	f001 f965 	bl	8006e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01f      	beq.n	8005bce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b92:	f000 f8f7 	bl	8005d84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	1e5a      	subs	r2, r3, #1
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00f      	beq.n	8005bc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	3310      	adds	r3, #16
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fd94 	bl	80066d8 <xTaskRemoveFromEventList>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bb6:	4b3d      	ldr	r3, [pc, #244]	; (8005cac <xQueueReceive+0x1bc>)
 8005bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bc6:	f001 f971 	bl	8006eac <vPortExitCritical>
				return pdPASS;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e069      	b.n	8005ca2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bd4:	f001 f96a 	bl	8006eac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e062      	b.n	8005ca2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005be2:	f107 0310 	add.w	r3, r7, #16
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fdd8 	bl	800679c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bf0:	f001 f95c 	bl	8006eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bf4:	f000 fb8a 	bl	800630c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bf8:	f001 f928 	bl	8006e4c <vPortEnterCritical>
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c02:	b25b      	sxtb	r3, r3
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d103      	bne.n	8005c12 <xQueueReceive+0x122>
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c18:	b25b      	sxtb	r3, r3
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1e:	d103      	bne.n	8005c28 <xQueueReceive+0x138>
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c28:	f001 f940 	bl	8006eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c2c:	1d3a      	adds	r2, r7, #4
 8005c2e:	f107 0310 	add.w	r3, r7, #16
 8005c32:	4611      	mov	r1, r2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fdc7 	bl	80067c8 <xTaskCheckForTimeOut>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d123      	bne.n	8005c88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c42:	f000 f917 	bl	8005e74 <prvIsQueueEmpty>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d017      	beq.n	8005c7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	3324      	adds	r3, #36	; 0x24
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fd1b 	bl	8006690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c5c:	f000 f8b8 	bl	8005dd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c60:	f000 fb62 	bl	8006328 <xTaskResumeAll>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d189      	bne.n	8005b7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c6a:	4b10      	ldr	r3, [pc, #64]	; (8005cac <xQueueReceive+0x1bc>)
 8005c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	e780      	b.n	8005b7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c7e:	f000 f8a7 	bl	8005dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c82:	f000 fb51 	bl	8006328 <xTaskResumeAll>
 8005c86:	e77a      	b.n	8005b7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c8a:	f000 f8a1 	bl	8005dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c8e:	f000 fb4b 	bl	8006328 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c94:	f000 f8ee 	bl	8005e74 <prvIsQueueEmpty>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f43f af6f 	beq.w	8005b7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ca0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3730      	adds	r7, #48	; 0x30
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10d      	bne.n	8005cea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d14d      	bne.n	8005d72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 feda 	bl	8006a94 <xTaskPriorityDisinherit>
 8005ce0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	e043      	b.n	8005d72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d119      	bne.n	8005d24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6898      	ldr	r0, [r3, #8]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	f001 fba2 	bl	8007444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	441a      	add	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d32b      	bcc.n	8005d72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	609a      	str	r2, [r3, #8]
 8005d22:	e026      	b.n	8005d72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68d8      	ldr	r0, [r3, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	f001 fb88 	bl	8007444 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	425b      	negs	r3, r3
 8005d3e:	441a      	add	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d207      	bcs.n	8005d60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	425b      	negs	r3, r3
 8005d5a:	441a      	add	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d105      	bne.n	8005d72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d7a:	697b      	ldr	r3, [r7, #20]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d018      	beq.n	8005dc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	441a      	add	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d303      	bcc.n	8005db8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68d9      	ldr	r1, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6838      	ldr	r0, [r7, #0]
 8005dc4:	f001 fb3e 	bl	8007444 <memcpy>
	}
}
 8005dc8:	bf00      	nop
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005dd8:	f001 f838 	bl	8006e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de4:	e011      	b.n	8005e0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d012      	beq.n	8005e14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3324      	adds	r3, #36	; 0x24
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fc70 	bl	80066d8 <xTaskRemoveFromEventList>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dfe:	f000 fd45 	bl	800688c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	dce9      	bgt.n	8005de6 <prvUnlockQueue+0x16>
 8005e12:	e000      	b.n	8005e16 <prvUnlockQueue+0x46>
					break;
 8005e14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	22ff      	movs	r2, #255	; 0xff
 8005e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e1e:	f001 f845 	bl	8006eac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e22:	f001 f813 	bl	8006e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e2e:	e011      	b.n	8005e54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d012      	beq.n	8005e5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3310      	adds	r3, #16
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fc4b 	bl	80066d8 <xTaskRemoveFromEventList>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e48:	f000 fd20 	bl	800688c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e4c:	7bbb      	ldrb	r3, [r7, #14]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dce9      	bgt.n	8005e30 <prvUnlockQueue+0x60>
 8005e5c:	e000      	b.n	8005e60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	22ff      	movs	r2, #255	; 0xff
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e68:	f001 f820 	bl	8006eac <vPortExitCritical>
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e7c:	f000 ffe6 	bl	8006e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d102      	bne.n	8005e8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e001      	b.n	8005e92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e92:	f001 f80b 	bl	8006eac <vPortExitCritical>

	return xReturn;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ea8:	f000 ffd0 	bl	8006e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d102      	bne.n	8005ebe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e001      	b.n	8005ec2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ec2:	f000 fff3 	bl	8006eac <vPortExitCritical>

	return xReturn;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	; 0x38
 8005ed4:	af04      	add	r7, sp, #16
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	61fb      	str	r3, [r7, #28]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f16:	2354      	movs	r3, #84	; 0x54
 8005f18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b54      	cmp	r3, #84	; 0x54
 8005f1e:	d00a      	beq.n	8005f36 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	61bb      	str	r3, [r7, #24]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01e      	beq.n	8005f7a <xTaskCreateStatic+0xaa>
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01b      	beq.n	8005f7a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f54:	2300      	movs	r3, #0
 8005f56:	9303      	str	r3, [sp, #12]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	9302      	str	r3, [sp, #8]
 8005f5c:	f107 0314 	add.w	r3, r7, #20
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f850 	bl	8006012 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f74:	f000 f8cc 	bl	8006110 <prvAddNewTaskToReadyList>
 8005f78:	e001      	b.n	8005f7e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f7e:	697b      	ldr	r3, [r7, #20]
	}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3728      	adds	r7, #40	; 0x28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08c      	sub	sp, #48	; 0x30
 8005f8c:	af04      	add	r7, sp, #16
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 f855 	bl	800704c <pvPortMalloc>
 8005fa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00e      	beq.n	8005fc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005faa:	2054      	movs	r0, #84	; 0x54
 8005fac:	f001 f84e 	bl	800704c <pvPortMalloc>
 8005fb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8005fbe:	e005      	b.n	8005fcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fc0:	6978      	ldr	r0, [r7, #20]
 8005fc2:	f001 f907 	bl	80071d4 <vPortFree>
 8005fc6:	e001      	b.n	8005fcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d017      	beq.n	8006002 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9303      	str	r3, [sp, #12]
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	9302      	str	r3, [sp, #8]
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f80e 	bl	8006012 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ff6:	69f8      	ldr	r0, [r7, #28]
 8005ff8:	f000 f88a 	bl	8006110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	e002      	b.n	8006008 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006002:	f04f 33ff 	mov.w	r3, #4294967295
 8006006:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006008:	69bb      	ldr	r3, [r7, #24]
	}
 800600a:	4618      	mov	r0, r3
 800600c:	3720      	adds	r7, #32
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b088      	sub	sp, #32
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800602a:	3b01      	subs	r3, #1
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f023 0307 	bic.w	r3, r3, #7
 8006038:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <prvInitialiseNewTask+0x48>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	617b      	str	r3, [r7, #20]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e012      	b.n	8006086 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	3334      	adds	r3, #52	; 0x34
 8006070:	460a      	mov	r2, r1
 8006072:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d006      	beq.n	800608e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	3301      	adds	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b0f      	cmp	r3, #15
 800608a:	d9e9      	bls.n	8006060 <prvInitialiseNewTask+0x4e>
 800608c:	e000      	b.n	8006090 <prvInitialiseNewTask+0x7e>
		{
			break;
 800608e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	2b06      	cmp	r3, #6
 800609c:	d901      	bls.n	80060a2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800609e:	2306      	movs	r3, #6
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	2200      	movs	r2, #0
 80060b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	3304      	adds	r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff f9b6 	bl	800542a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	3318      	adds	r3, #24
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff f9b1 	bl	800542a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	f1c3 0207 	rsb	r2, r3, #7
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2200      	movs	r2, #0
 80060e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	69b8      	ldr	r0, [r7, #24]
 80060f2:	f000 fdbb 	bl	8006c6c <pxPortInitialiseStack>
 80060f6:	4602      	mov	r2, r0
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006106:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006108:	bf00      	nop
 800610a:	3720      	adds	r7, #32
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006118:	f000 fe98 	bl	8006e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800611c:	4b2a      	ldr	r3, [pc, #168]	; (80061c8 <prvAddNewTaskToReadyList+0xb8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a29      	ldr	r2, [pc, #164]	; (80061c8 <prvAddNewTaskToReadyList+0xb8>)
 8006124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612e:	4a27      	ldr	r2, [pc, #156]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006134:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <prvAddNewTaskToReadyList+0xb8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d110      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800613c:	f000 fbca 	bl	80068d4 <prvInitialiseTaskLists>
 8006140:	e00d      	b.n	800615e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006142:	4b23      	ldr	r3, [pc, #140]	; (80061d0 <prvAddNewTaskToReadyList+0xc0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d802      	bhi.n	800615e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006158:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615e:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006166:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	2201      	movs	r2, #1
 800616e:	409a      	lsls	r2, r3
 8006170:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4313      	orrs	r3, r2
 8006176:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4a15      	ldr	r2, [pc, #84]	; (80061dc <prvAddNewTaskToReadyList+0xcc>)
 8006188:	441a      	add	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f7ff f956 	bl	8005442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006196:	f000 fe89 	bl	8006eac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800619a:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <prvAddNewTaskToReadyList+0xc0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061a2:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <prvAddNewTaskToReadyList+0xbc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d207      	bcs.n	80061c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 80061b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20001ba4 	.word	0x20001ba4
 80061cc:	20001aa4 	.word	0x20001aa4
 80061d0:	20001bb0 	.word	0x20001bb0
 80061d4:	20001bc0 	.word	0x20001bc0
 80061d8:	20001bac 	.word	0x20001bac
 80061dc:	20001aa8 	.word	0x20001aa8
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d017      	beq.n	8006226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <vTaskDelay+0x60>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <vTaskDelay+0x30>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	60bb      	str	r3, [r7, #8]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006214:	f000 f87a 	bl	800630c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006218:	2100      	movs	r1, #0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fcc0 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006220:	f000 f882 	bl	8006328 <xTaskResumeAll>
 8006224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d107      	bne.n	800623c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <vTaskDelay+0x64>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20001bcc 	.word	0x20001bcc
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800625a:	463a      	mov	r2, r7
 800625c:	1d39      	adds	r1, r7, #4
 800625e:	f107 0308 	add.w	r3, r7, #8
 8006262:	4618      	mov	r0, r3
 8006264:	f7fb fc40 	bl	8001ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	9202      	str	r2, [sp, #8]
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	2300      	movs	r3, #0
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	460a      	mov	r2, r1
 800627a:	491e      	ldr	r1, [pc, #120]	; (80062f4 <vTaskStartScheduler+0xa8>)
 800627c:	481e      	ldr	r0, [pc, #120]	; (80062f8 <vTaskStartScheduler+0xac>)
 800627e:	f7ff fe27 	bl	8005ed0 <xTaskCreateStatic>
 8006282:	4603      	mov	r3, r0
 8006284:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <vTaskStartScheduler+0xb0>)
 8006286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006288:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <vTaskStartScheduler+0xb0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006290:	2301      	movs	r3, #1
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e001      	b.n	800629a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d116      	bne.n	80062ce <vTaskStartScheduler+0x82>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <vTaskStartScheduler+0xb4>)
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <vTaskStartScheduler+0xb8>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <vTaskStartScheduler+0xbc>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062c8:	f000 fd4e 	bl	8006d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062cc:	e00e      	b.n	80062ec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d10a      	bne.n	80062ec <vTaskStartScheduler+0xa0>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60fb      	str	r3, [r7, #12]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <vTaskStartScheduler+0x9e>
}
 80062ec:	bf00      	nop
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	0800756c 	.word	0x0800756c
 80062f8:	080068a5 	.word	0x080068a5
 80062fc:	20001bc8 	.word	0x20001bc8
 8006300:	20001bc4 	.word	0x20001bc4
 8006304:	20001bb0 	.word	0x20001bb0
 8006308:	20001ba8 	.word	0x20001ba8

0800630c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <vTaskSuspendAll+0x18>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	4a03      	ldr	r2, [pc, #12]	; (8006324 <vTaskSuspendAll+0x18>)
 8006318:	6013      	str	r3, [r2, #0]
}
 800631a:	bf00      	nop
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20001bcc 	.word	0x20001bcc

08006328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006336:	4b41      	ldr	r3, [pc, #260]	; (800643c <xTaskResumeAll+0x114>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskResumeAll+0x2c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	603b      	str	r3, [r7, #0]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006354:	f000 fd7a 	bl	8006e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006358:	4b38      	ldr	r3, [pc, #224]	; (800643c <xTaskResumeAll+0x114>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3b01      	subs	r3, #1
 800635e:	4a37      	ldr	r2, [pc, #220]	; (800643c <xTaskResumeAll+0x114>)
 8006360:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <xTaskResumeAll+0x114>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d161      	bne.n	800642e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800636a:	4b35      	ldr	r3, [pc, #212]	; (8006440 <xTaskResumeAll+0x118>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d05d      	beq.n	800642e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006372:	e02e      	b.n	80063d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006374:	4b33      	ldr	r3, [pc, #204]	; (8006444 <xTaskResumeAll+0x11c>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3318      	adds	r3, #24
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff f8b9 	bl	80054f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3304      	adds	r3, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f8b4 	bl	80054f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	2201      	movs	r2, #1
 8006396:	409a      	lsls	r2, r3
 8006398:	4b2b      	ldr	r3, [pc, #172]	; (8006448 <xTaskResumeAll+0x120>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4313      	orrs	r3, r2
 800639e:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <xTaskResumeAll+0x120>)
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4a27      	ldr	r2, [pc, #156]	; (800644c <xTaskResumeAll+0x124>)
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f7ff f842 	bl	8005442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c2:	4b23      	ldr	r3, [pc, #140]	; (8006450 <xTaskResumeAll+0x128>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80063cc:	4b21      	ldr	r3, [pc, #132]	; (8006454 <xTaskResumeAll+0x12c>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <xTaskResumeAll+0x11c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1cc      	bne.n	8006374 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063e0:	f000 fb16 	bl	8006a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063e4:	4b1c      	ldr	r3, [pc, #112]	; (8006458 <xTaskResumeAll+0x130>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d010      	beq.n	8006412 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063f0:	f000 f836 	bl	8006460 <xTaskIncrementTick>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063fa:	4b16      	ldr	r3, [pc, #88]	; (8006454 <xTaskResumeAll+0x12c>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3b01      	subs	r3, #1
 8006404:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f1      	bne.n	80063f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <xTaskResumeAll+0x130>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006412:	4b10      	ldr	r3, [pc, #64]	; (8006454 <xTaskResumeAll+0x12c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800641a:	2301      	movs	r3, #1
 800641c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <xTaskResumeAll+0x134>)
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800642e:	f000 fd3d 	bl	8006eac <vPortExitCritical>

	return xAlreadyYielded;
 8006432:	68bb      	ldr	r3, [r7, #8]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20001bcc 	.word	0x20001bcc
 8006440:	20001ba4 	.word	0x20001ba4
 8006444:	20001b64 	.word	0x20001b64
 8006448:	20001bac 	.word	0x20001bac
 800644c:	20001aa8 	.word	0x20001aa8
 8006450:	20001aa4 	.word	0x20001aa4
 8006454:	20001bb8 	.word	0x20001bb8
 8006458:	20001bb4 	.word	0x20001bb4
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646a:	4b51      	ldr	r3, [pc, #324]	; (80065b0 <xTaskIncrementTick+0x150>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 808d 	bne.w	800658e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006474:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <xTaskIncrementTick+0x154>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800647c:	4a4d      	ldr	r2, [pc, #308]	; (80065b4 <xTaskIncrementTick+0x154>)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d120      	bne.n	80064ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006488:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <xTaskIncrementTick+0x158>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	603b      	str	r3, [r7, #0]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xTaskIncrementTick+0x46>
 80064a8:	4b43      	ldr	r3, [pc, #268]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	4b43      	ldr	r3, [pc, #268]	; (80065bc <xTaskIncrementTick+0x15c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a41      	ldr	r2, [pc, #260]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	4a41      	ldr	r2, [pc, #260]	; (80065bc <xTaskIncrementTick+0x15c>)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <xTaskIncrementTick+0x160>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	4a3f      	ldr	r2, [pc, #252]	; (80065c0 <xTaskIncrementTick+0x160>)
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	f000 faa3 	bl	8006a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064ca:	4b3e      	ldr	r3, [pc, #248]	; (80065c4 <xTaskIncrementTick+0x164>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d34d      	bcc.n	8006570 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d4:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <xTaskIncrementTick+0x82>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <xTaskIncrementTick+0x84>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e8:	4b36      	ldr	r3, [pc, #216]	; (80065c4 <xTaskIncrementTick+0x164>)
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295
 80064ee:	601a      	str	r2, [r3, #0]
					break;
 80064f0:	e03e      	b.n	8006570 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064f2:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <xTaskIncrementTick+0x158>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d203      	bcs.n	8006512 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800650a:	4a2e      	ldr	r2, [pc, #184]	; (80065c4 <xTaskIncrementTick+0x164>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6013      	str	r3, [r2, #0]
						break;
 8006510:	e02e      	b.n	8006570 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	3304      	adds	r3, #4
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe ffee 	bl	80054f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	3318      	adds	r3, #24
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe ffe5 	bl	80054f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	2201      	movs	r2, #1
 8006534:	409a      	lsls	r2, r3
 8006536:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <xTaskIncrementTick+0x168>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4313      	orrs	r3, r2
 800653c:	4a22      	ldr	r2, [pc, #136]	; (80065c8 <xTaskIncrementTick+0x168>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <xTaskIncrementTick+0x16c>)
 800654e:	441a      	add	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe ff73 	bl	8005442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <xTaskIncrementTick+0x170>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	429a      	cmp	r2, r3
 8006568:	d3b4      	bcc.n	80064d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800656a:	2301      	movs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800656e:	e7b1      	b.n	80064d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <xTaskIncrementTick+0x170>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	4915      	ldr	r1, [pc, #84]	; (80065cc <xTaskIncrementTick+0x16c>)
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d907      	bls.n	8006598 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e004      	b.n	8006598 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <xTaskIncrementTick+0x174>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a0f      	ldr	r2, [pc, #60]	; (80065d4 <xTaskIncrementTick+0x174>)
 8006596:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <xTaskIncrementTick+0x178>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065a4:	697b      	ldr	r3, [r7, #20]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20001bcc 	.word	0x20001bcc
 80065b4:	20001ba8 	.word	0x20001ba8
 80065b8:	20001b5c 	.word	0x20001b5c
 80065bc:	20001b60 	.word	0x20001b60
 80065c0:	20001bbc 	.word	0x20001bbc
 80065c4:	20001bc4 	.word	0x20001bc4
 80065c8:	20001bac 	.word	0x20001bac
 80065cc:	20001aa8 	.word	0x20001aa8
 80065d0:	20001aa4 	.word	0x20001aa4
 80065d4:	20001bb4 	.word	0x20001bb4
 80065d8:	20001bb8 	.word	0x20001bb8

080065dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065e2:	4b26      	ldr	r3, [pc, #152]	; (800667c <vTaskSwitchContext+0xa0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065ea:	4b25      	ldr	r3, [pc, #148]	; (8006680 <vTaskSwitchContext+0xa4>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065f0:	e03f      	b.n	8006672 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80065f2:	4b23      	ldr	r3, [pc, #140]	; (8006680 <vTaskSwitchContext+0xa4>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065f8:	4b22      	ldr	r3, [pc, #136]	; (8006684 <vTaskSwitchContext+0xa8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	f1c3 031f 	rsb	r3, r3, #31
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	491e      	ldr	r1, [pc, #120]	; (8006688 <vTaskSwitchContext+0xac>)
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vTaskSwitchContext+0x5a>
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4a11      	ldr	r2, [pc, #68]	; (8006688 <vTaskSwitchContext+0xac>)
 8006644:	4413      	add	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3308      	adds	r3, #8
 800665a:	429a      	cmp	r2, r3
 800665c:	d104      	bne.n	8006668 <vTaskSwitchContext+0x8c>
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	4a07      	ldr	r2, [pc, #28]	; (800668c <vTaskSwitchContext+0xb0>)
 8006670:	6013      	str	r3, [r2, #0]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr
 800667c:	20001bcc 	.word	0x20001bcc
 8006680:	20001bb8 	.word	0x20001bb8
 8006684:	20001bac 	.word	0x20001bac
 8006688:	20001aa8 	.word	0x20001aa8
 800668c:	20001aa4 	.word	0x20001aa4

08006690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <vTaskPlaceOnEventList+0x44>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3318      	adds	r3, #24
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fe fee2 	bl	8005488 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066c4:	2101      	movs	r1, #1
 80066c6:	6838      	ldr	r0, [r7, #0]
 80066c8:	f000 fa6a 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20001aa4 	.word	0x20001aa4

080066d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60fb      	str	r3, [r7, #12]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3318      	adds	r3, #24
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fef5 	bl	80054f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670e:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <xTaskRemoveFromEventList+0xac>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d11c      	bne.n	8006750 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3304      	adds	r3, #4
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe feec 	bl	80054f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	2201      	movs	r2, #1
 8006726:	409a      	lsls	r2, r3
 8006728:	4b17      	ldr	r3, [pc, #92]	; (8006788 <xTaskRemoveFromEventList+0xb0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4313      	orrs	r3, r2
 800672e:	4a16      	ldr	r2, [pc, #88]	; (8006788 <xTaskRemoveFromEventList+0xb0>)
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4a13      	ldr	r2, [pc, #76]	; (800678c <xTaskRemoveFromEventList+0xb4>)
 8006740:	441a      	add	r2, r3
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3304      	adds	r3, #4
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7fe fe7a 	bl	8005442 <vListInsertEnd>
 800674e:	e005      	b.n	800675c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	3318      	adds	r3, #24
 8006754:	4619      	mov	r1, r3
 8006756:	480e      	ldr	r0, [pc, #56]	; (8006790 <xTaskRemoveFromEventList+0xb8>)
 8006758:	f7fe fe73 	bl	8005442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <xTaskRemoveFromEventList+0xbc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	429a      	cmp	r2, r3
 8006768:	d905      	bls.n	8006776 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <xTaskRemoveFromEventList+0xc0>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	e001      	b.n	800677a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800677a:	697b      	ldr	r3, [r7, #20]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20001bcc 	.word	0x20001bcc
 8006788:	20001bac 	.word	0x20001bac
 800678c:	20001aa8 	.word	0x20001aa8
 8006790:	20001b64 	.word	0x20001b64
 8006794:	20001aa4 	.word	0x20001aa4
 8006798:	20001bb8 	.word	0x20001bb8

0800679c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <vTaskInternalSetTimeOutState+0x24>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <vTaskInternalSetTimeOutState+0x28>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	605a      	str	r2, [r3, #4]
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20001bbc 	.word	0x20001bbc
 80067c4:	20001ba8 	.word	0x20001ba8

080067c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	613b      	str	r3, [r7, #16]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60fb      	str	r3, [r7, #12]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800680a:	f000 fb1f 	bl	8006e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800680e:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <xTaskCheckForTimeOut+0xbc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d102      	bne.n	800682e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e023      	b.n	8006876 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <xTaskCheckForTimeOut+0xc0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d007      	beq.n	800684a <xTaskCheckForTimeOut+0x82>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	429a      	cmp	r2, r3
 8006842:	d302      	bcc.n	800684a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e015      	b.n	8006876 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	429a      	cmp	r2, r3
 8006852:	d20b      	bcs.n	800686c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ff9b 	bl	800679c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e004      	b.n	8006876 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006876:	f000 fb19 	bl	8006eac <vPortExitCritical>

	return xReturn;
 800687a:	69fb      	ldr	r3, [r7, #28]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20001ba8 	.word	0x20001ba8
 8006888:	20001bbc 	.word	0x20001bbc

0800688c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006890:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <vTaskMissedYield+0x14>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
}
 8006896:	bf00      	nop
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20001bb8 	.word	0x20001bb8

080068a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068ac:	f000 f852 	bl	8006954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <prvIdleTask+0x28>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d9f9      	bls.n	80068ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80068b8:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <prvIdleTask+0x2c>)
 80068ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068c8:	e7f0      	b.n	80068ac <prvIdleTask+0x8>
 80068ca:	bf00      	nop
 80068cc:	20001aa8 	.word	0x20001aa8
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	e00c      	b.n	80068fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4a12      	ldr	r2, [pc, #72]	; (8006934 <prvInitialiseTaskLists+0x60>)
 80068ec:	4413      	add	r3, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fd7c 	bl	80053ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3301      	adds	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d9ef      	bls.n	80068e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006900:	480d      	ldr	r0, [pc, #52]	; (8006938 <prvInitialiseTaskLists+0x64>)
 8006902:	f7fe fd73 	bl	80053ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006906:	480d      	ldr	r0, [pc, #52]	; (800693c <prvInitialiseTaskLists+0x68>)
 8006908:	f7fe fd70 	bl	80053ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800690c:	480c      	ldr	r0, [pc, #48]	; (8006940 <prvInitialiseTaskLists+0x6c>)
 800690e:	f7fe fd6d 	bl	80053ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006912:	480c      	ldr	r0, [pc, #48]	; (8006944 <prvInitialiseTaskLists+0x70>)
 8006914:	f7fe fd6a 	bl	80053ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006918:	480b      	ldr	r0, [pc, #44]	; (8006948 <prvInitialiseTaskLists+0x74>)
 800691a:	f7fe fd67 	bl	80053ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <prvInitialiseTaskLists+0x78>)
 8006920:	4a05      	ldr	r2, [pc, #20]	; (8006938 <prvInitialiseTaskLists+0x64>)
 8006922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <prvInitialiseTaskLists+0x7c>)
 8006926:	4a05      	ldr	r2, [pc, #20]	; (800693c <prvInitialiseTaskLists+0x68>)
 8006928:	601a      	str	r2, [r3, #0]
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20001aa8 	.word	0x20001aa8
 8006938:	20001b34 	.word	0x20001b34
 800693c:	20001b48 	.word	0x20001b48
 8006940:	20001b64 	.word	0x20001b64
 8006944:	20001b78 	.word	0x20001b78
 8006948:	20001b90 	.word	0x20001b90
 800694c:	20001b5c 	.word	0x20001b5c
 8006950:	20001b60 	.word	0x20001b60

08006954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800695a:	e019      	b.n	8006990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800695c:	f000 fa76 	bl	8006e4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006960:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <prvCheckTasksWaitingTermination+0x50>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fdc3 	bl	80054f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006972:	4b0d      	ldr	r3, [pc, #52]	; (80069a8 <prvCheckTasksWaitingTermination+0x54>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a0b      	ldr	r2, [pc, #44]	; (80069a8 <prvCheckTasksWaitingTermination+0x54>)
 800697a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <prvCheckTasksWaitingTermination+0x58>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3b01      	subs	r3, #1
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <prvCheckTasksWaitingTermination+0x58>)
 8006984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006986:	f000 fa91 	bl	8006eac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f810 	bl	80069b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <prvCheckTasksWaitingTermination+0x58>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e1      	bne.n	800695c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20001b78 	.word	0x20001b78
 80069a8:	20001ba4 	.word	0x20001ba4
 80069ac:	20001b8c 	.word	0x20001b8c

080069b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d108      	bne.n	80069d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fc04 	bl	80071d4 <vPortFree>
				vPortFree( pxTCB );
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fc01 	bl	80071d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069d2:	e018      	b.n	8006a06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d103      	bne.n	80069e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fbf8 	bl	80071d4 <vPortFree>
	}
 80069e4:	e00f      	b.n	8006a06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d00a      	beq.n	8006a06 <prvDeleteTCB+0x56>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <prvDeleteTCB+0x54>
	}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <prvResetNextTaskUnblockTime+0x40>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <prvResetNextTaskUnblockTime+0x14>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <prvResetNextTaskUnblockTime+0x16>
 8006a24:	2300      	movs	r3, #0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <prvResetNextTaskUnblockTime+0x44>)
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a32:	e008      	b.n	8006a46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <prvResetNextTaskUnblockTime+0x40>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <prvResetNextTaskUnblockTime+0x44>)
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr
 8006a50:	20001b5c 	.word	0x20001b5c
 8006a54:	20001bc4 	.word	0x20001bc4

08006a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <xTaskGetSchedulerState+0x34>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a66:	2301      	movs	r3, #1
 8006a68:	607b      	str	r3, [r7, #4]
 8006a6a:	e008      	b.n	8006a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a6c:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <xTaskGetSchedulerState+0x38>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a74:	2302      	movs	r3, #2
 8006a76:	607b      	str	r3, [r7, #4]
 8006a78:	e001      	b.n	8006a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a7e:	687b      	ldr	r3, [r7, #4]
	}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20001bb0 	.word	0x20001bb0
 8006a90:	20001bcc 	.word	0x20001bcc

08006a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d06e      	beq.n	8006b88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aaa:	4b3a      	ldr	r3, [pc, #232]	; (8006b94 <xTaskPriorityDisinherit+0x100>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d00a      	beq.n	8006aca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60bb      	str	r3, [r7, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aec:	1e5a      	subs	r2, r3, #1
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d044      	beq.n	8006b88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d140      	bne.n	8006b88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fcf4 	bl	80054f8 <uxListRemove>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d115      	bne.n	8006b42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	491f      	ldr	r1, [pc, #124]	; (8006b98 <xTaskPriorityDisinherit+0x104>)
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xTaskPriorityDisinherit+0xae>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	2201      	movs	r2, #1
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43da      	mvns	r2, r3
 8006b38:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <xTaskPriorityDisinherit+0x108>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <xTaskPriorityDisinherit+0x108>)
 8006b40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	f1c3 0207 	rsb	r2, r3, #7
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	409a      	lsls	r2, r3
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <xTaskPriorityDisinherit+0x108>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <xTaskPriorityDisinherit+0x108>)
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4a08      	ldr	r2, [pc, #32]	; (8006b98 <xTaskPriorityDisinherit+0x104>)
 8006b76:	441a      	add	r2, r3
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f7fe fc5f 	bl	8005442 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b88:	697b      	ldr	r3, [r7, #20]
	}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20001aa4 	.word	0x20001aa4
 8006b98:	20001aa8 	.word	0x20001aa8
 8006b9c:	20001bac 	.word	0x20001bac

08006ba0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006baa:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fc9e 	bl	80054f8 <uxListRemove>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006bc2:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	2201      	movs	r2, #1
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	43da      	mvns	r2, r3
 8006bd0:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	4a20      	ldr	r2, [pc, #128]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d10a      	bne.n	8006bf8 <prvAddCurrentTaskToDelayedList+0x58>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	481a      	ldr	r0, [pc, #104]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006bf2:	f7fe fc26 	bl	8005442 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bf6:	e026      	b.n	8006c46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c00:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d209      	bcs.n	8006c24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c10:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fe fc33 	bl	8005488 <vListInsert>
}
 8006c22:	e010      	b.n	8006c46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c24:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f7fe fc29 	bl	8005488 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d202      	bcs.n	8006c46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c40:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6013      	str	r3, [r2, #0]
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20001ba8 	.word	0x20001ba8
 8006c54:	20001aa4 	.word	0x20001aa4
 8006c58:	20001bac 	.word	0x20001bac
 8006c5c:	20001b90 	.word	0x20001b90
 8006c60:	20001b60 	.word	0x20001b60
 8006c64:	20001b5c 	.word	0x20001b5c
 8006c68:	20001bc4 	.word	0x20001bc4

08006c6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3b04      	subs	r3, #4
 8006c7c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3b04      	subs	r3, #4
 8006c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c9c:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <pxPortInitialiseStack+0x54>)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3b14      	subs	r3, #20
 8006ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3b20      	subs	r3, #32
 8006cb2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	08006cc5 	.word	0x08006cc5

08006cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <prvTaskExitError+0x54>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd6:	d00a      	beq.n	8006cee <prvTaskExitError+0x2a>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	60fb      	str	r3, [r7, #12]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <prvTaskExitError+0x28>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	60bb      	str	r3, [r7, #8]
}
 8006d00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d02:	bf00      	nop
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0fc      	beq.n	8006d04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	2000000c 	.word	0x2000000c
 8006d1c:	00000000 	.word	0x00000000

08006d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006d3e:	4770      	bx	lr

08006d40 <pxCurrentTCBConst2>:
 8006d40:	20001aa4 	.word	0x20001aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006d48:	4806      	ldr	r0, [pc, #24]	; (8006d64 <prvPortStartFirstTask+0x1c>)
 8006d4a:	6800      	ldr	r0, [r0, #0]
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f380 8808 	msr	MSP, r0
 8006d52:	b662      	cpsie	i
 8006d54:	b661      	cpsie	f
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	df00      	svc	0
 8006d60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d62:	bf00      	nop
 8006d64:	e000ed08 	.word	0xe000ed08

08006d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d6e:	4b32      	ldr	r3, [pc, #200]	; (8006e38 <xPortStartScheduler+0xd0>)
 8006d70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	22ff      	movs	r2, #255	; 0xff
 8006d7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006d94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d96:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006d98:	2207      	movs	r2, #7
 8006d9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d9c:	e009      	b.n	8006db2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d9e:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006da6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d0ef      	beq.n	8006d9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dbe:	4b20      	ldr	r3, [pc, #128]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1c3 0307 	rsb	r3, r3, #7
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d00a      	beq.n	8006de0 <xPortStartScheduler+0x78>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60bb      	str	r3, [r7, #8]
}
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006de0:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006de8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006df4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dfe:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <xPortStartScheduler+0xdc>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a10      	ldr	r2, [pc, #64]	; (8006e44 <xPortStartScheduler+0xdc>)
 8006e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e0a:	4b0e      	ldr	r3, [pc, #56]	; (8006e44 <xPortStartScheduler+0xdc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a0d      	ldr	r2, [pc, #52]	; (8006e44 <xPortStartScheduler+0xdc>)
 8006e10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e16:	f000 f8b9 	bl	8006f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <xPortStartScheduler+0xe0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e20:	f7ff ff92 	bl	8006d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e24:	f7ff fbda 	bl	80065dc <vTaskSwitchContext>
	prvTaskExitError();
 8006e28:	f7ff ff4c 	bl	8006cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	e000e400 	.word	0xe000e400
 8006e3c:	20001bd0 	.word	0x20001bd0
 8006e40:	20001bd4 	.word	0x20001bd4
 8006e44:	e000ed20 	.word	0xe000ed20
 8006e48:	2000000c 	.word	0x2000000c

08006e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	607b      	str	r3, [r7, #4]
}
 8006e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <vPortEnterCritical+0x58>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <vPortEnterCritical+0x58>)
 8006e6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e70:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <vPortEnterCritical+0x58>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d10f      	bne.n	8006e98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <vPortEnterCritical+0x5c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	603b      	str	r3, [r7, #0]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <vPortEnterCritical+0x4a>
	}
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	2000000c 	.word	0x2000000c
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eb2:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <vPortExitCritical+0x4c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <vPortExitCritical+0x24>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	607b      	str	r3, [r7, #4]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ed0:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <vPortExitCritical+0x4c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <vPortExitCritical+0x4c>)
 8006ed8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <vPortExitCritical+0x4c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d105      	bne.n	8006eee <vPortExitCritical+0x42>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f383 8811 	msr	BASEPRI, r3
}
 8006eec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr
 8006ef8:	2000000c 	.word	0x2000000c
 8006efc:	00000000 	.word	0x00000000

08006f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f00:	f3ef 8009 	mrs	r0, PSP
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <pxCurrentTCBConst>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f10:	6010      	str	r0, [r2, #0]
 8006f12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006f16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f1a:	f380 8811 	msr	BASEPRI, r0
 8006f1e:	f7ff fb5d 	bl	80065dc <vTaskSwitchContext>
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f380 8811 	msr	BASEPRI, r0
 8006f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f2e:	6819      	ldr	r1, [r3, #0]
 8006f30:	6808      	ldr	r0, [r1, #0]
 8006f32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f36:	f380 8809 	msr	PSP, r0
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	4770      	bx	lr

08006f40 <pxCurrentTCBConst>:
 8006f40:	20001aa4 	.word	0x20001aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop

08006f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
}
 8006f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f62:	f7ff fa7d 	bl	8006460 <xTaskIncrementTick>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <SysTick_Handler+0x40>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f383 8811 	msr	BASEPRI, r3
}
 8006f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <vPortSetupTimerInterrupt+0x30>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <vPortSetupTimerInterrupt+0x34>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <vPortSetupTimerInterrupt+0x38>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a09      	ldr	r2, [pc, #36]	; (8006fc8 <vPortSetupTimerInterrupt+0x3c>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	4a08      	ldr	r2, [pc, #32]	; (8006fcc <vPortSetupTimerInterrupt+0x40>)
 8006faa:	3b01      	subs	r3, #1
 8006fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fae:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <vPortSetupTimerInterrupt+0x30>)
 8006fb0:	2207      	movs	r2, #7
 8006fb2:	601a      	str	r2, [r3, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr
 8006fbc:	e000e010 	.word	0xe000e010
 8006fc0:	e000e018 	.word	0xe000e018
 8006fc4:	20000000 	.word	0x20000000
 8006fc8:	10624dd3 	.word	0x10624dd3
 8006fcc:	e000e014 	.word	0xe000e014

08006fd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fd6:	f3ef 8305 	mrs	r3, IPSR
 8006fda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b0f      	cmp	r3, #15
 8006fe0:	d914      	bls.n	800700c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fe2:	4a16      	ldr	r2, [pc, #88]	; (800703c <vPortValidateInterruptPriority+0x6c>)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fec:	4b14      	ldr	r3, [pc, #80]	; (8007040 <vPortValidateInterruptPriority+0x70>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	7afa      	ldrb	r2, [r7, #11]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d20a      	bcs.n	800700c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	607b      	str	r3, [r7, #4]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <vPortValidateInterruptPriority+0x74>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <vPortValidateInterruptPriority+0x78>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d90a      	bls.n	8007032 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	603b      	str	r3, [r7, #0]
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <vPortValidateInterruptPriority+0x60>
	}
 8007032:	bf00      	nop
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr
 800703c:	e000e3f0 	.word	0xe000e3f0
 8007040:	20001bd0 	.word	0x20001bd0
 8007044:	e000ed0c 	.word	0xe000ed0c
 8007048:	20001bd4 	.word	0x20001bd4

0800704c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007058:	f7ff f958 	bl	800630c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800705c:	4b58      	ldr	r3, [pc, #352]	; (80071c0 <pvPortMalloc+0x174>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007064:	f000 f910 	bl	8007288 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007068:	4b56      	ldr	r3, [pc, #344]	; (80071c4 <pvPortMalloc+0x178>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4013      	ands	r3, r2
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 808e 	bne.w	8007192 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01d      	beq.n	80070b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800707c:	2208      	movs	r2, #8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d014      	beq.n	80070b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f023 0307 	bic.w	r3, r3, #7
 8007094:	3308      	adds	r3, #8
 8007096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <pvPortMalloc+0x6c>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	617b      	str	r3, [r7, #20]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d069      	beq.n	8007192 <pvPortMalloc+0x146>
 80070be:	4b42      	ldr	r3, [pc, #264]	; (80071c8 <pvPortMalloc+0x17c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d864      	bhi.n	8007192 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070c8:	4b40      	ldr	r3, [pc, #256]	; (80071cc <pvPortMalloc+0x180>)
 80070ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070cc:	4b3f      	ldr	r3, [pc, #252]	; (80071cc <pvPortMalloc+0x180>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070d2:	e004      	b.n	80070de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d903      	bls.n	80070f0 <pvPortMalloc+0xa4>
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f1      	bne.n	80070d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070f0:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <pvPortMalloc+0x174>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d04b      	beq.n	8007192 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2208      	movs	r2, #8
 8007100:	4413      	add	r3, r2
 8007102:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	1ad2      	subs	r2, r2, r3
 8007114:	2308      	movs	r3, #8
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	429a      	cmp	r2, r3
 800711a:	d91f      	bls.n	800715c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800711c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <pvPortMalloc+0xf8>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	613b      	str	r3, [r7, #16]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007156:	69b8      	ldr	r0, [r7, #24]
 8007158:	f000 f8f8 	bl	800734c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800715c:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <pvPortMalloc+0x17c>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <pvPortMalloc+0x17c>)
 8007168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <pvPortMalloc+0x17c>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <pvPortMalloc+0x184>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d203      	bcs.n	800717e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <pvPortMalloc+0x17c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <pvPortMalloc+0x184>)
 800717c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <pvPortMalloc+0x178>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	431a      	orrs	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007192:	f7ff f8c9 	bl	8006328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <pvPortMalloc+0x16a>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60fb      	str	r3, [r7, #12]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <pvPortMalloc+0x168>
	return pvReturn;
 80071b6:	69fb      	ldr	r3, [r7, #28]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3728      	adds	r7, #40	; 0x28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20002be0 	.word	0x20002be0
 80071c4:	20002bec 	.word	0x20002bec
 80071c8:	20002be4 	.word	0x20002be4
 80071cc:	20002bd8 	.word	0x20002bd8
 80071d0:	20002be8 	.word	0x20002be8

080071d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d048      	beq.n	8007278 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071e6:	2308      	movs	r3, #8
 80071e8:	425b      	negs	r3, r3
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	4b21      	ldr	r3, [pc, #132]	; (8007280 <vPortFree+0xac>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <vPortFree+0x44>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	60fb      	str	r3, [r7, #12]
}
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <vPortFree+0x62>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60bb      	str	r3, [r7, #8]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	4b11      	ldr	r3, [pc, #68]	; (8007280 <vPortFree+0xac>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d019      	beq.n	8007278 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d115      	bne.n	8007278 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <vPortFree+0xac>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	43db      	mvns	r3, r3
 8007256:	401a      	ands	r2, r3
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800725c:	f7ff f856 	bl	800630c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4b07      	ldr	r3, [pc, #28]	; (8007284 <vPortFree+0xb0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4413      	add	r3, r2
 800726a:	4a06      	ldr	r2, [pc, #24]	; (8007284 <vPortFree+0xb0>)
 800726c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800726e:	6938      	ldr	r0, [r7, #16]
 8007270:	f000 f86c 	bl	800734c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007274:	f7ff f858 	bl	8006328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007278:	bf00      	nop
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20002bec 	.word	0x20002bec
 8007284:	20002be4 	.word	0x20002be4

08007288 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800728e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007292:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007294:	4b27      	ldr	r3, [pc, #156]	; (8007334 <prvHeapInit+0xac>)
 8007296:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00c      	beq.n	80072bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3307      	adds	r3, #7
 80072a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	4a1f      	ldr	r2, [pc, #124]	; (8007334 <prvHeapInit+0xac>)
 80072b8:	4413      	add	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <prvHeapInit+0xb0>)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072c6:	4b1c      	ldr	r3, [pc, #112]	; (8007338 <prvHeapInit+0xb0>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4413      	add	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072d4:	2208      	movs	r2, #8
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0307 	bic.w	r3, r3, #7
 80072e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a15      	ldr	r2, [pc, #84]	; (800733c <prvHeapInit+0xb4>)
 80072e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <prvHeapInit+0xb4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <prvHeapInit+0xb4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007308:	4b0c      	ldr	r3, [pc, #48]	; (800733c <prvHeapInit+0xb4>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	4a0a      	ldr	r2, [pc, #40]	; (8007340 <prvHeapInit+0xb8>)
 8007316:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4a09      	ldr	r2, [pc, #36]	; (8007344 <prvHeapInit+0xbc>)
 800731e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <prvHeapInit+0xc0>)
 8007322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007326:	601a      	str	r2, [r3, #0]
}
 8007328:	bf00      	nop
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20001bd8 	.word	0x20001bd8
 8007338:	20002bd8 	.word	0x20002bd8
 800733c:	20002be0 	.word	0x20002be0
 8007340:	20002be8 	.word	0x20002be8
 8007344:	20002be4 	.word	0x20002be4
 8007348:	20002bec 	.word	0x20002bec

0800734c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007354:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <prvInsertBlockIntoFreeList+0xa8>)
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e002      	b.n	8007360 <prvInsertBlockIntoFreeList+0x14>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d8f7      	bhi.n	800735a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d108      	bne.n	800738e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	441a      	add	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	441a      	add	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d118      	bne.n	80073d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <prvInsertBlockIntoFreeList+0xac>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d00d      	beq.n	80073ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	441a      	add	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e008      	b.n	80073dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <prvInsertBlockIntoFreeList+0xac>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e003      	b.n	80073dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d002      	beq.n	80073ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ea:	bf00      	nop
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr
 80073f4:	20002bd8 	.word	0x20002bd8
 80073f8:	20002be0 	.word	0x20002be0

080073fc <__libc_init_array>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	2600      	movs	r6, #0
 8007400:	4d0c      	ldr	r5, [pc, #48]	; (8007434 <__libc_init_array+0x38>)
 8007402:	4c0d      	ldr	r4, [pc, #52]	; (8007438 <__libc_init_array+0x3c>)
 8007404:	1b64      	subs	r4, r4, r5
 8007406:	10a4      	asrs	r4, r4, #2
 8007408:	42a6      	cmp	r6, r4
 800740a:	d109      	bne.n	8007420 <__libc_init_array+0x24>
 800740c:	f000 f830 	bl	8007470 <_init>
 8007410:	2600      	movs	r6, #0
 8007412:	4d0a      	ldr	r5, [pc, #40]	; (800743c <__libc_init_array+0x40>)
 8007414:	4c0a      	ldr	r4, [pc, #40]	; (8007440 <__libc_init_array+0x44>)
 8007416:	1b64      	subs	r4, r4, r5
 8007418:	10a4      	asrs	r4, r4, #2
 800741a:	42a6      	cmp	r6, r4
 800741c:	d105      	bne.n	800742a <__libc_init_array+0x2e>
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	f855 3b04 	ldr.w	r3, [r5], #4
 8007424:	4798      	blx	r3
 8007426:	3601      	adds	r6, #1
 8007428:	e7ee      	b.n	8007408 <__libc_init_array+0xc>
 800742a:	f855 3b04 	ldr.w	r3, [r5], #4
 800742e:	4798      	blx	r3
 8007430:	3601      	adds	r6, #1
 8007432:	e7f2      	b.n	800741a <__libc_init_array+0x1e>
 8007434:	080075b4 	.word	0x080075b4
 8007438:	080075b4 	.word	0x080075b4
 800743c:	080075b4 	.word	0x080075b4
 8007440:	080075b8 	.word	0x080075b8

08007444 <memcpy>:
 8007444:	440a      	add	r2, r1
 8007446:	4291      	cmp	r1, r2
 8007448:	f100 33ff 	add.w	r3, r0, #4294967295
 800744c:	d100      	bne.n	8007450 <memcpy+0xc>
 800744e:	4770      	bx	lr
 8007450:	b510      	push	{r4, lr}
 8007452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007456:	4291      	cmp	r1, r2
 8007458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800745c:	d1f9      	bne.n	8007452 <memcpy+0xe>
 800745e:	bd10      	pop	{r4, pc}

08007460 <memset>:
 8007460:	4603      	mov	r3, r0
 8007462:	4402      	add	r2, r0
 8007464:	4293      	cmp	r3, r2
 8007466:	d100      	bne.n	800746a <memset+0xa>
 8007468:	4770      	bx	lr
 800746a:	f803 1b01 	strb.w	r1, [r3], #1
 800746e:	e7f9      	b.n	8007464 <memset+0x4>

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	bf00      	nop
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
