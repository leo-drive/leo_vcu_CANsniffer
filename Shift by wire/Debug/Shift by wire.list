
Shift by wire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007218  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800752c  0800752c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800752c  0800752c  0001752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007534  08007534  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800753c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bd8  20000010  0800754c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002be8  0800754c  00022be8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f25  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332a  00000000  00000000  00033f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00037288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00038500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e0d  00000000  00000000  00039600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143f5  00000000  00000000  0003c40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0a6d  00000000  00000000  00050802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011126f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec8  00000000  00000000  001112c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	080073f0 	.word	0x080073f0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	080073f0 	.word	0x080073f0

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2iz>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d215      	bcs.n	8000a02 <__aeabi_d2iz+0x36>
 80009d6:	d511      	bpl.n	80009fc <__aeabi_d2iz+0x30>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d912      	bls.n	8000a08 <__aeabi_d2iz+0x3c>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f2:	fa23 f002 	lsr.w	r0, r3, r2
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d105      	bne.n	8000a14 <__aeabi_d2iz+0x48>
 8000a08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	bf08      	it	eq
 8000a0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_frsub>:
 8000a1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a20:	e002      	b.n	8000a28 <__addsf3>
 8000a22:	bf00      	nop

08000a24 <__aeabi_fsub>:
 8000a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a28 <__addsf3>:
 8000a28:	0042      	lsls	r2, r0, #1
 8000a2a:	bf1f      	itttt	ne
 8000a2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a30:	ea92 0f03 	teqne	r2, r3
 8000a34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3c:	d06a      	beq.n	8000b14 <__addsf3+0xec>
 8000a3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a46:	bfc1      	itttt	gt
 8000a48:	18d2      	addgt	r2, r2, r3
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	4048      	eorgt	r0, r1
 8000a4e:	4041      	eorgt	r1, r0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	2b19      	cmp	r3, #25
 8000a56:	bf88      	it	hi
 8000a58:	4770      	bxhi	lr
 8000a5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4249      	negne	r1, r1
 8000a7a:	ea92 0f03 	teq	r2, r3
 8000a7e:	d03f      	beq.n	8000b00 <__addsf3+0xd8>
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	fa41 fc03 	asr.w	ip, r1, r3
 8000a88:	eb10 000c 	adds.w	r0, r0, ip
 8000a8c:	f1c3 0320 	rsb	r3, r3, #32
 8000a90:	fa01 f103 	lsl.w	r1, r1, r3
 8000a94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__addsf3+0x78>
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa4:	d313      	bcc.n	8000ace <__addsf3+0xa6>
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aaa:	d306      	bcc.n	8000aba <__addsf3+0x92>
 8000aac:	0840      	lsrs	r0, r0, #1
 8000aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ab2:	f102 0201 	add.w	r2, r2, #1
 8000ab6:	2afe      	cmp	r2, #254	; 0xfe
 8000ab8:	d251      	bcs.n	8000b5e <__addsf3+0x136>
 8000aba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000abe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ac2:	bf08      	it	eq
 8000ac4:	f020 0001 	biceq.w	r0, r0, #1
 8000ac8:	ea40 0003 	orr.w	r0, r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	eb40 0000 	adc.w	r0, r0, r0
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000adc:	d2ed      	bcs.n	8000aba <__addsf3+0x92>
 8000ade:	fab0 fc80 	clz	ip, r0
 8000ae2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aee:	bfaa      	itet	ge
 8000af0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af4:	4252      	neglt	r2, r2
 8000af6:	4318      	orrge	r0, r3
 8000af8:	bfbc      	itt	lt
 8000afa:	40d0      	lsrlt	r0, r2
 8000afc:	4318      	orrlt	r0, r3
 8000afe:	4770      	bx	lr
 8000b00:	f092 0f00 	teq	r2, #0
 8000b04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b08:	bf06      	itte	eq
 8000b0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0e:	3201      	addeq	r2, #1
 8000b10:	3b01      	subne	r3, #1
 8000b12:	e7b5      	b.n	8000a80 <__addsf3+0x58>
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d021      	beq.n	8000b68 <__addsf3+0x140>
 8000b24:	ea92 0f03 	teq	r2, r3
 8000b28:	d004      	beq.n	8000b34 <__addsf3+0x10c>
 8000b2a:	f092 0f00 	teq	r2, #0
 8000b2e:	bf08      	it	eq
 8000b30:	4608      	moveq	r0, r1
 8000b32:	4770      	bx	lr
 8000b34:	ea90 0f01 	teq	r0, r1
 8000b38:	bf1c      	itt	ne
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	4770      	bxne	lr
 8000b3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b42:	d104      	bne.n	8000b4e <__addsf3+0x126>
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	bf28      	it	cs
 8000b48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b52:	bf3c      	itt	cc
 8000b54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bxcc	lr
 8000b5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	4770      	bx	lr
 8000b68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b6c:	bf16      	itet	ne
 8000b6e:	4608      	movne	r0, r1
 8000b70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b74:	4601      	movne	r1, r0
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	bf06      	itte	eq
 8000b7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7e:	ea90 0f01 	teqeq	r0, r1
 8000b82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_ui2f>:
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e004      	b.n	8000b98 <__aeabi_i2f+0x8>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_i2f>:
 8000b90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	bf48      	it	mi
 8000b96:	4240      	negmi	r0, r0
 8000b98:	ea5f 0c00 	movs.w	ip, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	e01c      	b.n	8000be6 <__aeabi_l2f+0x2a>

08000bac <__aeabi_ul2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <__aeabi_l2f+0x14>
 8000bba:	bf00      	nop

08000bbc <__aeabi_l2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_l2f+0x14>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	ea5f 0c01 	movs.w	ip, r1
 8000bd4:	bf02      	ittt	eq
 8000bd6:	4684      	moveq	ip, r0
 8000bd8:	4601      	moveq	r1, r0
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000be0:	bf08      	it	eq
 8000be2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bea:	fabc f28c 	clz	r2, ip
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf4:	db10      	blt.n	8000c18 <__aeabi_l2f+0x5c>
 8000bf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f102 0220 	add.w	r2, r2, #32
 8000c1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c28:	fa21 f202 	lsr.w	r2, r1, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_fmul>:
 8000c38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c40:	bf1e      	ittt	ne
 8000c42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c46:	ea92 0f0c 	teqne	r2, ip
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d06f      	beq.n	8000d30 <__aeabi_fmul+0xf8>
 8000c50:	441a      	add	r2, r3
 8000c52:	ea80 0c01 	eor.w	ip, r0, r1
 8000c56:	0240      	lsls	r0, r0, #9
 8000c58:	bf18      	it	ne
 8000c5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5e:	d01e      	beq.n	8000c9e <__aeabi_fmul+0x66>
 8000c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c78:	bf3e      	ittt	cc
 8000c7a:	0049      	lslcc	r1, r1, #1
 8000c7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	ea40 0001 	orr.w	r0, r0, r1
 8000c86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c8a:	2afd      	cmp	r2, #253	; 0xfd
 8000c8c:	d81d      	bhi.n	8000cca <__aeabi_fmul+0x92>
 8000c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	f090 0f00 	teq	r0, #0
 8000ca2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	0249      	lsleq	r1, r1, #9
 8000caa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cb2:	3a7f      	subs	r2, #127	; 0x7f
 8000cb4:	bfc2      	ittt	gt
 8000cb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cbe:	4770      	bxgt	lr
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	dc5d      	bgt.n	8000d88 <__aeabi_fmul+0x150>
 8000ccc:	f112 0f19 	cmn.w	r2, #25
 8000cd0:	bfdc      	itt	le
 8000cd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cd6:	4770      	bxle	lr
 8000cd8:	f1c2 0200 	rsb	r2, r2, #0
 8000cdc:	0041      	lsls	r1, r0, #1
 8000cde:	fa21 f102 	lsr.w	r1, r1, r2
 8000ce2:	f1c2 0220 	rsb	r2, r2, #32
 8000ce6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cee:	f140 0000 	adc.w	r0, r0, #0
 8000cf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf6:	bf08      	it	eq
 8000cf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfc:	4770      	bx	lr
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xce>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xe6>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fmul+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	bf18      	it	ne
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d00a      	beq.n	8000d56 <__aeabi_fmul+0x11e>
 8000d40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d44:	bf18      	it	ne
 8000d46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	d1d8      	bne.n	8000cfe <__aeabi_fmul+0xc6>
 8000d4c:	ea80 0001 	eor.w	r0, r0, r1
 8000d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	bf17      	itett	ne
 8000d5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d60:	4608      	moveq	r0, r1
 8000d62:	f091 0f00 	teqne	r1, #0
 8000d66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d6a:	d014      	beq.n	8000d96 <__aeabi_fmul+0x15e>
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	d101      	bne.n	8000d76 <__aeabi_fmul+0x13e>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d10f      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d76:	ea93 0f0c 	teq	r3, ip
 8000d7a:	d103      	bne.n	8000d84 <__aeabi_fmul+0x14c>
 8000d7c:	024b      	lsls	r3, r1, #9
 8000d7e:	bf18      	it	ne
 8000d80:	4608      	movne	r0, r1
 8000d82:	d108      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_fdiv>:
 8000da0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da8:	bf1e      	ittt	ne
 8000daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dae:	ea92 0f0c 	teqne	r2, ip
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d069      	beq.n	8000e8c <__aeabi_fdiv+0xec>
 8000db8:	eba2 0203 	sub.w	r2, r2, r3
 8000dbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc6:	d037      	beq.n	8000e38 <__aeabi_fdiv+0x98>
 8000dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf38      	it	cc
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000de2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000de6:	428b      	cmp	r3, r1
 8000de8:	bf24      	itt	cs
 8000dea:	1a5b      	subcs	r3, r3, r1
 8000dec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df4:	bf24      	itt	cs
 8000df6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e02:	bf24      	itt	cs
 8000e04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e22:	d1e0      	bne.n	8000de6 <__aeabi_fdiv+0x46>
 8000e24:	2afd      	cmp	r2, #253	; 0xfd
 8000e26:	f63f af50 	bhi.w	8000cca <__aeabi_fmul+0x92>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e40:	327f      	adds	r2, #127	; 0x7f
 8000e42:	bfc2      	ittt	gt
 8000e44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4c:	4770      	bxgt	lr
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	3a01      	subs	r2, #1
 8000e58:	e737      	b.n	8000cca <__aeabi_fmul+0x92>
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xc2>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xda>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e795      	b.n	8000db8 <__aeabi_fdiv+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d108      	bne.n	8000ea8 <__aeabi_fdiv+0x108>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	f47f af7d 	bne.w	8000d96 <__aeabi_fmul+0x15e>
 8000e9c:	ea93 0f0c 	teq	r3, ip
 8000ea0:	f47f af70 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e776      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fdiv+0x118>
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	f43f af4c 	beq.w	8000d4c <__aeabi_fmul+0x114>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e76e      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000eb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ebc:	bf18      	it	ne
 8000ebe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	d1ca      	bne.n	8000e5a <__aeabi_fdiv+0xba>
 8000ec4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec8:	f47f af5c 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ecc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ed0:	f47f af3c 	bne.w	8000d4c <__aeabi_fmul+0x114>
 8000ed4:	e75f      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ed6:	bf00      	nop

08000ed8 <__gesf2>:
 8000ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8000edc:	e006      	b.n	8000eec <__cmpsf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__lesf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	e002      	b.n	8000eec <__cmpsf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__cmpsf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	bf18      	it	ne
 8000efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f02:	d011      	beq.n	8000f28 <__cmpsf2+0x40>
 8000f04:	b001      	add	sp, #4
 8000f06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f0a:	bf18      	it	ne
 8000f0c:	ea90 0f01 	teqne	r0, r1
 8000f10:	bf58      	it	pl
 8000f12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f16:	bf88      	it	hi
 8000f18:	17c8      	asrhi	r0, r1, #31
 8000f1a:	bf38      	it	cc
 8000f1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f20:	bf18      	it	ne
 8000f22:	f040 0001 	orrne.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	d102      	bne.n	8000f34 <__cmpsf2+0x4c>
 8000f2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f32:	d105      	bne.n	8000f40 <__cmpsf2+0x58>
 8000f34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f38:	d1e4      	bne.n	8000f04 <__cmpsf2+0x1c>
 8000f3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f3e:	d0e1      	beq.n	8000f04 <__cmpsf2+0x1c>
 8000f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__aeabi_cfrcmple>:
 8000f48:	4684      	mov	ip, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4661      	mov	r1, ip
 8000f4e:	e7ff      	b.n	8000f50 <__aeabi_cfcmpeq>

08000f50 <__aeabi_cfcmpeq>:
 8000f50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f52:	f7ff ffc9 	bl	8000ee8 <__cmpsf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf48      	it	mi
 8000f5a:	f110 0f00 	cmnmi.w	r0, #0
 8000f5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f60 <__aeabi_fcmpeq>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff fff4 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f68:	bf0c      	ite	eq
 8000f6a:	2001      	moveq	r0, #1
 8000f6c:	2000      	movne	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmplt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffea 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmple>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffe0 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f90:	bf94      	ite	ls
 8000f92:	2001      	movls	r0, #1
 8000f94:	2000      	movhi	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpge>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffd2 	bl	8000f48 <__aeabi_cfrcmple>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpgt>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffc8 	bl	8000f48 <__aeabi_cfrcmple>
 8000fb8:	bf34      	ite	cc
 8000fba:	2001      	movcc	r0, #1
 8000fbc:	2000      	movcs	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b976 	b.w	80012c8 <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f806 	bl	8000ff4 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9e08      	ldr	r6, [sp, #32]
 8000ffa:	460d      	mov	r5, r1
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	4688      	mov	r8, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d14d      	bne.n	80010a0 <__udivmoddi4+0xac>
 8001004:	428a      	cmp	r2, r1
 8001006:	4694      	mov	ip, r2
 8001008:	d968      	bls.n	80010dc <__udivmoddi4+0xe8>
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b152      	cbz	r2, 8001026 <__udivmoddi4+0x32>
 8001010:	fa01 f302 	lsl.w	r3, r1, r2
 8001014:	f1c2 0120 	rsb	r1, r2, #32
 8001018:	fa20 f101 	lsr.w	r1, r0, r1
 800101c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001020:	ea41 0803 	orr.w	r8, r1, r3
 8001024:	4094      	lsls	r4, r2
 8001026:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800102a:	fbb8 f7f1 	udiv	r7, r8, r1
 800102e:	fa1f fe8c 	uxth.w	lr, ip
 8001032:	fb01 8817 	mls	r8, r1, r7, r8
 8001036:	fb07 f00e 	mul.w	r0, r7, lr
 800103a:	0c23      	lsrs	r3, r4, #16
 800103c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001040:	4298      	cmp	r0, r3
 8001042:	d90a      	bls.n	800105a <__udivmoddi4+0x66>
 8001044:	eb1c 0303 	adds.w	r3, ip, r3
 8001048:	f107 35ff 	add.w	r5, r7, #4294967295
 800104c:	f080 811e 	bcs.w	800128c <__udivmoddi4+0x298>
 8001050:	4298      	cmp	r0, r3
 8001052:	f240 811b 	bls.w	800128c <__udivmoddi4+0x298>
 8001056:	3f02      	subs	r7, #2
 8001058:	4463      	add	r3, ip
 800105a:	1a1b      	subs	r3, r3, r0
 800105c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001060:	fb01 3310 	mls	r3, r1, r0, r3
 8001064:	fb00 fe0e 	mul.w	lr, r0, lr
 8001068:	b2a4      	uxth	r4, r4
 800106a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800106e:	45a6      	cmp	lr, r4
 8001070:	d90a      	bls.n	8001088 <__udivmoddi4+0x94>
 8001072:	eb1c 0404 	adds.w	r4, ip, r4
 8001076:	f100 33ff 	add.w	r3, r0, #4294967295
 800107a:	f080 8109 	bcs.w	8001290 <__udivmoddi4+0x29c>
 800107e:	45a6      	cmp	lr, r4
 8001080:	f240 8106 	bls.w	8001290 <__udivmoddi4+0x29c>
 8001084:	4464      	add	r4, ip
 8001086:	3802      	subs	r0, #2
 8001088:	2100      	movs	r1, #0
 800108a:	eba4 040e 	sub.w	r4, r4, lr
 800108e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001092:	b11e      	cbz	r6, 800109c <__udivmoddi4+0xa8>
 8001094:	2300      	movs	r3, #0
 8001096:	40d4      	lsrs	r4, r2
 8001098:	e9c6 4300 	strd	r4, r3, [r6]
 800109c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0xc2>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	f000 80ee 	beq.w	8001286 <__udivmoddi4+0x292>
 80010aa:	2100      	movs	r1, #0
 80010ac:	e9c6 0500 	strd	r0, r5, [r6]
 80010b0:	4608      	mov	r0, r1
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	fab3 f183 	clz	r1, r3
 80010ba:	2900      	cmp	r1, #0
 80010bc:	d14a      	bne.n	8001154 <__udivmoddi4+0x160>
 80010be:	42ab      	cmp	r3, r5
 80010c0:	d302      	bcc.n	80010c8 <__udivmoddi4+0xd4>
 80010c2:	4282      	cmp	r2, r0
 80010c4:	f200 80fc 	bhi.w	80012c0 <__udivmoddi4+0x2cc>
 80010c8:	1a84      	subs	r4, r0, r2
 80010ca:	eb65 0303 	sbc.w	r3, r5, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	4698      	mov	r8, r3
 80010d2:	2e00      	cmp	r6, #0
 80010d4:	d0e2      	beq.n	800109c <__udivmoddi4+0xa8>
 80010d6:	e9c6 4800 	strd	r4, r8, [r6]
 80010da:	e7df      	b.n	800109c <__udivmoddi4+0xa8>
 80010dc:	b902      	cbnz	r2, 80010e0 <__udivmoddi4+0xec>
 80010de:	deff      	udf	#255	; 0xff
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	f040 8091 	bne.w	800120c <__udivmoddi4+0x218>
 80010ea:	eba1 000c 	sub.w	r0, r1, ip
 80010ee:	2101      	movs	r1, #1
 80010f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f4:	fa1f fe8c 	uxth.w	lr, ip
 80010f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80010fc:	fb07 0013 	mls	r0, r7, r3, r0
 8001100:	0c25      	lsrs	r5, r4, #16
 8001102:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001106:	fb0e f003 	mul.w	r0, lr, r3
 800110a:	42a8      	cmp	r0, r5
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x12c>
 800110e:	eb1c 0505 	adds.w	r5, ip, r5
 8001112:	f103 38ff 	add.w	r8, r3, #4294967295
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x12a>
 8001118:	42a8      	cmp	r0, r5
 800111a:	f200 80ce 	bhi.w	80012ba <__udivmoddi4+0x2c6>
 800111e:	4643      	mov	r3, r8
 8001120:	1a2d      	subs	r5, r5, r0
 8001122:	fbb5 f0f7 	udiv	r0, r5, r7
 8001126:	fb07 5510 	mls	r5, r7, r0, r5
 800112a:	fb0e fe00 	mul.w	lr, lr, r0
 800112e:	b2a4      	uxth	r4, r4
 8001130:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x156>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x154>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80b6 	bhi.w	80012b4 <__udivmoddi4+0x2c0>
 8001148:	4628      	mov	r0, r5
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001152:	e79e      	b.n	8001092 <__udivmoddi4+0x9e>
 8001154:	f1c1 0720 	rsb	r7, r1, #32
 8001158:	408b      	lsls	r3, r1
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa25 fa07 	lsr.w	sl, r5, r7
 8001166:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800116a:	fbba f8f9 	udiv	r8, sl, r9
 800116e:	fa20 f307 	lsr.w	r3, r0, r7
 8001172:	fb09 aa18 	mls	sl, r9, r8, sl
 8001176:	408d      	lsls	r5, r1
 8001178:	fa1f fe8c 	uxth.w	lr, ip
 800117c:	431d      	orrs	r5, r3
 800117e:	fa00 f301 	lsl.w	r3, r0, r1
 8001182:	fb08 f00e 	mul.w	r0, r8, lr
 8001186:	0c2c      	lsrs	r4, r5, #16
 8001188:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800118c:	42a0      	cmp	r0, r4
 800118e:	fa02 f201 	lsl.w	r2, r2, r1
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b8>
 8001194:	eb1c 0404 	adds.w	r4, ip, r4
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295
 800119c:	f080 8088 	bcs.w	80012b0 <__udivmoddi4+0x2bc>
 80011a0:	42a0      	cmp	r0, r4
 80011a2:	f240 8085 	bls.w	80012b0 <__udivmoddi4+0x2bc>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4464      	add	r4, ip
 80011ac:	1a24      	subs	r4, r4, r0
 80011ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80011b2:	fb09 4410 	mls	r4, r9, r0, r4
 80011b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ba:	b2ad      	uxth	r5, r5
 80011bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011c0:	45a6      	cmp	lr, r4
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1e2>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011cc:	d26c      	bcs.n	80012a8 <__udivmoddi4+0x2b4>
 80011ce:	45a6      	cmp	lr, r4
 80011d0:	d96a      	bls.n	80012a8 <__udivmoddi4+0x2b4>
 80011d2:	3802      	subs	r0, #2
 80011d4:	4464      	add	r4, ip
 80011d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011da:	fba0 9502 	umull	r9, r5, r0, r2
 80011de:	eba4 040e 	sub.w	r4, r4, lr
 80011e2:	42ac      	cmp	r4, r5
 80011e4:	46c8      	mov	r8, r9
 80011e6:	46ae      	mov	lr, r5
 80011e8:	d356      	bcc.n	8001298 <__udivmoddi4+0x2a4>
 80011ea:	d053      	beq.n	8001294 <__udivmoddi4+0x2a0>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d069      	beq.n	80012c4 <__udivmoddi4+0x2d0>
 80011f0:	ebb3 0208 	subs.w	r2, r3, r8
 80011f4:	eb64 040e 	sbc.w	r4, r4, lr
 80011f8:	fa22 f301 	lsr.w	r3, r2, r1
 80011fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001200:	431f      	orrs	r7, r3
 8001202:	40cc      	lsrs	r4, r1
 8001204:	e9c6 7400 	strd	r7, r4, [r6]
 8001208:	2100      	movs	r1, #0
 800120a:	e747      	b.n	800109c <__udivmoddi4+0xa8>
 800120c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001210:	f1c2 0120 	rsb	r1, r2, #32
 8001214:	fa25 f301 	lsr.w	r3, r5, r1
 8001218:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800121c:	fa20 f101 	lsr.w	r1, r0, r1
 8001220:	4095      	lsls	r5, r2
 8001222:	430d      	orrs	r5, r1
 8001224:	fbb3 f1f7 	udiv	r1, r3, r7
 8001228:	fb07 3311 	mls	r3, r7, r1, r3
 800122c:	fa1f fe8c 	uxth.w	lr, ip
 8001230:	0c28      	lsrs	r0, r5, #16
 8001232:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001236:	fb01 f30e 	mul.w	r3, r1, lr
 800123a:	4283      	cmp	r3, r0
 800123c:	fa04 f402 	lsl.w	r4, r4, r2
 8001240:	d908      	bls.n	8001254 <__udivmoddi4+0x260>
 8001242:	eb1c 0000 	adds.w	r0, ip, r0
 8001246:	f101 38ff 	add.w	r8, r1, #4294967295
 800124a:	d22f      	bcs.n	80012ac <__udivmoddi4+0x2b8>
 800124c:	4283      	cmp	r3, r0
 800124e:	d92d      	bls.n	80012ac <__udivmoddi4+0x2b8>
 8001250:	3902      	subs	r1, #2
 8001252:	4460      	add	r0, ip
 8001254:	1ac0      	subs	r0, r0, r3
 8001256:	fbb0 f3f7 	udiv	r3, r0, r7
 800125a:	fb07 0013 	mls	r0, r7, r3, r0
 800125e:	b2ad      	uxth	r5, r5
 8001260:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001264:	fb03 f00e 	mul.w	r0, r3, lr
 8001268:	42a8      	cmp	r0, r5
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0x28a>
 800126c:	eb1c 0505 	adds.w	r5, ip, r5
 8001270:	f103 38ff 	add.w	r8, r3, #4294967295
 8001274:	d216      	bcs.n	80012a4 <__udivmoddi4+0x2b0>
 8001276:	42a8      	cmp	r0, r5
 8001278:	d914      	bls.n	80012a4 <__udivmoddi4+0x2b0>
 800127a:	3b02      	subs	r3, #2
 800127c:	4465      	add	r5, ip
 800127e:	1a28      	subs	r0, r5, r0
 8001280:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001284:	e738      	b.n	80010f8 <__udivmoddi4+0x104>
 8001286:	4631      	mov	r1, r6
 8001288:	4630      	mov	r0, r6
 800128a:	e707      	b.n	800109c <__udivmoddi4+0xa8>
 800128c:	462f      	mov	r7, r5
 800128e:	e6e4      	b.n	800105a <__udivmoddi4+0x66>
 8001290:	4618      	mov	r0, r3
 8001292:	e6f9      	b.n	8001088 <__udivmoddi4+0x94>
 8001294:	454b      	cmp	r3, r9
 8001296:	d2a9      	bcs.n	80011ec <__udivmoddi4+0x1f8>
 8001298:	ebb9 0802 	subs.w	r8, r9, r2
 800129c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012a0:	3801      	subs	r0, #1
 80012a2:	e7a3      	b.n	80011ec <__udivmoddi4+0x1f8>
 80012a4:	4643      	mov	r3, r8
 80012a6:	e7ea      	b.n	800127e <__udivmoddi4+0x28a>
 80012a8:	4628      	mov	r0, r5
 80012aa:	e794      	b.n	80011d6 <__udivmoddi4+0x1e2>
 80012ac:	4641      	mov	r1, r8
 80012ae:	e7d1      	b.n	8001254 <__udivmoddi4+0x260>
 80012b0:	46d0      	mov	r8, sl
 80012b2:	e77b      	b.n	80011ac <__udivmoddi4+0x1b8>
 80012b4:	4464      	add	r4, ip
 80012b6:	3802      	subs	r0, #2
 80012b8:	e747      	b.n	800114a <__udivmoddi4+0x156>
 80012ba:	3b02      	subs	r3, #2
 80012bc:	4465      	add	r5, ip
 80012be:	e72f      	b.n	8001120 <__udivmoddi4+0x12c>
 80012c0:	4608      	mov	r0, r1
 80012c2:	e706      	b.n	80010d2 <__udivmoddi4+0xde>
 80012c4:	4631      	mov	r1, r6
 80012c6:	e6e9      	b.n	800109c <__udivmoddi4+0xa8>

080012c8 <__aeabi_idiv0>:
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <toyota_checksum>:
    checksum += data[i];
  }
  return checksum;
}

uint8_t toyota_checksum(uint32_t address, uint64_t d, uint8_t lenght) {
 80012cc:	b4f0      	push	{r4, r5, r6, r7}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	e9c7 2300 	strd	r2, r3, [r7]
   // D = d;
    d >>= ((8 - lenght) * 8); // remove padding
 80012d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012dc:	f1c3 0308 	rsb	r3, r3, #8
 80012e0:	00d9      	lsls	r1, r3, #3
 80012e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e6:	f1c1 0620 	rsb	r6, r1, #32
 80012ea:	f1a1 0020 	sub.w	r0, r1, #32
 80012ee:	fa22 f401 	lsr.w	r4, r2, r1
 80012f2:	fa03 f606 	lsl.w	r6, r3, r6
 80012f6:	4334      	orrs	r4, r6
 80012f8:	fa23 f000 	lsr.w	r0, r3, r0
 80012fc:	4304      	orrs	r4, r0
 80012fe:	fa23 f501 	lsr.w	r5, r3, r1
 8001302:	e9c7 4500 	strd	r4, r5, [r7]
    d >>= 8; // remove checksum
 8001306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0a02      	lsrs	r2, r0, #8
 8001314:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001318:	0a0b      	lsrs	r3, r1, #8
 800131a:	e9c7 2300 	strd	r2, r3, [r7]

    unsigned int s = lenght;
 800131e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001322:	617b      	str	r3, [r7, #20]
    while (address) { s += address & 0xFF; address >>= 8; }
 8001324:	e007      	b.n	8001336 <toyota_checksum+0x6a>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4413      	add	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f4      	bne.n	8001326 <toyota_checksum+0x5a>
    while (d) { s += d & 0xFF; d >>= 8; }
 800133c:	e010      	b.n	8001360 <toyota_checksum+0x94>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4413      	add	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	0a02      	lsrs	r2, r0, #8
 8001356:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800135a:	0a0b      	lsrs	r3, r1, #8
 800135c:	e9c7 2300 	strd	r2, r3, [r7]
 8001360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001364:	4313      	orrs	r3, r2
 8001366:	d1ea      	bne.n	800133e <toyota_checksum+0x72>

    return s & 0xFF;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	b2db      	uxtb	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	4770      	bx	lr
	...

08001378 <CAN_FilterConfig>:
    CAN_Error_Struct Can1;
    CAN_Error_Struct Can2;
} myErrorFlag;

void CAN_FilterConfig(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001382:	2301      	movs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = (uint32_t)0;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = (uint32_t)0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = (uint32_t)0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = (uint32_t)0;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FilterFIFO0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterBank = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
		sFilterConfig.SlaveStartFilterBank = 13;
 80013a2:	230d      	movs	r3, #13
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24

    // ### Configurate CAN 1 ###
    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4826      	ldr	r0, [pc, #152]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013ac:	f001 fe1c 	bl	8002fe8 <HAL_CAN_ConfigFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <CAN_FilterConfig+0x48>
    {

        myErrorFlag.Can1.ConfigFilter = true;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	70da      	strb	r2, [r3, #3]
        Error_Handler();
 80013bc:	f000 ff5a 	bl	8002274 <Error_Handler>
    }

    if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80013c0:	4820      	ldr	r0, [pc, #128]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013c2:	f001 fef1 	bl	80031a8 <HAL_CAN_Start>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <CAN_FilterConfig+0x5e>
    {
        myErrorFlag.Can1.Start = true;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	709a      	strb	r2, [r3, #2]
        Error_Handler();
 80013d2:	f000 ff4f 	bl	8002274 <Error_Handler>
    }

    if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80013d6:	2103      	movs	r1, #3
 80013d8:	481a      	ldr	r0, [pc, #104]	; (8001444 <CAN_FilterConfig+0xcc>)
 80013da:	f002 f94d 	bl	8003678 <HAL_CAN_ActivateNotification>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <CAN_FilterConfig+0x76>
    {
        myErrorFlag.Can1.Act_Notif = true;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <CAN_FilterConfig+0xd0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
        Error_Handler();
 80013ea:	f000 ff43 	bl	8002274 <Error_Handler>
    }



    // ### Configurate CAN 2 ###
		sFilterConfig.FilterBank = 13;
 80013ee:	230d      	movs	r3, #13
 80013f0:	617b      	str	r3, [r7, #20]
    if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <CAN_FilterConfig+0xd4>)
 80013f8:	f001 fdf6 	bl	8002fe8 <HAL_CAN_ConfigFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <CAN_FilterConfig+0x94>
    {
        /* Filter configuration Error */
        myErrorFlag.Can2.ConfigFilter = true;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <CAN_FilterConfig+0xd0>)
 8001404:	2201      	movs	r2, #1
 8001406:	729a      	strb	r2, [r3, #10]
        Error_Handler();
 8001408:	f000 ff34 	bl	8002274 <Error_Handler>
    }

    if(HAL_CAN_Start(&hcan2) != HAL_OK)
 800140c:	480f      	ldr	r0, [pc, #60]	; (800144c <CAN_FilterConfig+0xd4>)
 800140e:	f001 fecb 	bl	80031a8 <HAL_CAN_Start>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <CAN_FilterConfig+0xaa>
    {
        myErrorFlag.Can2.Start = true;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <CAN_FilterConfig+0xd0>)
 800141a:	2201      	movs	r2, #1
 800141c:	725a      	strb	r2, [r3, #9]
        Error_Handler();
 800141e:	f000 ff29 	bl	8002274 <Error_Handler>
    }
    
    if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001422:	2113      	movs	r1, #19
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <CAN_FilterConfig+0xd4>)
 8001426:	f002 f927 	bl	8003678 <HAL_CAN_ActivateNotification>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <CAN_FilterConfig+0xc2>
    {
        myErrorFlag.Can2.Act_Notif = true;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <CAN_FilterConfig+0xd0>)
 8001432:	2201      	movs	r2, #1
 8001434:	71da      	strb	r2, [r3, #7]
        Error_Handler();
 8001436:	f000 ff1d 	bl	8002274 <Error_Handler>
    }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200019b0 	.word	0x200019b0
 8001448:	20000f48 	.word	0x20000f48
 800144c:	200019d8 	.word	0x200019d8

08001450 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e043      	b.n	80014e6 <HAL_CAN_TxMailbox0CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 800145e:	4926      	ldr	r1, [pc, #152]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3324      	adds	r3, #36	; 0x24
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d135      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 8001474:	4920      	ldr	r1, [pc, #128]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d12a      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014a6:	4413      	add	r3, r2
 80014a8:	1d19      	adds	r1, r3, #4
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	3318      	adds	r3, #24
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014b8:	4413      	add	r3, r2
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	f001 feb6 	bl	8003230 <HAL_CAN_AddTxMessage>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <HAL_CAN_TxMailbox0CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 80014ca:	490b      	ldr	r1, [pc, #44]	; (80014f8 <HAL_CAN_TxMailbox0CompleteCallback+0xa8>)
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	3324      	adds	r3, #36	; 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
                    break;
 80014de:	e006      	b.n	80014ee <HAL_CAN_TxMailbox0CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	ddb8      	ble.n	800145e <HAL_CAN_TxMailbox0CompleteCallback+0xe>
        }

    }


}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000002c 	.word	0x2000002c

080014fc <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e043      	b.n	8001592 <HAL_CAN_TxMailbox1CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 800150a:	4926      	ldr	r1, [pc, #152]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	3324      	adds	r3, #36	; 0x24
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d135      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 8001520:	4920      	ldr	r1, [pc, #128]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d12a      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 8001536:	491b      	ldr	r1, [pc, #108]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001552:	4413      	add	r3, r2
 8001554:	1d19      	adds	r1, r3, #4
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	3318      	adds	r3, #24
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001564:	4413      	add	r3, r2
 8001566:	1d1a      	adds	r2, r3, #4
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	f001 fe60 	bl	8003230 <HAL_CAN_AddTxMessage>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10a      	bne.n	800158c <HAL_CAN_TxMailbox1CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 8001576:	490b      	ldr	r1, [pc, #44]	; (80015a4 <HAL_CAN_TxMailbox1CompleteCallback+0xa8>)
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3324      	adds	r3, #36	; 0x24
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
                    break;
 800158a:	e006      	b.n	800159a <HAL_CAN_TxMailbox1CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b13      	cmp	r3, #19
 8001596:	ddb8      	ble.n	800150a <HAL_CAN_TxMailbox1CompleteCallback+0xe>
            }
        }

    }

}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000002c 	.word	0x2000002c

080015a8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hcan);
    uint32_t p1TxMailbox;
    int i;
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e043      	b.n	800163e <HAL_CAN_TxMailbox2CompleteCallback+0x96>
    {
        if(Canbuffer[i].Tr == 1)
 80015b6:	4926      	ldr	r1, [pc, #152]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3324      	adds	r3, #36	; 0x24
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d135      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
        {
            if(Canbuffer[i].hcan == hcan)
 80015cc:	4920      	ldr	r1, [pc, #128]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d12a      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
            {
                if(HAL_CAN_AddTxMessage(Canbuffer[i].hcan, &Canbuffer[i].pHeader, Canbuffer[i].data, &p1TxMailbox) == HAL_OK)
 80015e2:	491b      	ldr	r1, [pc, #108]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 80015fe:	4413      	add	r3, r2
 8001600:	1d19      	adds	r1, r3, #4
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	3318      	adds	r3, #24
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 8001610:	4413      	add	r3, r2
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	f001 fe0a 	bl	8003230 <HAL_CAN_AddTxMessage>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10a      	bne.n	8001638 <HAL_CAN_TxMailbox2CompleteCallback+0x90>
                {
                    Canbuffer[i].Tr = 0;
 8001622:	490b      	ldr	r1, [pc, #44]	; (8001650 <HAL_CAN_TxMailbox2CompleteCallback+0xa8>)
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3324      	adds	r3, #36	; 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
                    break;
 8001636:	e006      	b.n	8001646 <HAL_CAN_TxMailbox2CompleteCallback+0x9e>
    for(i= 0; i<CAN_TX_BUFFER_SIZE; i++)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b13      	cmp	r3, #19
 8001642:	ddb8      	ble.n	80015b6 <HAL_CAN_TxMailbox2CompleteCallback+0xe>
            }
        }

    }

}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000002c 	.word	0x2000002c

08001654 <CAN_SendMessage>:




void CAN_SendMessage(CAN_HandleTypeDef *hcan,uint32_t ID,uint32_t DLC, uint8_t *data)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
    uint32_t pTxMailbox;

    if(IS_CAN_STDID(ID))
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001668:	d206      	bcs.n	8001678 <CAN_SendMessage+0x24>
    {
        pHeader.IDE = CAN_ID_STD;
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <CAN_SendMessage+0x164>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
        pHeader.StdId = ID;
 8001670:	4a51      	ldr	r2, [pc, #324]	; (80017b8 <CAN_SendMessage+0x164>)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e019      	b.n	80016ac <CAN_SendMessage+0x58>
    }
    else if (IS_CAN_EXTID(ID))
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167e:	d206      	bcs.n	800168e <CAN_SendMessage+0x3a>
    {
        pHeader.IDE = CAN_ID_EXT;
 8001680:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <CAN_SendMessage+0x164>)
 8001682:	2204      	movs	r2, #4
 8001684:	609a      	str	r2, [r3, #8]
        pHeader.ExtId = ID;
 8001686:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <CAN_SendMessage+0x164>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	6053      	str	r3, [r2, #4]
 800168c:	e00e      	b.n	80016ac <CAN_SendMessage+0x58>
    }
    else
    {
        if (hcan == &hcan1) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <CAN_SendMessage+0x168>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d103      	bne.n	800169e <CAN_SendMessage+0x4a>
            myErrorFlag.Can1.Send.noProperId = true;
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <CAN_SendMessage+0x16c>)
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
 800169c:	e006      	b.n	80016ac <CAN_SendMessage+0x58>
        }
        else if (hcan == &hcan2) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <CAN_SendMessage+0x170>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d102      	bne.n	80016ac <CAN_SendMessage+0x58>
            myErrorFlag.Can2.Send.noProperId = true;
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	72da      	strb	r2, [r3, #11]
        }
    }

    if (DLC <= 8)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d803      	bhi.n	80016ba <CAN_SendMessage+0x66>
    {
        pHeader.DLC = DLC;
 80016b2:	4a41      	ldr	r2, [pc, #260]	; (80017b8 <CAN_SendMessage+0x164>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6113      	str	r3, [r2, #16]
 80016b8:	e00e      	b.n	80016d8 <CAN_SendMessage+0x84>
    }
    else
    {
        if (hcan == &hcan1) {
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <CAN_SendMessage+0x168>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d103      	bne.n	80016ca <CAN_SendMessage+0x76>
            myErrorFlag.Can1.Send.noValidDLC = true;
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	715a      	strb	r2, [r3, #5]
 80016c8:	e006      	b.n	80016d8 <CAN_SendMessage+0x84>
        }
        else if (hcan == &hcan2) {
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4a3d      	ldr	r2, [pc, #244]	; (80017c4 <CAN_SendMessage+0x170>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d102      	bne.n	80016d8 <CAN_SendMessage+0x84>
            myErrorFlag.Can2.Send.noValidDLC = true;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <CAN_SendMessage+0x16c>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	731a      	strb	r2, [r3, #12]
        }
    }

    if(HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0)// check mailboxes
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f001 fe78 	bl	80033ce <HAL_CAN_GetTxMailboxesFreeLevel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <CAN_SendMessage+0xa0>
    {
        HAL_CAN_AddTxMessage(hcan, &pHeader, data, &pTxMailbox);
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4933      	ldr	r1, [pc, #204]	; (80017b8 <CAN_SendMessage+0x164>)
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f001 fd9f 	bl	8003230 <HAL_CAN_AddTxMessage>
        {
            Canbuffer[indx].data[i] = *data++;
        }
        Canbuffer[indx].Tr = 1;
    }
}
 80016f2:	e05d      	b.n	80017b0 <CAN_SendMessage+0x15c>
        if(Canbuffer[indx].Tr == 1)
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <CAN_SendMessage+0x174>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4a34      	ldr	r2, [pc, #208]	; (80017cc <CAN_SendMessage+0x178>)
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	3324      	adds	r3, #36	; 0x24
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <CAN_SendMessage+0xc6>
            indx++;
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <CAN_SendMessage+0x174>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <CAN_SendMessage+0x174>)
 8001718:	701a      	strb	r2, [r3, #0]
        if(indx >= (CAN_TX_BUFFER_SIZE -1) )
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <CAN_SendMessage+0x174>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b12      	cmp	r3, #18
 8001720:	d902      	bls.n	8001728 <CAN_SendMessage+0xd4>
            indx = 0;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <CAN_SendMessage+0x174>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
        Canbuffer[indx].hcan = hcan;
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <CAN_SendMessage+0x174>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <CAN_SendMessage+0x178>)
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]
        Canbuffer[indx].pHeader = pHeader;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <CAN_SendMessage+0x174>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <CAN_SendMessage+0x178>)
 8001746:	460b      	mov	r3, r1
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <CAN_SendMessage+0x164>)
 8001752:	1d1c      	adds	r4, r3, #4
 8001754:	4615      	mov	r5, r2
 8001756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800175e:	e884 0003 	stmia.w	r4, {r0, r1}
        for(int i = 0; i<8; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e014      	b.n	8001792 <CAN_SendMessage+0x13e>
            Canbuffer[indx].data[i] = *data++;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	603a      	str	r2, [r7, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <CAN_SendMessage+0x174>)
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4611      	mov	r1, r2
 8001774:	7818      	ldrb	r0, [r3, #0]
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <CAN_SendMessage+0x178>)
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	441a      	add	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	331c      	adds	r3, #28
 8001788:	4602      	mov	r2, r0
 800178a:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i<8; i++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b07      	cmp	r3, #7
 8001796:	dde7      	ble.n	8001768 <CAN_SendMessage+0x114>
        Canbuffer[indx].Tr = 1;
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <CAN_SendMessage+0x174>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <CAN_SendMessage+0x178>)
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	3324      	adds	r3, #36	; 0x24
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	2000034c 	.word	0x2000034c
 80017bc:	200019b0 	.word	0x200019b0
 80017c0:	20000f48 	.word	0x20000f48
 80017c4:	200019d8 	.word	0x200019d8
 80017c8:	20000364 	.word	0x20000364
 80017cc:	2000002c 	.word	0x2000002c

080017d0 <CAN_GetMessage>:



void CAN_GetMessage(CAN_HandleTypeDef *hcan) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b092      	sub	sp, #72	; 0x48
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef myRxHeader;
    uint8_t CAN_Rx_Buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80017d8:	4a93      	ldr	r2, [pc, #588]	; (8001a28 <CAN_GetMessage+0x258>)
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e2:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_CAN_GetRxMessage(hcan, CAN_FilterFIFO0, &myRxHeader, CAN_Rx_Buffer);
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	f107 0218 	add.w	r2, r7, #24
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f001 fe20 	bl	8003436 <HAL_CAN_GetRxMessage>
    uint32_t ID;
    if(hcan == &hcan1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a8c      	ldr	r2, [pc, #560]	; (8001a2c <CAN_GetMessage+0x25c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	f040 8081 	bne.w	8001902 <CAN_GetMessage+0x132>
    {
			if(myRxHeader.StdId == 0)// if recieved message id is 0x343, add this message into queue
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10b      	bne.n	800181e <CAN_GetMessage+0x4e>
				{
					BaseType_t pxHigherPriorityTaskWoken = pdFALSE; 
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
					xQueueSendToBackFromISR( myQueue01Handle, (typedef_343h*)CAN_Rx_Buffer, &pxHigherPriorityTaskWoken );
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <CAN_GetMessage+0x260>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	f107 020c 	add.w	r2, r7, #12
 8001812:	f107 0110 	add.w	r1, r7, #16
 8001816:	2300      	movs	r3, #0
 8001818:	f004 f890 	bl	800593c <xQueueGenericSendFromISR>
					}

    }


}
 800181c:	e100      	b.n	8001a20 <CAN_GetMessage+0x250>
        if (myRxHeader.IDE == CAN_ID_STD)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10e      	bne.n	8001842 <CAN_GetMessage+0x72>
            CAN_SendMessage(&hcan2,myRxHeader.StdId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4881      	ldr	r0, [pc, #516]	; (8001a34 <CAN_GetMessage+0x264>)
 800182e:	f7ff ff11 	bl	8001654 <CAN_SendMessage>
            StoreCANID(myRxHeader.StdId, 1);
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2101      	movs	r1, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f902 	bl	8001a40 <StoreCANID>
            ID = myRxHeader.StdId;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
 8001840:	e010      	b.n	8001864 <CAN_GetMessage+0x94>
        else if (myRxHeader.IDE == CAN_ID_EXT)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d10d      	bne.n	8001864 <CAN_GetMessage+0x94>
            CAN_SendMessage(&hcan2,myRxHeader.ExtId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001848:	69f9      	ldr	r1, [r7, #28]
 800184a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4878      	ldr	r0, [pc, #480]	; (8001a34 <CAN_GetMessage+0x264>)
 8001852:	f7ff feff 	bl	8001654 <CAN_SendMessage>
            ID = myRxHeader.ExtId;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	647b      	str	r3, [r7, #68]	; 0x44
            StoreCANID(myRxHeader.ExtId, 1);
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	2101      	movs	r1, #1
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8ee 	bl	8001a40 <StoreCANID>
        for(int i = 0; i<CAN1_Buffer_size; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
 8001868:	e047      	b.n	80018fa <CAN_GetMessage+0x12a>
            if(CAN_Bridge_MSG.CAN1_MSG[i].ID == ID || CAN_Bridge_MSG.CAN1_MSG[i].ID == 0x00)
 800186a:	4a73      	ldr	r2, [pc, #460]	; (8001a38 <CAN_GetMessage+0x268>)
 800186c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001876:	429a      	cmp	r2, r3
 8001878:	d006      	beq.n	8001888 <CAN_GetMessage+0xb8>
 800187a:	4a6f      	ldr	r2, [pc, #444]	; (8001a38 <CAN_GetMessage+0x268>)
 800187c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4413      	add	r3, r2
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d135      	bne.n	80018f4 <CAN_GetMessage+0x124>
				CAN_Bridge_MSG.CAN1_MSG[i].DLC = myRxHeader.DLC;
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	b2d9      	uxtb	r1, r3
 800188c:	4a6a      	ldr	r2, [pc, #424]	; (8001a38 <CAN_GetMessage+0x268>)
 800188e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	330c      	adds	r3, #12
 8001896:	460a      	mov	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
                CAN_Bridge_MSG.CAN1_MSG[i].ID = ID;
 800189a:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <CAN_GetMessage+0x268>)
 800189c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018a4:	601a      	str	r2, [r3, #0]
                CAN_Bridge_MSG.CAN1_MSG[i].cnt++;
 80018a6:	4a64      	ldr	r2, [pc, #400]	; (8001a38 <CAN_GetMessage+0x268>)
 80018a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	330d      	adds	r3, #13
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2d9      	uxtb	r1, r3
 80018b6:	4a60      	ldr	r2, [pc, #384]	; (8001a38 <CAN_GetMessage+0x268>)
 80018b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	330d      	adds	r3, #13
 80018c0:	460a      	mov	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
                for(int j = 0; j<8; j++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c8:	e010      	b.n	80018ec <CAN_GetMessage+0x11c>
                    CAN_Bridge_MSG.CAN1_MSG[i].Data[j] = CAN_Rx_Buffer[j];
 80018ca:	f107 0210 	add.w	r2, r7, #16
 80018ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d0:	4413      	add	r3, r2
 80018d2:	7819      	ldrb	r1, [r3, #0]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <CAN_GetMessage+0x268>)
 80018d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	441a      	add	r2, r3
 80018dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	460a      	mov	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
                for(int j = 0; j<8; j++)
 80018e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e8:	3301      	adds	r3, #1
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	ddeb      	ble.n	80018ca <CAN_GetMessage+0xfa>
                break;
 80018f2:	e095      	b.n	8001a20 <CAN_GetMessage+0x250>
        for(int i = 0; i<CAN1_Buffer_size; i++)
 80018f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f6:	3301      	adds	r3, #1
 80018f8:	643b      	str	r3, [r7, #64]	; 0x40
 80018fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fc:	2b27      	cmp	r3, #39	; 0x27
 80018fe:	ddb4      	ble.n	800186a <CAN_GetMessage+0x9a>
}
 8001900:	e08e      	b.n	8001a20 <CAN_GetMessage+0x250>
    else if(hcan == &hcan2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <CAN_GetMessage+0x264>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 808a 	bne.w	8001a20 <CAN_GetMessage+0x250>
				if(myRxHeader.StdId == 0x343)// if recieved message id is ShiftCommand_ID, add this message into queue
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f240 3243 	movw	r2, #835	; 0x343
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <CAN_GetMessage+0x15e>
					BaseType_t pxHigherPriorityTaskWoken = pdFALSE; 
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
					xQueueSendToBackFromISR( myQueue02Handle, CAN_Rx_Buffer, &pxHigherPriorityTaskWoken );
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <CAN_GetMessage+0x26c>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 0208 	add.w	r2, r7, #8
 8001922:	f107 0110 	add.w	r1, r7, #16
 8001926:	2300      	movs	r3, #0
 8001928:	f004 f808 	bl	800593c <xQueueGenericSendFromISR>
 800192c:	e022      	b.n	8001974 <CAN_GetMessage+0x1a4>
					if (myRxHeader.IDE == CAN_ID_STD)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10e      	bne.n	8001952 <CAN_GetMessage+0x182>
							CAN_SendMessage(&hcan1,myRxHeader.StdId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001934:	69b9      	ldr	r1, [r7, #24]
 8001936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	483b      	ldr	r0, [pc, #236]	; (8001a2c <CAN_GetMessage+0x25c>)
 800193e:	f7ff fe89 	bl	8001654 <CAN_SendMessage>
							ID = myRxHeader.StdId;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
							StoreCANID(myRxHeader.StdId, 2);
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2102      	movs	r1, #2
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f878 	bl	8001a40 <StoreCANID>
 8001950:	e010      	b.n	8001974 <CAN_GetMessage+0x1a4>
					else if (myRxHeader.IDE == CAN_ID_EXT)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d10d      	bne.n	8001974 <CAN_GetMessage+0x1a4>
							CAN_SendMessage(&hcan1,myRxHeader.ExtId,myRxHeader.DLC, CAN_Rx_Buffer);
 8001958:	69f9      	ldr	r1, [r7, #28]
 800195a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4832      	ldr	r0, [pc, #200]	; (8001a2c <CAN_GetMessage+0x25c>)
 8001962:	f7ff fe77 	bl	8001654 <CAN_SendMessage>
							ID = myRxHeader.ExtId;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
							StoreCANID(myRxHeader.ExtId, 2);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f866 	bl	8001a40 <StoreCANID>
				for(int i = 0; i<CAN2_Buffer_size; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
 8001978:	e04e      	b.n	8001a18 <CAN_GetMessage+0x248>
							if(CAN_Bridge_MSG.CAN2_MSG[i].ID == ID || CAN_Bridge_MSG.CAN2_MSG[i].ID == 0x00)
 800197a:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <CAN_GetMessage+0x268>)
 800197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197e:	3328      	adds	r3, #40	; 0x28
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001988:	429a      	cmp	r2, r3
 800198a:	d007      	beq.n	800199c <CAN_GetMessage+0x1cc>
 800198c:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <CAN_GetMessage+0x268>)
 800198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001990:	3328      	adds	r3, #40	; 0x28
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d13a      	bne.n	8001a12 <CAN_GetMessage+0x242>
									CAN_Bridge_MSG.CAN2_MSG[i].DLC = myRxHeader.DLC;
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <CAN_GetMessage+0x268>)
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80019ac:	460a      	mov	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
									CAN_Bridge_MSG.CAN2_MSG[i].ID = ID;
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <CAN_GetMessage+0x268>)
 80019b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b4:	3328      	adds	r3, #40	; 0x28
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019bc:	601a      	str	r2, [r3, #0]
									CAN_Bridge_MSG.CAN2_MSG[i].cnt++;
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <CAN_GetMessage+0x268>)
 80019c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	f203 238d 	addw	r3, r3, #653	; 0x28d
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2d9      	uxtb	r1, r3
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <CAN_GetMessage+0x268>)
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	f203 238d 	addw	r3, r3, #653	; 0x28d
 80019dc:	460a      	mov	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
									for(int j = 0; j<8; j++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
 80019e4:	e011      	b.n	8001a0a <CAN_GetMessage+0x23a>
											CAN_Bridge_MSG.CAN2_MSG[i].Data[j] = CAN_Rx_Buffer[j];
 80019e6:	f107 0210 	add.w	r2, r7, #16
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	4413      	add	r3, r2
 80019ee:	7819      	ldrb	r1, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <CAN_GetMessage+0x268>)
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	441a      	add	r2, r3
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001a00:	460a      	mov	r2, r1
 8001a02:	701a      	strb	r2, [r3, #0]
									for(int j = 0; j<8; j++)
 8001a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a06:	3301      	adds	r3, #1
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	ddea      	ble.n	80019e6 <CAN_GetMessage+0x216>
									break;
 8001a10:	e006      	b.n	8001a20 <CAN_GetMessage+0x250>
				for(int i = 0; i<CAN2_Buffer_size; i++)
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a14:	3301      	adds	r3, #1
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	2b95      	cmp	r3, #149	; 0x95
 8001a1c:	ddad      	ble.n	800197a <CAN_GetMessage+0x1aa>
}
 8001a1e:	e7ff      	b.n	8001a20 <CAN_GetMessage+0x250>
 8001a20:	bf00      	nop
 8001a22:	3748      	adds	r7, #72	; 0x48
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	08007408 	.word	0x08007408
 8001a2c:	200019b0 	.word	0x200019b0
 8001a30:	20001a14 	.word	0x20001a14
 8001a34:	200019d8 	.word	0x200019d8
 8001a38:	20000368 	.word	0x20000368
 8001a3c:	20001a18 	.word	0x20001a18

08001a40 <StoreCANID>:

uint32_t IDlist1[250],IDlist2[250];
uint8_t StoreCANID(uint32_t ID, uint8_t Port)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
	static uint16_t index1=0,index2=0;
	if(Port == 1)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11c      	bne.n	8001a8c <StoreCANID+0x4c>
	{
		for(int i=0;i<250;i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e00b      	b.n	8001a70 <StoreCANID+0x30>
		{
			if(IDlist1[i]==ID)
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <StoreCANID+0x98>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d101      	bne.n	8001a6a <StoreCANID+0x2a>
				return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e031      	b.n	8001ace <StoreCANID+0x8e>
		for(int i=0;i<250;i++)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2bf9      	cmp	r3, #249	; 0xf9
 8001a74:	ddf0      	ble.n	8001a58 <StoreCANID+0x18>
		}
		IDlist1[index1++] = ID;
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <StoreCANID+0x9c>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	b291      	uxth	r1, r2
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <StoreCANID+0x9c>)
 8001a80:	8011      	strh	r1, [r2, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <StoreCANID+0x98>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	}
	if(Port == 2)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d11c      	bne.n	8001acc <StoreCANID+0x8c>
	{
		for(int i=0;i<250;i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	e00b      	b.n	8001ab0 <StoreCANID+0x70>
		{
			if(IDlist2[i]==ID)
 8001a98:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <StoreCANID+0xa0>)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d101      	bne.n	8001aaa <StoreCANID+0x6a>
				return 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e011      	b.n	8001ace <StoreCANID+0x8e>
		for(int i=0;i<250;i++)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2bf9      	cmp	r3, #249	; 0xf9
 8001ab4:	ddf0      	ble.n	8001a98 <StoreCANID+0x58>
		}
		IDlist2[index2++] = ID;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <StoreCANID+0xa4>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	b291      	uxth	r1, r2
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <StoreCANID+0xa4>)
 8001ac0:	8011      	strh	r1, [r2, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <StoreCANID+0xa0>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	}


	return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000f58 	.word	0x20000f58
 8001adc:	20001728 	.word	0x20001728
 8001ae0:	20001340 	.word	0x20001340
 8001ae4:	2000172a 	.word	0x2000172a

08001ae8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <vApplicationGetIdleTaskMemory+0x28>)
 8001af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8001afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	2000172c 	.word	0x2000172c
 8001b14:	20001780 	.word	0x20001780

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b0b2      	sub	sp, #200	; 0xc8
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1e:	f000 fe11 	bl	8002744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b22:	f000 f8db 	bl	8001cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b26:	f000 f9e7 	bl	8001ef8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001b2a:	f000 f979 	bl	8001e20 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001b2e:	f000 f9ad 	bl	8001e8c <MX_CAN2_Init>
  MX_ADC1_Init();
 8001b32:	f000 f937 	bl	8001da4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig();
 8001b36:	f7ff fc1f 	bl	8001378 <CAN_FilterConfig>
  HAL_ADC_Start(&hadc1);
 8001b3a:	4857      	ldr	r0, [pc, #348]	; (8001c98 <main+0x180>)
 8001b3c:	f000 ff0c 	bl	8002958 <HAL_ADC_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SartStopSem01 */
  osSemaphoreDef(SartStopSem01);
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  SartStopSem01Handle = osSemaphoreCreate(osSemaphore(SartStopSem01), 1);
 8001b4c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fbae 	bl	80052b4 <osSemaphoreCreate>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <main+0x184>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* definition and creation of HandBrakeSem02 */
  osSemaphoreDef(HandBrakeSem02);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HandBrakeSem02Handle = osSemaphoreCreate(osSemaphore(HandBrakeSem02), 1);
 8001b6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fb9f 	bl	80052b4 <osSemaphoreCreate>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <main+0x188>)
 8001b7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ParkBrakeSem03 */
  osSemaphoreDef(ParkBrakeSem03);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ParkBrakeSem03Handle = osSemaphoreCreate(osSemaphore(ParkBrakeSem03), 1);
 8001b88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fb90 	bl	80052b4 <osSemaphoreCreate>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <main+0x18c>)
 8001b98:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 8, typedef_343h);
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <main+0x190>)
 8001b9c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001ba6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fbb3 	bl	8005318 <osMessageCreate>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <main+0x194>)
 8001bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 8, uint8_t[8]);
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <main+0x190>)
 8001bba:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8001bc4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fba4 	bl	8005318 <osMessageCreate>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <main+0x198>)
 8001bd4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <main+0x19c>)
 8001bd8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001bdc:	461d      	mov	r5, r3
 8001bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001bea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 faff 	bl	80051f4 <osThreadCreate>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <main+0x1a0>)
 8001bfa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myButtonTask */
  osThreadDef(myButtonTask, StartTask02, osPriorityBelowNormal, 0, 128);
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <main+0x1a4>)
 8001bfe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001c02:	461d      	mov	r5, r3
 8001c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myButtonTaskHandle = osThreadCreate(osThread(myButtonTask), NULL);
 8001c10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 faec 	bl	80051f4 <osThreadCreate>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <main+0x1a8>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, HandBrake, osPriorityLow, 0, 128);
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <main+0x1ac>)
 8001c24:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001c28:	461d      	mov	r5, r3
 8001c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001c36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fad9 	bl	80051f4 <osThreadCreate>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <main+0x1b0>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartStop, osPriorityLow, 0, 128);
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <main+0x1b4>)
 8001c4a:	f107 0420 	add.w	r4, r7, #32
 8001c4e:	461d      	mov	r5, r3
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fac6 	bl	80051f4 <osThreadCreate>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <main+0x1b8>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, ParkBrake, osPriorityLow, 0, 128);
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <main+0x1bc>)
 8001c70:	1d3c      	adds	r4, r7, #4
 8001c72:	461d      	mov	r5, r3
 8001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fab5 	bl	80051f4 <osThreadCreate>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <main+0x1c0>)
 8001c8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c90:	f003 faa9 	bl	80051e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <main+0x17c>
 8001c96:	bf00      	nop
 8001c98:	20001980 	.word	0x20001980
 8001c9c:	20001a1c 	.word	0x20001a1c
 8001ca0:	20001a20 	.word	0x20001a20
 8001ca4:	20001a24 	.word	0x20001a24
 8001ca8:	08007450 	.word	0x08007450
 8001cac:	20001a14 	.word	0x20001a14
 8001cb0:	20001a18 	.word	0x20001a18
 8001cb4:	08007460 	.word	0x08007460
 8001cb8:	20001a00 	.word	0x20001a00
 8001cbc:	0800747c 	.word	0x0800747c
 8001cc0:	20001a04 	.word	0x20001a04
 8001cc4:	08007498 	.word	0x08007498
 8001cc8:	20001a08 	.word	0x20001a08
 8001ccc:	080074b4 	.word	0x080074b4
 8001cd0:	20001a0c 	.word	0x20001a0c
 8001cd4:	080074d0 	.word	0x080074d0
 8001cd8:	20001a10 	.word	0x20001a10

08001cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b09c      	sub	sp, #112	; 0x70
 8001ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ce6:	2238      	movs	r2, #56	; 0x38
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 fb78 	bl	80073e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2220      	movs	r2, #32
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fb6a 	bl	80073e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d22:	2302      	movs	r3, #2
 8001d24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f94e 	bl	8003fdc <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001d46:	f000 fa95 	bl	8002274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	2102      	movs	r1, #2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fc4e 	bl	8004608 <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d72:	f000 fa7f 	bl	8002274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d76:	2302      	movs	r3, #2
 8001d78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fe8a 	bl	8004a9c <HAL_RCCEx_PeriphCLKConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d8e:	f000 fa71 	bl	8002274 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001d92:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <SystemClock_Config+0xc4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	3770      	adds	r7, #112	; 0x70
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	42420070 	.word	0x42420070

08001da4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001db6:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <MX_ADC1_Init+0x78>)
 8001db8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001de2:	f000 fce1 	bl	80027a8 <HAL_ADC_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001dec:	f000 fa42 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001df0:	2306      	movs	r3, #6
 8001df2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_ADC1_Init+0x74>)
 8001e02:	f000 fe63 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e0c:	f000 fa32 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20001980 	.word	0x20001980
 8001e1c:	40012400 	.word	0x40012400

08001e20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <MX_CAN1_Init+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e2c:	2209      	movs	r2, #9
 8001e2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e3e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001e42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_CAN1_Init+0x64>)
 8001e70:	f000 ffbf 	bl	8002df2 <HAL_CAN_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001e7a:	f000 f9fb 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200019b0 	.word	0x200019b0
 8001e88:	40006400 	.word	0x40006400

08001e8c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <MX_CAN2_Init+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001e98:	2209      	movs	r2, #9
 8001e9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eaa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001eae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_CAN2_Init+0x64>)
 8001edc:	f000 ff89 	bl	8002df2 <HAL_CAN_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001ee6:	f000 f9c5 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200019d8 	.word	0x200019d8
 8001ef4:	40006800 	.word	0x40006800

08001ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a36      	ldr	r2, [pc, #216]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f12:	f043 0320 	orr.w	r3, r3, #32
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a30      	ldr	r2, [pc, #192]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <MX_GPIO_Init+0xf4>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_COIL_Pin|LS_SWITCH_2_Pin, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	210a      	movs	r1, #10
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <MX_GPIO_Init+0xf8>)
 8001f72:	f002 f81b 	bl	8003fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LS_SWITCH_1_GPIO_Port, LS_SWITCH_1_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2101      	movs	r1, #1
 8001f7a:	481e      	ldr	r0, [pc, #120]	; (8001ff4 <MX_GPIO_Init+0xfc>)
 8001f7c:	f002 f816 	bl	8003fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_PULL_Pin|HB_PUSH_Pin|CAN2_STBY_Pin|CAN1_STBY_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f243 0190 	movw	r1, #12432	; 0x3090
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <MX_GPIO_Init+0x100>)
 8001f88:	f002 f810 	bl	8003fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_COIL_Pin LS_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = RELAY_COIL_Pin|LS_SWITCH_2_Pin;
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <MX_GPIO_Init+0xf8>)
 8001fa4:	f001 fe7e 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LS_SWITCH_1_Pin;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <MX_GPIO_Init+0xfc>)
 8001fc0:	f001 fe70 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_PULL_Pin HB_PUSH_Pin CAN2_STBY_Pin CAN1_STBY_Pin */
  GPIO_InitStruct.Pin = HB_PULL_Pin|HB_PUSH_Pin|CAN2_STBY_Pin|CAN1_STBY_Pin;
 8001fc4:	f243 0390 	movw	r3, #12432	; 0x3090
 8001fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <MX_GPIO_Init+0x100>)
 8001fde:	f001 fe61 	bl	8003ca4 <HAL_GPIO_Init>

}
 8001fe2:	bf00      	nop
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	00000000 	.word	0x00000000

08002000 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af02      	add	r7, sp, #8
 8002006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  xQueueReceive( myQueue02Handle, bytes, portMAX_DELAY );//Task will be blocked until CAN frame is recieved
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <StartDefaultTask+0x140>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	494c      	ldr	r1, [pc, #304]	; (8002144 <StartDefaultTask+0x144>)
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fd2a 	bl	8005a6c <xQueueReceive>





	  			memcpy((void *)bytesc,(const void *)bytes,(size_t)8);
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <StartDefaultTask+0x148>)
 800201a:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <StartDefaultTask+0x144>)
 800201c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002020:	e883 0003 	stmia.w	r3, {r0, r1}
	  			byte3.LKA_ACTIVE = 0;
	  		 	 	 */


	  			//SetSteerAngle = (int16_t)(Commandstruct.SetSteerAngle / 0.0573);
	  			SetACC = (int16_t)(Commandstruct.SetSteerAngle / 0.02);
 8002024:	4b49      	ldr	r3, [pc, #292]	; (800214c <StartDefaultTask+0x14c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa65 	bl	80004f8 <__aeabi_f2d>
 800202e:	a342      	add	r3, pc, #264	; (adr r3, 8002138 <StartDefaultTask+0x138>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fbe2 	bl	80007fc <__aeabi_ddiv>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fcc4 	bl	80009cc <__aeabi_d2iz>
 8002044:	4603      	mov	r3, r0
 8002046:	b21a      	sxth	r2, r3
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <StartDefaultTask+0x150>)
 800204a:	801a      	strh	r2, [r3, #0]
	  			bytesc[2] = SetSteerAngle & 0x00FF;
	  			bytesc[3] = *(uint8_t*)&byte3;
				bytesc[4] = PERCENTAGE;
				bytesc[5] = SETME_X64;
				bytesc[6] = ANGLE;*/
	  			bytesc[0] = SetACC >> 8;
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <StartDefaultTask+0x150>)
 800204e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002052:	121b      	asrs	r3, r3, #8
 8002054:	b21b      	sxth	r3, r3
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <StartDefaultTask+0x148>)
 800205a:	701a      	strb	r2, [r3, #0]
	  			bytesc[1] = SetACC & 0x00FF;
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <StartDefaultTask+0x150>)
 800205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b38      	ldr	r3, [pc, #224]	; (8002148 <StartDefaultTask+0x148>)
 8002066:	705a      	strb	r2, [r3, #1]
	  			bytesc[2] &= 0x40;
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <StartDefaultTask+0x148>)
 800206a:	789b      	ldrb	r3, [r3, #2]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b35      	ldr	r3, [pc, #212]	; (8002148 <StartDefaultTask+0x148>)
 8002074:	709a      	strb	r2, [r3, #2]
	  			bytesc[3] |= 0x40;// permit braking
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <StartDefaultTask+0x148>)
 8002078:	78db      	ldrb	r3, [r3, #3]
 800207a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <StartDefaultTask+0x148>)
 8002082:	70da      	strb	r2, [r3, #3]

	  			uint8_t temp[8];
	  			for(int i= 0;i<8;i++)
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	e00d      	b.n	80020a6 <StartDefaultTask+0xa6>
	  			{
	  				temp[i] = bytesc[7-i];
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f1c3 0307 	rsb	r3, r3, #7
 8002090:	4a2d      	ldr	r2, [pc, #180]	; (8002148 <StartDefaultTask+0x148>)
 8002092:	5cd1      	ldrb	r1, [r2, r3]
 8002094:	f107 0210 	add.w	r2, r7, #16
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	4413      	add	r3, r2
 800209c:	460a      	mov	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
	  			for(int i= 0;i<8;i++)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	2b07      	cmp	r3, #7
 80020aa:	ddee      	ble.n	800208a <StartDefaultTask+0x8a>
	  			}
	  			bytesc[7] = toyota_checksum(0x343, *(uint64_t*)temp, 8);
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	2108      	movs	r1, #8
 80020b6:	9100      	str	r1, [sp, #0]
 80020b8:	f240 3043 	movw	r0, #835	; 0x343
 80020bc:	f7ff f906 	bl	80012cc <toyota_checksum>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <StartDefaultTask+0x148>)
 80020c6:	71da      	strb	r2, [r3, #7]
	  			//Checksum = toyota_checksum(0x191, *(uint64_t*)bytesc, 8);
	  			//bytesc[7] = Checksum;
	  		if(Commandstruct.AutonomuosMode){
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <StartDefaultTask+0x14c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <StartDefaultTask+0xe0>

	  			CAN_SendMessage(&hcan1,0x343,8, bytesc);
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <StartDefaultTask+0x148>)
 80020d2:	2208      	movs	r2, #8
 80020d4:	f240 3143 	movw	r1, #835	; 0x343
 80020d8:	481e      	ldr	r0, [pc, #120]	; (8002154 <StartDefaultTask+0x154>)
 80020da:	f7ff fabb 	bl	8001654 <CAN_SendMessage>
 80020de:	e793      	b.n	8002008 <StartDefaultTask+0x8>

	  		}
	  		else
	  		{
	  			uint8_t temp[8];
	  			for(int i= 0;i<8;i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e00d      	b.n	8002102 <StartDefaultTask+0x102>
	  			{
	  				temp[i] = bytes[7-i];
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f1c3 0307 	rsb	r3, r3, #7
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <StartDefaultTask+0x144>)
 80020ee:	5cd1      	ldrb	r1, [r2, r3]
 80020f0:	f107 0208 	add.w	r2, r7, #8
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	4413      	add	r3, r2
 80020f8:	460a      	mov	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
	  			for(int i= 0;i<8;i++)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3301      	adds	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b07      	cmp	r3, #7
 8002106:	ddee      	ble.n	80020e6 <StartDefaultTask+0xe6>
	  			}
	  			bytes[7] = toyota_checksum(0x343, *(uint64_t*)temp, 8);
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	2108      	movs	r1, #8
 8002112:	9100      	str	r1, [sp, #0]
 8002114:	f240 3043 	movw	r0, #835	; 0x343
 8002118:	f7ff f8d8 	bl	80012cc <toyota_checksum>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <StartDefaultTask+0x144>)
 8002122:	71da      	strb	r2, [r3, #7]


	  			CAN_SendMessage(&hcan1,0x343,8, bytes);
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <StartDefaultTask+0x144>)
 8002126:	2208      	movs	r2, #8
 8002128:	f240 3143 	movw	r1, #835	; 0x343
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <StartDefaultTask+0x154>)
 800212e:	f7ff fa91 	bl	8001654 <CAN_SendMessage>
  {
 8002132:	e769      	b.n	8002008 <StartDefaultTask+0x8>
 8002134:	f3af 8000 	nop.w
 8002138:	47ae147b 	.word	0x47ae147b
 800213c:	3f947ae1 	.word	0x3f947ae1
 8002140:	20001a18 	.word	0x20001a18
 8002144:	20001a38 	.word	0x20001a38
 8002148:	20001a40 	.word	0x20001a40
 800214c:	20001a28 	.word	0x20001a28
 8002150:	20001a48 	.word	0x20001a48
 8002154:	200019b0 	.word	0x200019b0

08002158 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	adc = HAL_ADC_GetValue(&hadc1);
 8002160:	4827      	ldr	r0, [pc, #156]	; (8002200 <StartTask02+0xa8>)
 8002162:	f000 fca7 	bl	8002ab4 <HAL_ADC_GetValue>
 8002166:	4603      	mov	r3, r0
 8002168:	4a26      	ldr	r2, [pc, #152]	; (8002204 <StartTask02+0xac>)
 800216a:	6013      	str	r3, [r2, #0]
	float min = -100;
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <StartTask02+0xb0>)
 800216e:	60fb      	str	r3, [r7, #12]
	float max = 100;
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <StartTask02+0xb4>)
 8002172:	60bb      	str	r3, [r7, #8]
	Commandstruct.SetSteerAngle = (float)((float)adc - 100.0f) * (float)(max - min) / (float)(2015.0f - 100.0f) + min;
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <StartTask02+0xac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fd05 	bl	8000b88 <__aeabi_ui2f>
 800217e:	4603      	mov	r3, r0
 8002180:	4922      	ldr	r1, [pc, #136]	; (800220c <StartTask02+0xb4>)
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fc4e 	bl	8000a24 <__aeabi_fsub>
 8002188:	4603      	mov	r3, r0
 800218a:	461c      	mov	r4, r3
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f7fe fc48 	bl	8000a24 <__aeabi_fsub>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fd4d 	bl	8000c38 <__aeabi_fmul>
 800219e:	4603      	mov	r3, r0
 80021a0:	491b      	ldr	r1, [pc, #108]	; (8002210 <StartTask02+0xb8>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fdfc 	bl	8000da0 <__aeabi_fdiv>
 80021a8:	4603      	mov	r3, r0
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fc3b 	bl	8000a28 <__addsf3>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <StartTask02+0xbc>)
 80021b8:	605a      	str	r2, [r3, #4]
	Commandstruct.SetSteerAngle = Commandstruct.SetSteerAngle > 540 ? 540 : Commandstruct.SetSteerAngle;
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <StartTask02+0xbc>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4916      	ldr	r1, [pc, #88]	; (8002218 <StartTask02+0xc0>)
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fef5 	bl	8000fb0 <__aeabi_fcmpgt>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <StartTask02+0x78>
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <StartTask02+0xc0>)
 80021ce:	e001      	b.n	80021d4 <StartTask02+0x7c>
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <StartTask02+0xbc>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <StartTask02+0xbc>)
 80021d6:	6053      	str	r3, [r2, #4]
	Commandstruct.SetSteerAngle = Commandstruct.SetSteerAngle < -540 ? -540 : Commandstruct.SetSteerAngle;
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <StartTask02+0xbc>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	490f      	ldr	r1, [pc, #60]	; (800221c <StartTask02+0xc4>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fec8 	bl	8000f74 <__aeabi_fcmplt>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <StartTask02+0x96>
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <StartTask02+0xc4>)
 80021ec:	e001      	b.n	80021f2 <StartTask02+0x9a>
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <StartTask02+0xbc>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <StartTask02+0xbc>)
 80021f4:	6053      	str	r3, [r2, #4]
	osDelay(1);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f003 f848 	bl	800528c <osDelay>
  {
 80021fc:	e7b0      	b.n	8002160 <StartTask02+0x8>
 80021fe:	bf00      	nop
 8002200:	20001980 	.word	0x20001980
 8002204:	20001a34 	.word	0x20001a34
 8002208:	c2c80000 	.word	0xc2c80000
 800220c:	42c80000 	.word	0x42c80000
 8002210:	44ef6000 	.word	0x44ef6000
 8002214:	20001a28 	.word	0x20001a28
 8002218:	44070000 	.word	0x44070000
 800221c:	c4070000 	.word	0xc4070000

08002220 <HandBrake>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandBrake */
void HandBrake(void const * argument)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandBrake */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002228:	2001      	movs	r0, #1
 800222a:	f003 f82f 	bl	800528c <osDelay>
 800222e:	e7fb      	b.n	8002228 <HandBrake+0x8>

08002230 <StartStop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStop */
void StartStop(void const * argument)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStop */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002238:	2001      	movs	r0, #1
 800223a:	f003 f827 	bl	800528c <osDelay>
 800223e:	e7fb      	b.n	8002238 <StartStop+0x8>

08002240 <ParkBrake>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ParkBrake */
void ParkBrake(void const * argument)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ParkBrake */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002248:	2001      	movs	r0, #1
 800224a:	f003 f81f 	bl	800528c <osDelay>
 800224e:	e7fb      	b.n	8002248 <ParkBrake+0x8>

08002250 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002262:	f000 fa85 	bl	8002770 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40001000 	.word	0x40001000

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227c:	e7fe      	b.n	800227c <Error_Handler+0x8>
	...

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_MspInit+0x68>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_MspInit+0x68>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6193      	str	r3, [r2, #24]
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_MspInit+0x68>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_MspInit+0x68>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_MspInit+0x68>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_MspInit+0x68>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	210f      	movs	r1, #15
 80022ba:	f06f 0001 	mvn.w	r0, #1
 80022be:	f001 fcc6 	bl	8003c4e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_MspInit+0x6c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_MspInit+0x6c>)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000

080022f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_ADC_MspInit+0x6c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d121      	bne.n	8002354 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_ADC_MspInit+0x70>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_ADC_MspInit+0x70>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_ADC_MspInit+0x70>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_ADC_MspInit+0x70>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_ADC_MspInit+0x70>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_ADC_MspInit+0x70>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002340:	2340      	movs	r3, #64	; 0x40
 8002342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002344:	2303      	movs	r3, #3
 8002346:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4619      	mov	r1, r3
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_ADC_MspInit+0x74>)
 8002350:	f001 fca8 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40012400 	.word	0x40012400
 8002360:	40021000 	.word	0x40021000
 8002364:	40010800 	.word	0x40010800

08002368 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_CAN_MspInit+0x1c4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d15d      	bne.n	8002444 <HAL_CAN_MspInit+0xdc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002388:	4b69      	ldr	r3, [pc, #420]	; (8002530 <HAL_CAN_MspInit+0x1c8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	4a68      	ldr	r2, [pc, #416]	; (8002530 <HAL_CAN_MspInit+0x1c8>)
 8002390:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002392:	4b67      	ldr	r3, [pc, #412]	; (8002530 <HAL_CAN_MspInit+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10b      	bne.n	80023b2 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800239a:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 80023a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	4b60      	ldr	r3, [pc, #384]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4a5f      	ldr	r2, [pc, #380]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	6193      	str	r3, [r2, #24]
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0320 	add.w	r3, r7, #32
 80023dc:	4619      	mov	r1, r3
 80023de:	4856      	ldr	r0, [pc, #344]	; (8002538 <HAL_CAN_MspInit+0x1d0>)
 80023e0:	f001 fc60 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 0320 	add.w	r3, r7, #32
 80023f6:	4619      	mov	r1, r3
 80023f8:	484f      	ldr	r0, [pc, #316]	; (8002538 <HAL_CAN_MspInit+0x1d0>)
 80023fa:	f001 fc53 	bl	8003ca4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80023fe:	4b4f      	ldr	r3, [pc, #316]	; (800253c <HAL_CAN_MspInit+0x1d4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
 800241c:	4a47      	ldr	r2, [pc, #284]	; (800253c <HAL_CAN_MspInit+0x1d4>)
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2105      	movs	r1, #5
 8002426:	2013      	movs	r0, #19
 8002428:	f001 fc11 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800242c:	2013      	movs	r0, #19
 800242e:	f001 fc2a 	bl	8003c86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2105      	movs	r1, #5
 8002436:	2014      	movs	r0, #20
 8002438:	f001 fc09 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800243c:	2014      	movs	r0, #20
 800243e:	f001 fc22 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002442:	e06f      	b.n	8002524 <HAL_CAN_MspInit+0x1bc>
  else if(hcan->Instance==CAN2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <HAL_CAN_MspInit+0x1d8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d16a      	bne.n	8002524 <HAL_CAN_MspInit+0x1bc>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800244e:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 8002454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_CAN_MspInit+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	4a30      	ldr	r2, [pc, #192]	; (8002530 <HAL_CAN_MspInit+0x1c8>)
 800246e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_CAN_MspInit+0x1c8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10b      	bne.n	8002490 <HAL_CAN_MspInit+0x128>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 800247e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002482:	61d3      	str	r3, [r2, #28]
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_CAN_MspInit+0x1cc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024a8:	2320      	movs	r3, #32
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 0320 	add.w	r3, r7, #32
 80024b8:	4619      	mov	r1, r3
 80024ba:	481f      	ldr	r0, [pc, #124]	; (8002538 <HAL_CAN_MspInit+0x1d0>)
 80024bc:	f001 fbf2 	bl	8003ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024c0:	2340      	movs	r3, #64	; 0x40
 80024c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 0320 	add.w	r3, r7, #32
 80024d0:	4619      	mov	r1, r3
 80024d2:	4819      	ldr	r0, [pc, #100]	; (8002538 <HAL_CAN_MspInit+0x1d0>)
 80024d4:	f001 fbe6 	bl	8003ca4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_CAN_MspInit+0x1d4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <HAL_CAN_MspInit+0x1d4>)
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2105      	movs	r1, #5
 80024f8:	203f      	movs	r0, #63	; 0x3f
 80024fa:	f001 fba8 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80024fe:	203f      	movs	r0, #63	; 0x3f
 8002500:	f001 fbc1 	bl	8003c86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2105      	movs	r1, #5
 8002508:	2040      	movs	r0, #64	; 0x40
 800250a:	f001 fba0 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800250e:	2040      	movs	r0, #64	; 0x40
 8002510:	f001 fbb9 	bl	8003c86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2105      	movs	r1, #5
 8002518:	2041      	movs	r0, #65	; 0x41
 800251a:	f001 fb98 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800251e:	2041      	movs	r0, #65	; 0x41
 8002520:	f001 fbb1 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 8002524:	bf00      	nop
 8002526:	3738      	adds	r7, #56	; 0x38
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40006400 	.word	0x40006400
 8002530:	20001a4c 	.word	0x20001a4c
 8002534:	40021000 	.word	0x40021000
 8002538:	40010c00 	.word	0x40010c00
 800253c:	40010000 	.word	0x40010000
 8002540:	40006800 	.word	0x40006800

08002544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	; 0x38
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_InitTick+0xe8>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a33      	ldr	r2, [pc, #204]	; (800262c <HAL_InitTick+0xe8>)
 8002560:	f043 0310 	orr.w	r3, r3, #16
 8002564:	61d3      	str	r3, [r2, #28]
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_InitTick+0xe8>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002572:	f107 0210 	add.w	r2, r7, #16
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fa3f 	bl	8004a00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800258c:	f002 fa24 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8002590:	6378      	str	r0, [r7, #52]	; 0x34
 8002592:	e004      	b.n	800259e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002594:	f002 fa20 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8002598:	4603      	mov	r3, r0
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <HAL_InitTick+0xec>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	3b01      	subs	r3, #1
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_InitTick+0xf0>)
 80025ae:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_InitTick+0xf4>)
 80025b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_InitTick+0xf0>)
 80025b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025ba:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_InitTick+0xf0>)
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_InitTick+0xf0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_InitTick+0xf0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_InitTick+0xf0>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80025d2:	4818      	ldr	r0, [pc, #96]	; (8002634 <HAL_InitTick+0xf0>)
 80025d4:	f002 fb94 	bl	8004d00 <HAL_TIM_Base_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80025de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11b      	bne.n	800261e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80025e6:	4813      	ldr	r0, [pc, #76]	; (8002634 <HAL_InitTick+0xf0>)
 80025e8:	f002 fbe2 	bl	8004db0 <HAL_TIM_Base_Start_IT>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80025f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d111      	bne.n	800261e <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80025fa:	2036      	movs	r0, #54	; 0x36
 80025fc:	f001 fb43 	bl	8003c86 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	d808      	bhi.n	8002618 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002606:	2200      	movs	r2, #0
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	2036      	movs	r0, #54	; 0x36
 800260c:	f001 fb1f 	bl	8003c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_InitTick+0xf8>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e002      	b.n	800261e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800261e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002622:	4618      	mov	r0, r3
 8002624:	3738      	adds	r7, #56	; 0x38
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	431bde83 	.word	0x431bde83
 8002634:	20001a50 	.word	0x20001a50
 8002638:	40001000 	.word	0x40001000
 800263c:	20000004 	.word	0x20000004

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <NMI_Handler+0x4>

08002646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <HardFault_Handler+0x4>

0800264c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <MemManage_Handler+0x4>

08002652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <BusFault_Handler+0x4>

08002658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <UsageFault_Handler+0x4>

0800265e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <CAN1_TX_IRQHandler+0x10>)
 8002672:	f001 f826 	bl	80036c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200019b0 	.word	0x200019b0

08002680 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	CAN_GetMessage(&hcan1);
 8002684:	4803      	ldr	r0, [pc, #12]	; (8002694 <CAN1_RX0_IRQHandler+0x14>)
 8002686:	f7ff f8a3 	bl	80017d0 <CAN_GetMessage>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800268a:	4802      	ldr	r0, [pc, #8]	; (8002694 <CAN1_RX0_IRQHandler+0x14>)
 800268c:	f001 f819 	bl	80036c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200019b0 	.word	0x200019b0

08002698 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <TIM6_IRQHandler+0x10>)
 800269e:	f002 fbe1 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20001a50 	.word	0x20001a50

080026ac <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <CAN2_TX_IRQHandler+0x10>)
 80026b2:	f001 f806 	bl	80036c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200019d8 	.word	0x200019d8

080026c0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	CAN_GetMessage(&hcan2);
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <CAN2_RX0_IRQHandler+0x14>)
 80026c6:	f7ff f883 	bl	80017d0 <CAN_GetMessage>
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80026ca:	4802      	ldr	r0, [pc, #8]	; (80026d4 <CAN2_RX0_IRQHandler+0x14>)
 80026cc:	f000 fff9 	bl	80036c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200019d8 	.word	0x200019d8

080026d8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <CAN2_RX1_IRQHandler+0x10>)
 80026de:	f000 fff0 	bl	80036c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200019d8 	.word	0x200019d8

080026ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f8:	f7ff fff8 	bl	80026ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026fc:	480b      	ldr	r0, [pc, #44]	; (800272c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026fe:	490c      	ldr	r1, [pc, #48]	; (8002730 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002714:	4c09      	ldr	r4, [pc, #36]	; (800273c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002722:	f004 fe2b 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002726:	f7ff f9f7 	bl	8001b18 <main>
  bx lr
 800272a:	4770      	bx	lr
  ldr r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002730:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002734:	0800753c 	.word	0x0800753c
  ldr r2, =_sbss
 8002738:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800273c:	20002be8 	.word	0x20002be8

08002740 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC1_2_IRQHandler>
	...

08002744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_Init+0x28>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_Init+0x28>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002754:	2003      	movs	r0, #3
 8002756:	f001 fa6f 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fef2 	bl	8002544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002760:	f7ff fd8e 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_IncTick+0x1c>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_IncTick+0x20>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_IncTick+0x20>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	20000008 	.word	0x20000008
 8002790:	20001a98 	.word	0x20001a98

08002794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b02      	ldr	r3, [pc, #8]	; (80027a4 <HAL_GetTick+0x10>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	20001a98 	.word	0x20001a98

080027a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0be      	b.n	8002948 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fd82 	bl	80022f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fabf 	bl	8002d70 <ADC_ConversionStop_Disable>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8099 	bne.w	8002936 <HAL_ADC_Init+0x18e>
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 8095 	bne.w	8002936 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002814:	f023 0302 	bic.w	r3, r3, #2
 8002818:	f043 0202 	orr.w	r2, r3, #2
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002828:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7b1b      	ldrb	r3, [r3, #12]
 800282e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002830:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4313      	orrs	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002840:	d003      	beq.n	800284a <HAL_ADC_Init+0xa2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_ADC_Init+0xa8>
 800284a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284e:	e000      	b.n	8002852 <HAL_ADC_Init+0xaa>
 8002850:	2300      	movs	r3, #0
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7d1b      	ldrb	r3, [r3, #20]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d119      	bne.n	8002894 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7b1b      	ldrb	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	3b01      	subs	r3, #1
 800286e:	035a      	lsls	r2, r3, #13
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	e00b      	b.n	8002894 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_ADC_Init+0x1a8>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c4:	d003      	beq.n	80028ce <HAL_ADC_Init+0x126>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d104      	bne.n	80028d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	051b      	lsls	r3, r3, #20
 80028d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_ADC_Init+0x1ac>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d10b      	bne.n	8002914 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002912:	e018      	b.n	8002946 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f023 0312 	bic.w	r3, r3, #18
 800291c:	f043 0210 	orr.w	r2, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002934:	e007      	b.n	8002946 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	f043 0210 	orr.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	ffe1f7fd 	.word	0xffe1f7fd
 8002954:	ff1f0efe 	.word	0xff1f0efe

08002958 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_ADC_Start+0x1a>
 800296e:	2302      	movs	r3, #2
 8002970:	e098      	b.n	8002aa4 <HAL_ADC_Start+0x14c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f99e 	bl	8002cbc <ADC_Enable>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8087 	bne.w	8002a9a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a41      	ldr	r2, [pc, #260]	; (8002aac <HAL_ADC_Start+0x154>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_Start+0x5e>
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_ADC_Start+0x158>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d115      	bne.n	80029e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d026      	beq.n	8002a1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029e0:	e01d      	b.n	8002a1e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <HAL_ADC_Start+0x158>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_ADC_Start+0xaa>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_ADC_Start+0x154>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10d      	bne.n	8002a1e <HAL_ADC_Start+0xc6>
 8002a02:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_ADC_Start+0x158>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	f023 0206 	bic.w	r2, r3, #6
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a36:	e002      	b.n	8002a3e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f06f 0202 	mvn.w	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a5e:	d113      	bne.n	8002a88 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a64:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_ADC_Start+0x154>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d105      	bne.n	8002a76 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_ADC_Start+0x158>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	e00c      	b.n	8002aa2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	e003      	b.n	8002aa2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40012800 	.word	0x40012800
 8002ab0:	40012400 	.word	0x40012400

08002ab4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x20>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0dc      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x1da>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d81c      	bhi.n	8002b36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b05      	subs	r3, #5
 8002b0e:	221f      	movs	r2, #31
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b05      	subs	r3, #5
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34
 8002b34:	e03c      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d81c      	bhi.n	8002b78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b23      	subs	r3, #35	; 0x23
 8002b50:	221f      	movs	r2, #31
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4019      	ands	r1, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	3b23      	subs	r3, #35	; 0x23
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
 8002b76:	e01b      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b41      	subs	r3, #65	; 0x41
 8002b8a:	221f      	movs	r2, #31
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4019      	ands	r1, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b41      	subs	r3, #65	; 0x41
 8002ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d91c      	bls.n	8002bf2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68d9      	ldr	r1, [r3, #12]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	2207      	movs	r2, #7
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	4019      	ands	r1, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6898      	ldr	r0, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	3b1e      	subs	r3, #30
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	e019      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6919      	ldr	r1, [r3, #16]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	2207      	movs	r2, #7
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4019      	ands	r1, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6898      	ldr	r0, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d003      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c32:	2b11      	cmp	r3, #17
 8002c34:	d132      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d125      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d126      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c5c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d11a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	0c9a      	lsrs	r2, r3, #18
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c7c:	e002      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f9      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x1b2>
 8002c8a:	e007      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	40012400 	.word	0x40012400
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d040      	beq.n	8002d5c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cea:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <ADC_Enable+0xac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <ADC_Enable+0xb0>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	0c9b      	lsrs	r3, r3, #18
 8002cf6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cf8:	e002      	b.n	8002d00 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f9      	bne.n	8002cfa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d06:	f7ff fd45 	bl	8002794 <HAL_GetTick>
 8002d0a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d0c:	e01f      	b.n	8002d4e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d0e:	f7ff fd41 	bl	8002794 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d918      	bls.n	8002d4e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d011      	beq.n	8002d4e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	f043 0210 	orr.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d1d8      	bne.n	8002d0e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	431bde83 	.word	0x431bde83

08002d70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d12e      	bne.n	8002de8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9a:	f7ff fcfb 	bl	8002794 <HAL_GetTick>
 8002d9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002da0:	e01b      	b.n	8002dda <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002da2:	f7ff fcf7 	bl	8002794 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d914      	bls.n	8002dda <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10d      	bne.n	8002dda <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e007      	b.n	8002dea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d0dc      	beq.n	8002da2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0ed      	b.n	8002fe0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff faa9 	bl	8002368 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e26:	f7ff fcb5 	bl	8002794 <HAL_GetTick>
 8002e2a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e2c:	e012      	b.n	8002e54 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e2e:	f7ff fcb1 	bl	8002794 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b0a      	cmp	r3, #10
 8002e3a:	d90b      	bls.n	8002e54 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0c5      	b.n	8002fe0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0e5      	beq.n	8002e2e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0202 	bic.w	r2, r2, #2
 8002e70:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e72:	f7ff fc8f 	bl	8002794 <HAL_GetTick>
 8002e76:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e78:	e012      	b.n	8002ea0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e7a:	f7ff fc8b 	bl	8002794 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d90b      	bls.n	8002ea0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2205      	movs	r2, #5
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e09f      	b.n	8002fe0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e5      	bne.n	8002e7a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7e1b      	ldrb	r3, [r3, #24]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e007      	b.n	8002ed8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e5b      	ldrb	r3, [r3, #25]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d108      	bne.n	8002ef2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e007      	b.n	8002f02 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7e9b      	ldrb	r3, [r3, #26]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d108      	bne.n	8002f1c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e007      	b.n	8002f2c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0220 	bic.w	r2, r2, #32
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7edb      	ldrb	r3, [r3, #27]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d108      	bne.n	8002f46 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0210 	bic.w	r2, r2, #16
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e007      	b.n	8002f56 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0210 	orr.w	r2, r2, #16
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7f1b      	ldrb	r3, [r3, #28]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d108      	bne.n	8002f70 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0208 	orr.w	r2, r2, #8
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e007      	b.n	8002f80 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0208 	bic.w	r2, r2, #8
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7f5b      	ldrb	r3, [r3, #29]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0204 	orr.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e007      	b.n	8002faa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0204 	bic.w	r2, r2, #4
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	ea42 0103 	orr.w	r1, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	1e5a      	subs	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d003      	beq.n	800300e <HAL_CAN_ConfigFilter+0x26>
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	2b02      	cmp	r3, #2
 800300a:	f040 80be 	bne.w	800318a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800300e:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003010:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003028:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	431a      	orrs	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d123      	bne.n	80030b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003092:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3248      	adds	r2, #72	; 0x48
 8003098:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	3348      	adds	r3, #72	; 0x48
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d122      	bne.n	8003106 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3248      	adds	r2, #72	; 0x48
 80030e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	3348      	adds	r3, #72	; 0x48
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43db      	mvns	r3, r3
 8003118:	401a      	ands	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003120:	e007      	b.n	8003132 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	431a      	orrs	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	401a      	ands	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800314c:	e007      	b.n	800315e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	431a      	orrs	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800317c:	f023 0201 	bic.w	r2, r3, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e006      	b.n	8003198 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
  }
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40006400 	.word	0x40006400

080031a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d12e      	bne.n	800321a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031d4:	f7ff fade 	bl	8002794 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031da:	e012      	b.n	8003202 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031dc:	f7ff fada 	bl	8002794 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b0a      	cmp	r3, #10
 80031e8:	d90b      	bls.n	8003202 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2205      	movs	r2, #5
 80031fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e012      	b.n	8003228 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e006      	b.n	8003228 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003244:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d003      	beq.n	800325c <HAL_CAN_AddTxMessage+0x2c>
 8003254:	7ffb      	ldrb	r3, [r7, #31]
 8003256:	2b02      	cmp	r3, #2
 8003258:	f040 80ad 	bne.w	80033b6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8095 	beq.w	80033a6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	0e1b      	lsrs	r3, r3, #24
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003286:	2201      	movs	r2, #1
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	6809      	ldr	r1, [r1, #0]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	3318      	adds	r3, #24
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	440b      	add	r3, r1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e00f      	b.n	80032d4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032be:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032c4:	68f9      	ldr	r1, [r7, #12]
 80032c6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032c8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3318      	adds	r3, #24
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	440b      	add	r3, r1
 80032d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3318      	adds	r3, #24
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	440b      	add	r3, r1
 80032e4:	3304      	adds	r3, #4
 80032e6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	7d1b      	ldrb	r3, [r3, #20]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d111      	bne.n	8003314 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3318      	adds	r3, #24
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	6811      	ldr	r1, [r2, #0]
 8003304:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3318      	adds	r3, #24
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	440b      	add	r3, r1
 8003310:	3304      	adds	r3, #4
 8003312:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3307      	adds	r3, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	061a      	lsls	r2, r3, #24
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3306      	adds	r3, #6
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3305      	adds	r3, #5
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4313      	orrs	r3, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	3204      	adds	r2, #4
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	4610      	mov	r0, r2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	6811      	ldr	r1, [r2, #0]
 800333c:	ea43 0200 	orr.w	r2, r3, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	440b      	add	r3, r1
 8003346:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800334a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3303      	adds	r3, #3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	061a      	lsls	r2, r3, #24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3302      	adds	r3, #2
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3301      	adds	r3, #1
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	4313      	orrs	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	4610      	mov	r0, r2
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	6811      	ldr	r1, [r2, #0]
 8003372:	ea43 0200 	orr.w	r2, r3, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	440b      	add	r3, r1
 800337c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003380:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3318      	adds	r3, #24
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	4413      	add	r3, r2
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6811      	ldr	r1, [r2, #0]
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	3318      	adds	r3, #24
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	440b      	add	r3, r1
 80033a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e00e      	b.n	80033c4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e006      	b.n	80033c4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80033e2:	7afb      	ldrb	r3, [r7, #11]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d002      	beq.n	80033ee <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80033e8:	7afb      	ldrb	r3, [r7, #11]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d11d      	bne.n	800342a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3301      	adds	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003436:	b480      	push	{r7}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800344a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d003      	beq.n	800345a <HAL_CAN_GetRxMessage+0x24>
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b02      	cmp	r3, #2
 8003456:	f040 8103 	bne.w	8003660 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10e      	bne.n	800347e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0f7      	b.n	800366e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0e8      	b.n	800366e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	331b      	adds	r3, #27
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0204 	and.w	r2, r3, #4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	331b      	adds	r3, #27
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	4413      	add	r3, r2
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0d5b      	lsrs	r3, r3, #21
 80034ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e00b      	b.n	80034ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	331b      	adds	r3, #27
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	4413      	add	r3, r2
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	08db      	lsrs	r3, r3, #3
 80034e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	331b      	adds	r3, #27
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0202 	and.w	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	331b      	adds	r3, #27
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	3304      	adds	r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2208      	movs	r2, #8
 800351e:	611a      	str	r2, [r3, #16]
 8003520:	e00b      	b.n	800353a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	331b      	adds	r3, #27
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	4413      	add	r3, r2
 800352e:	3304      	adds	r3, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	331b      	adds	r3, #27
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	331b      	adds	r3, #27
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0a1a      	lsrs	r2, r3, #8
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0c1a      	lsrs	r2, r3, #16
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3302      	adds	r3, #2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0e1a      	lsrs	r2, r3, #24
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	3303      	adds	r3, #3
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	3304      	adds	r3, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	0a1a      	lsrs	r2, r3, #8
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	3305      	adds	r3, #5
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0c1a      	lsrs	r2, r3, #16
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3306      	adds	r3, #6
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e1a      	lsrs	r2, r3, #24
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3307      	adds	r3, #7
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0220 	orr.w	r2, r2, #32
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	e007      	b.n	800365c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e006      	b.n	800366e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003688:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <HAL_CAN_ActivateNotification+0x1e>
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d109      	bne.n	80036aa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6959      	ldr	r1, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e006      	b.n	80036b8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08a      	sub	sp, #40	; 0x28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d07c      	beq.n	8003802 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d023      	beq.n	800375a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fd fe93 	bl	8001450 <HAL_CAN_TxMailbox0CompleteCallback>
 800372a:	e016      	b.n	800375a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	e00c      	b.n	800375a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	e002      	b.n	800375a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f96b 	bl	8003a30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d024      	beq.n	80037ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fd febf 	bl	80014fc <HAL_CAN_TxMailbox1CompleteCallback>
 800377e:	e016      	b.n	80037ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	e00c      	b.n	80037ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	e002      	b.n	80037ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f94a 	bl	8003a42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d024      	beq.n	8003802 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd feeb 	bl	80015a8 <HAL_CAN_TxMailbox2CompleteCallback>
 80037d2:	e016      	b.n	8003802 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	e00c      	b.n	8003802 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	e002      	b.n	8003802 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f929 	bl	8003a54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00c      	beq.n	8003826 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2210      	movs	r2, #16
 8003824:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2208      	movs	r2, #8
 8003840:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f918 	bl	8003a78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f900 	bl	8003a66 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003880:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2210      	movs	r2, #16
 8003888:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2208      	movs	r2, #8
 80038a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8f8 	bl	8003a9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8e0 	bl	8003a8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8e1 	bl	8003aae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8d9 	bl	8003ac0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d07b      	beq.n	8003a10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d072      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397c:	2b00      	cmp	r3, #0
 800397e:	d043      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	d03e      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d02b      	beq.n	80039ec <HAL_CAN_IRQHandler+0x32a>
 8003994:	2b60      	cmp	r3, #96	; 0x60
 8003996:	d82e      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 8003998:	2b50      	cmp	r3, #80	; 0x50
 800399a:	d022      	beq.n	80039e2 <HAL_CAN_IRQHandler+0x320>
 800399c:	2b50      	cmp	r3, #80	; 0x50
 800399e:	d82a      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d019      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x316>
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d826      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d010      	beq.n	80039ce <HAL_CAN_IRQHandler+0x30c>
 80039ac:	2b30      	cmp	r3, #48	; 0x30
 80039ae:	d822      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d002      	beq.n	80039ba <HAL_CAN_IRQHandler+0x2f8>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d005      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039b8:	e01d      	b.n	80039f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f043 0308 	orr.w	r3, r3, #8
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c2:	e019      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f043 0310 	orr.w	r3, r3, #16
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039cc:	e014      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f043 0320 	orr.w	r3, r3, #32
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d6:	e00f      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039e0:	e00a      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ea:	e005      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039f4:	e000      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80039f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f855 	bl	8003ad2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <__NVIC_SetPriorityGrouping+0x44>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b00:	4013      	ands	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b16:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <__NVIC_SetPriorityGrouping+0x44>)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	60d3      	str	r3, [r2, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b30:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <__NVIC_GetPriorityGrouping+0x18>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	f003 0307 	and.w	r3, r3, #7
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db0b      	blt.n	8003b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	f003 021f 	and.w	r2, r3, #31
 8003b60:	4906      	ldr	r1, [pc, #24]	; (8003b7c <__NVIC_EnableIRQ+0x34>)
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2001      	movs	r0, #1
 8003b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	e000e100 	.word	0xe000e100

08003b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db0a      	blt.n	8003baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	490c      	ldr	r1, [pc, #48]	; (8003bcc <__NVIC_SetPriority+0x4c>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba8:	e00a      	b.n	8003bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4908      	ldr	r1, [pc, #32]	; (8003bd0 <__NVIC_SetPriority+0x50>)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	3b04      	subs	r3, #4
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	761a      	strb	r2, [r3, #24]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	e000e100 	.word	0xe000e100
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f1c3 0307 	rsb	r3, r3, #7
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	bf28      	it	cs
 8003bf2:	2304      	movcs	r3, #4
 8003bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d902      	bls.n	8003c04 <NVIC_EncodePriority+0x30>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3b03      	subs	r3, #3
 8003c02:	e000      	b.n	8003c06 <NVIC_EncodePriority+0x32>
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	401a      	ands	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43d9      	mvns	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	4313      	orrs	r3, r2
         );
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	; 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff4f 	bl	8003ae4 <__NVIC_SetPriorityGrouping>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff ff64 	bl	8003b2c <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ffb2 	bl	8003bd4 <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff81 	bl	8003b80 <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff57 	bl	8003b48 <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b08b      	sub	sp, #44	; 0x2c
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb6:	e169      	b.n	8003f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 8158 	bne.w	8003f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a9a      	ldr	r2, [pc, #616]	; (8003f44 <HAL_GPIO_Init+0x2a0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d05e      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003ce0:	4a98      	ldr	r2, [pc, #608]	; (8003f44 <HAL_GPIO_Init+0x2a0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d875      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003ce6:	4a98      	ldr	r2, [pc, #608]	; (8003f48 <HAL_GPIO_Init+0x2a4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d058      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003cec:	4a96      	ldr	r2, [pc, #600]	; (8003f48 <HAL_GPIO_Init+0x2a4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d86f      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003cf2:	4a96      	ldr	r2, [pc, #600]	; (8003f4c <HAL_GPIO_Init+0x2a8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d052      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003cf8:	4a94      	ldr	r2, [pc, #592]	; (8003f4c <HAL_GPIO_Init+0x2a8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d869      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003cfe:	4a94      	ldr	r2, [pc, #592]	; (8003f50 <HAL_GPIO_Init+0x2ac>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04c      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003d04:	4a92      	ldr	r2, [pc, #584]	; (8003f50 <HAL_GPIO_Init+0x2ac>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d863      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003d0a:	4a92      	ldr	r2, [pc, #584]	; (8003f54 <HAL_GPIO_Init+0x2b0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d046      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003d10:	4a90      	ldr	r2, [pc, #576]	; (8003f54 <HAL_GPIO_Init+0x2b0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d85d      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003d16:	2b12      	cmp	r3, #18
 8003d18:	d82a      	bhi.n	8003d70 <HAL_GPIO_Init+0xcc>
 8003d1a:	2b12      	cmp	r3, #18
 8003d1c:	d859      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <HAL_GPIO_Init+0x80>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d9f 	.word	0x08003d9f
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d8b 	.word	0x08003d8b
 8003d30:	08003dcd 	.word	0x08003dcd
 8003d34:	08003dd3 	.word	0x08003dd3
 8003d38:	08003dd3 	.word	0x08003dd3
 8003d3c:	08003dd3 	.word	0x08003dd3
 8003d40:	08003dd3 	.word	0x08003dd3
 8003d44:	08003dd3 	.word	0x08003dd3
 8003d48:	08003dd3 	.word	0x08003dd3
 8003d4c:	08003dd3 	.word	0x08003dd3
 8003d50:	08003dd3 	.word	0x08003dd3
 8003d54:	08003dd3 	.word	0x08003dd3
 8003d58:	08003dd3 	.word	0x08003dd3
 8003d5c:	08003dd3 	.word	0x08003dd3
 8003d60:	08003dd3 	.word	0x08003dd3
 8003d64:	08003dd3 	.word	0x08003dd3
 8003d68:	08003d81 	.word	0x08003d81
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	4a79      	ldr	r2, [pc, #484]	; (8003f58 <HAL_GPIO_Init+0x2b4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d76:	e02c      	b.n	8003dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	623b      	str	r3, [r7, #32]
          break;
 8003d7e:	e029      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	3304      	adds	r3, #4
 8003d86:	623b      	str	r3, [r7, #32]
          break;
 8003d88:	e024      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	623b      	str	r3, [r7, #32]
          break;
 8003d92:	e01f      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	623b      	str	r3, [r7, #32]
          break;
 8003d9c:	e01a      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003da6:	2304      	movs	r3, #4
 8003da8:	623b      	str	r3, [r7, #32]
          break;
 8003daa:	e013      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db4:	2308      	movs	r3, #8
 8003db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	611a      	str	r2, [r3, #16]
          break;
 8003dbe:	e009      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	615a      	str	r2, [r3, #20]
          break;
 8003dca:	e003      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
          break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          break;
 8003dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2bff      	cmp	r3, #255	; 0xff
 8003dd8:	d801      	bhi.n	8003dde <HAL_GPIO_Init+0x13a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	e001      	b.n	8003de2 <HAL_GPIO_Init+0x13e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2bff      	cmp	r3, #255	; 0xff
 8003de8:	d802      	bhi.n	8003df0 <HAL_GPIO_Init+0x14c>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	e002      	b.n	8003df6 <HAL_GPIO_Init+0x152>
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	3b08      	subs	r3, #8
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	210f      	movs	r1, #15
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	401a      	ands	r2, r3
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	431a      	orrs	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 80b1 	beq.w	8003f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e24:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <HAL_GPIO_Init+0x2b8>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	4a4c      	ldr	r2, [pc, #304]	; (8003f5c <HAL_GPIO_Init+0x2b8>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6193      	str	r3, [r2, #24]
 8003e30:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_GPIO_Init+0x2b8>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e3c:	4a48      	ldr	r2, [pc, #288]	; (8003f60 <HAL_GPIO_Init+0x2bc>)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a40      	ldr	r2, [pc, #256]	; (8003f64 <HAL_GPIO_Init+0x2c0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d013      	beq.n	8003e90 <HAL_GPIO_Init+0x1ec>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3f      	ldr	r2, [pc, #252]	; (8003f68 <HAL_GPIO_Init+0x2c4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00d      	beq.n	8003e8c <HAL_GPIO_Init+0x1e8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3e      	ldr	r2, [pc, #248]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <HAL_GPIO_Init+0x1e4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3d      	ldr	r2, [pc, #244]	; (8003f70 <HAL_GPIO_Init+0x2cc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_GPIO_Init+0x1e0>
 8003e80:	2303      	movs	r3, #3
 8003e82:	e006      	b.n	8003e92 <HAL_GPIO_Init+0x1ee>
 8003e84:	2304      	movs	r3, #4
 8003e86:	e004      	b.n	8003e92 <HAL_GPIO_Init+0x1ee>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e002      	b.n	8003e92 <HAL_GPIO_Init+0x1ee>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_GPIO_Init+0x1ee>
 8003e90:	2300      	movs	r3, #0
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	f002 0203 	and.w	r2, r2, #3
 8003e98:	0092      	lsls	r2, r2, #2
 8003e9a:	4093      	lsls	r3, r2
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ea2:	492f      	ldr	r1, [pc, #188]	; (8003f60 <HAL_GPIO_Init+0x2bc>)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	492c      	ldr	r1, [pc, #176]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	4928      	ldr	r1, [pc, #160]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ee4:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	4922      	ldr	r1, [pc, #136]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60cb      	str	r3, [r1, #12]
 8003ef0:	e006      	b.n	8003f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	491e      	ldr	r1, [pc, #120]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d006      	beq.n	8003f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	4918      	ldr	r1, [pc, #96]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	4914      	ldr	r1, [pc, #80]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d021      	beq.n	8003f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f34:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_GPIO_Init+0x2d0>)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]
 8003f40:	e021      	b.n	8003f86 <HAL_GPIO_Init+0x2e2>
 8003f42:	bf00      	nop
 8003f44:	10320000 	.word	0x10320000
 8003f48:	10310000 	.word	0x10310000
 8003f4c:	10220000 	.word	0x10220000
 8003f50:	10210000 	.word	0x10210000
 8003f54:	10120000 	.word	0x10120000
 8003f58:	10110000 	.word	0x10110000
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40010800 	.word	0x40010800
 8003f68:	40010c00 	.word	0x40010c00
 8003f6c:	40011000 	.word	0x40011000
 8003f70:	40011400 	.word	0x40011400
 8003f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_GPIO_Init+0x304>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	4909      	ldr	r1, [pc, #36]	; (8003fa8 <HAL_GPIO_Init+0x304>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	3301      	adds	r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f47f ae8e 	bne.w	8003cb8 <HAL_GPIO_Init+0x14>
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	372c      	adds	r7, #44	; 0x2c
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	40010400 	.word	0x40010400

08003fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fbc:	787b      	ldrb	r3, [r7, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fc8:	e003      	b.n	8003fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	041a      	lsls	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e304      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8087 	beq.w	800410a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ffc:	4b92      	ldr	r3, [pc, #584]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b04      	cmp	r3, #4
 8004006:	d00c      	beq.n	8004022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004008:	4b8f      	ldr	r3, [pc, #572]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d112      	bne.n	800403a <HAL_RCC_OscConfig+0x5e>
 8004014:	4b8c      	ldr	r3, [pc, #560]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d10b      	bne.n	800403a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4b89      	ldr	r3, [pc, #548]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06c      	beq.n	8004108 <HAL_RCC_OscConfig+0x12c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d168      	bne.n	8004108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e2de      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x76>
 8004044:	4b80      	ldr	r3, [pc, #512]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a7f      	ldr	r2, [pc, #508]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e02e      	b.n	80040b0 <HAL_RCC_OscConfig+0xd4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x98>
 800405a:	4b7b      	ldr	r3, [pc, #492]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7a      	ldr	r2, [pc, #488]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b78      	ldr	r3, [pc, #480]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a77      	ldr	r2, [pc, #476]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800406c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e01d      	b.n	80040b0 <HAL_RCC_OscConfig+0xd4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0xbc>
 800407e:	4b72      	ldr	r3, [pc, #456]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a71      	ldr	r2, [pc, #452]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0xd4>
 8004098:	4b6b      	ldr	r3, [pc, #428]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6a      	ldr	r2, [pc, #424]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fb6c 	bl	8002794 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fb68 	bl	8002794 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e292      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b5d      	ldr	r3, [pc, #372]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0xe4>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe fb58 	bl	8002794 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fe fb54 	bl	8002794 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e27e      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x10c>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004116:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004122:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b08      	cmp	r3, #8
 800412c:	d11c      	bne.n	8004168 <HAL_RCC_OscConfig+0x18c>
 800412e:	4b46      	ldr	r3, [pc, #280]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d116      	bne.n	8004168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_RCC_OscConfig+0x176>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e252      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4939      	ldr	r1, [pc, #228]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	e03a      	b.n	80041de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <HAL_RCC_OscConfig+0x270>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fe fb0d 	bl	8002794 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe fb09 	bl	8002794 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e233      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4927      	ldr	r1, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	e015      	b.n	80041de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_RCC_OscConfig+0x270>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe faec 	bl	8002794 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fe fae8 	bl	8002794 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e212      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d03a      	beq.n	8004260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d019      	beq.n	8004226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <HAL_RCC_OscConfig+0x274>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fe facc 	bl	8002794 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004200:	f7fe fac8 	bl	8002794 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1f2      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800421e:	2001      	movs	r0, #1
 8004220:	f000 fc1e 	bl	8004a60 <RCC_Delay>
 8004224:	e01c      	b.n	8004260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_RCC_OscConfig+0x274>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422c:	f7fe fab2 	bl	8002794 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004232:	e00f      	b.n	8004254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004234:	f7fe faae 	bl	8002794 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d908      	bls.n	8004254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e1d8      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	42420000 	.word	0x42420000
 8004250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b9b      	ldr	r3, [pc, #620]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e9      	bne.n	8004234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a6 	beq.w	80043ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004272:	4b94      	ldr	r3, [pc, #592]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	4b91      	ldr	r3, [pc, #580]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4a90      	ldr	r2, [pc, #576]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	61d3      	str	r3, [r2, #28]
 800428a:	4b8e      	ldr	r3, [pc, #568]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b8b      	ldr	r3, [pc, #556]	; (80044c8 <HAL_RCC_OscConfig+0x4ec>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d118      	bne.n	80042d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a6:	4b88      	ldr	r3, [pc, #544]	; (80044c8 <HAL_RCC_OscConfig+0x4ec>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a87      	ldr	r2, [pc, #540]	; (80044c8 <HAL_RCC_OscConfig+0x4ec>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fa6f 	bl	8002794 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ba:	f7fe fa6b 	bl	8002794 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e195      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b7e      	ldr	r3, [pc, #504]	; (80044c8 <HAL_RCC_OscConfig+0x4ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x312>
 80042e0:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	e02d      	b.n	800434a <HAL_RCC_OscConfig+0x36e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x334>
 80042f6:	4b73      	ldr	r3, [pc, #460]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4a72      	ldr	r2, [pc, #456]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6213      	str	r3, [r2, #32]
 8004302:	4b70      	ldr	r3, [pc, #448]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4a6f      	ldr	r2, [pc, #444]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	6213      	str	r3, [r2, #32]
 800430e:	e01c      	b.n	800434a <HAL_RCC_OscConfig+0x36e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b05      	cmp	r3, #5
 8004316:	d10c      	bne.n	8004332 <HAL_RCC_OscConfig+0x356>
 8004318:	4b6a      	ldr	r3, [pc, #424]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4a69      	ldr	r2, [pc, #420]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	6213      	str	r3, [r2, #32]
 8004324:	4b67      	ldr	r3, [pc, #412]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4a66      	ldr	r2, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6213      	str	r3, [r2, #32]
 8004330:	e00b      	b.n	800434a <HAL_RCC_OscConfig+0x36e>
 8004332:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4a63      	ldr	r2, [pc, #396]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6213      	str	r3, [r2, #32]
 800433e:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4a60      	ldr	r2, [pc, #384]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004344:	f023 0304 	bic.w	r3, r3, #4
 8004348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d015      	beq.n	800437e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004352:	f7fe fa1f 	bl	8002794 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fe fa1b 	bl	8002794 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e143      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004370:	4b54      	ldr	r3, [pc, #336]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ee      	beq.n	800435a <HAL_RCC_OscConfig+0x37e>
 800437c:	e014      	b.n	80043a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437e:	f7fe fa09 	bl	8002794 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe fa05 	bl	8002794 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e12d      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439c:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1ee      	bne.n	8004386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d105      	bne.n	80043ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ae:	4b45      	ldr	r3, [pc, #276]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4a44      	ldr	r2, [pc, #272]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 808c 	beq.w	80044dc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80043c4:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d10e      	bne.n	80043f0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80043d2:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d108      	bne.n	80043f0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80043de:	4b39      	ldr	r3, [pc, #228]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80043e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e103      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d14e      	bne.n	8004496 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80043f8:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004404:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0ef      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004418:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <HAL_RCC_OscConfig+0x4f0>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fe f9b9 	bl	8002794 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004426:	f7fe f9b5 	bl	8002794 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b64      	cmp	r3, #100	; 0x64
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0df      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004438:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004444:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	491c      	ldr	r1, [pc, #112]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4918      	ldr	r1, [pc, #96]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004464:	4313      	orrs	r3, r2
 8004466:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004468:	4b18      	ldr	r3, [pc, #96]	; (80044cc <HAL_RCC_OscConfig+0x4f0>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fe f991 	bl	8002794 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004476:	f7fe f98d 	bl	8002794 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b64      	cmp	r3, #100	; 0x64
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0b7      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004488:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x49a>
 8004494:	e022      	b.n	80044dc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <HAL_RCC_OscConfig+0x4e8>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <HAL_RCC_OscConfig+0x4f0>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fe f974 	bl	8002794 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80044ae:	e00f      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044b0:	f7fe f970 	bl	8002794 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d908      	bls.n	80044d0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e09a      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40007000 	.word	0x40007000
 80044cc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80044d0:	4b4b      	ldr	r3, [pc, #300]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e9      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8088 	beq.w	80045f6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d068      	beq.n	80045c4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d14d      	bne.n	8004596 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b42      	ldr	r3, [pc, #264]	; (8004604 <HAL_RCC_OscConfig+0x628>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fe f948 	bl	8002794 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004508:	f7fe f944 	bl	8002794 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e06e      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d10f      	bne.n	8004550 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4931      	ldr	r1, [pc, #196]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 800453a:	4313      	orrs	r3, r2
 800453c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800453e:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	492d      	ldr	r1, [pc, #180]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 800454c:	4313      	orrs	r3, r2
 800454e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	430b      	orrs	r3, r1
 8004562:	4927      	ldr	r1, [pc, #156]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004568:	4b26      	ldr	r3, [pc, #152]	; (8004604 <HAL_RCC_OscConfig+0x628>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456e:	f7fe f911 	bl	8002794 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004576:	f7fe f90d 	bl	8002794 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e037      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x59a>
 8004594:	e02f      	b.n	80045f6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x628>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fe f8fa 	bl	8002794 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fe f8f6 	bl	8002794 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e020      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c8>
 80045c2:	e018      	b.n	80045f6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e013      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x624>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d106      	bne.n	80045f2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	42420060 	.word	0x42420060

08004608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0d0      	b.n	80047be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d910      	bls.n	800464c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b67      	ldr	r3, [pc, #412]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 0207 	bic.w	r2, r3, #7
 8004632:	4965      	ldr	r1, [pc, #404]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0b8      	b.n	80047be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004664:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800466e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800467c:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a52      	ldr	r2, [pc, #328]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b50      	ldr	r3, [pc, #320]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	494d      	ldr	r1, [pc, #308]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d040      	beq.n	8004728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d115      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07f      	b.n	80047be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b41      	ldr	r3, [pc, #260]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e073      	b.n	80047be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e06b      	b.n	80047be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b39      	ldr	r3, [pc, #228]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4936      	ldr	r1, [pc, #216]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fe f84c 	bl	8002794 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe f848 	bl	8002794 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e053      	b.n	80047be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d210      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 0207 	bic.w	r2, r3, #7
 800473e:	4922      	ldr	r1, [pc, #136]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e032      	b.n	80047be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4916      	ldr	r1, [pc, #88]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	490e      	ldr	r1, [pc, #56]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004796:	f000 f821 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490a      	ldr	r1, [pc, #40]	; (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1cc>)
 80047b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCC_ClockConfig+0x1d0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fec4 	bl	8002544 <HAL_InitTick>

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40022000 	.word	0x40022000
 80047cc:	40021000 	.word	0x40021000
 80047d0:	080074f4 	.word	0x080074f4
 80047d4:	20000000 	.word	0x20000000
 80047d8:	20000004 	.word	0x20000004

080047dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b092      	sub	sp, #72	; 0x48
 80047e2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e8:	2300      	movs	r3, #0
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ec:	2300      	movs	r3, #0
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
 80047f0:	2300      	movs	r3, #0
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	633b      	str	r3, [r7, #48]	; 0x30
 80047fc:	2300      	movs	r3, #0
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004800:	4b6b      	ldr	r3, [pc, #428]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004808:	f003 030c 	and.w	r3, r3, #12
 800480c:	2b04      	cmp	r3, #4
 800480e:	d002      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x3a>
 8004810:	2b08      	cmp	r3, #8
 8004812:	d003      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x40>
 8004814:	e0c3      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004816:	4b67      	ldr	r3, [pc, #412]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004818:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800481a:	e0c3      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	0c9b      	lsrs	r3, r3, #18
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004826:	5c9b      	ldrb	r3, [r3, r2]
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80ac 	beq.w	800498e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004836:	4b5e      	ldr	r3, [pc, #376]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4b5f      	ldr	r3, [pc, #380]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004840:	5c9b      	ldrb	r3, [r3, r2]
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004844:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 808c 	beq.w	800496a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004852:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	3301      	adds	r3, #1
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	3302      	adds	r3, #2
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2200      	movs	r2, #0
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	627a      	str	r2, [r7, #36]	; 0x24
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	2200      	movs	r2, #0
 800487a:	4618      	mov	r0, r3
 800487c:	4611      	mov	r1, r2
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	fb00 f203 	mul.w	r2, r0, r3
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	fb03 f301 	mul.w	r3, r3, r1
 800488a:	4413      	add	r3, r2
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	fba2 4500 	umull	r4, r5, r2, r0
 8004892:	442b      	add	r3, r5
 8004894:	461d      	mov	r5, r3
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	f04f 0000 	mov.w	r0, #0
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	0159      	lsls	r1, r3, #5
 80048a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a8:	0150      	lsls	r0, r2, #5
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	ebb2 0a04 	subs.w	sl, r2, r4
 80048b2:	eb63 0b05 	sbc.w	fp, r3, r5
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048c2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048c6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048ca:	ebb2 080a 	subs.w	r8, r2, sl
 80048ce:	eb63 090b 	sbc.w	r9, r3, fp
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048e6:	4690      	mov	r8, r2
 80048e8:	4699      	mov	r9, r3
 80048ea:	eb18 0304 	adds.w	r3, r8, r4
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	eb49 0305 	adc.w	r3, r9, r5
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004902:	4629      	mov	r1, r5
 8004904:	024b      	lsls	r3, r1, #9
 8004906:	4620      	mov	r0, r4
 8004908:	4629      	mov	r1, r5
 800490a:	4604      	mov	r4, r0
 800490c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004910:	4601      	mov	r1, r0
 8004912:	024a      	lsls	r2, r1, #9
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	2200      	movs	r2, #0
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	617a      	str	r2, [r7, #20]
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2200      	movs	r2, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	60fa      	str	r2, [r7, #12]
 8004928:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800492c:	4622      	mov	r2, r4
 800492e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004932:	4645      	mov	r5, r8
 8004934:	fb05 f202 	mul.w	r2, r5, r2
 8004938:	46cc      	mov	ip, r9
 800493a:	4625      	mov	r5, r4
 800493c:	461c      	mov	r4, r3
 800493e:	4623      	mov	r3, r4
 8004940:	fb03 f30c 	mul.w	r3, r3, ip
 8004944:	4413      	add	r3, r2
 8004946:	4622      	mov	r2, r4
 8004948:	4644      	mov	r4, r8
 800494a:	fba2 2404 	umull	r2, r4, r2, r4
 800494e:	61fc      	str	r4, [r7, #28]
 8004950:	61ba      	str	r2, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
 8004958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800495c:	f7fc fb32 	bl	8000fc4 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4613      	mov	r3, r2
 8004966:	647b      	str	r3, [r7, #68]	; 0x44
 8004968:	e007      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800496e:	fb03 f202 	mul.w	r2, r3, r2
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800497c:	7b5b      	ldrb	r3, [r3, #13]
 800497e:	461a      	mov	r2, r3
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	e004      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004990:	4a0b      	ldr	r2, [pc, #44]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8004998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800499c:	e002      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80049a0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80049a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3748      	adds	r7, #72	; 0x48
 80049aa:	46bd      	mov	sp, r7
 80049ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	007a1200 	.word	0x007a1200
 80049b8:	0800750c 	.word	0x0800750c
 80049bc:	0800751c 	.word	0x0800751c
 80049c0:	003d0900 	.word	0x003d0900

080049c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c8:	4b02      	ldr	r3, [pc, #8]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	20000000 	.word	0x20000000

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049dc:	f7ff fff2 	bl	80049c4 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4903      	ldr	r1, [pc, #12]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000
 80049fc:	08007504 	.word	0x08007504

08004a00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <HAL_RCC_GetClockConfig+0x58>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0203 	and.w	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <HAL_RCC_GetClockConfig+0x58>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <HAL_RCC_GetClockConfig+0x58>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_RCC_GetClockConfig+0x58>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	08db      	lsrs	r3, r3, #3
 8004a3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_GetClockConfig+0x5c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0207 	and.w	r2, r3, #7
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40022000 	.word	0x40022000

08004a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <RCC_Delay+0x34>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <RCC_Delay+0x38>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	0a5b      	lsrs	r3, r3, #9
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a7c:	bf00      	nop
  }
  while (Delay --);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	60fa      	str	r2, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f9      	bne.n	8004a7c <RCC_Delay+0x1c>
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	20000000 	.word	0x20000000
 8004a98:	10624dd3 	.word	0x10624dd3

08004a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d07d      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004abc:	2300      	movs	r3, #0
 8004abe:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac0:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4a87      	ldr	r2, [pc, #540]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	61d3      	str	r3, [r2, #28]
 8004ad8:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d118      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af4:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a7e      	ldr	r2, [pc, #504]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b00:	f7fd fe48 	bl	8002794 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fd fe44 	bl	8002794 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0e5      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1a:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b26:	4b72      	ldr	r3, [pc, #456]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02e      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d027      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b44:	4b6a      	ldr	r3, [pc, #424]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b54:	4b68      	ldr	r3, [pc, #416]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b5a:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fe13 	bl	8002794 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fd fe0f 	bl	8002794 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e0ae      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b88:	4b59      	ldr	r3, [pc, #356]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ee      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b94:	4b56      	ldr	r3, [pc, #344]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4953      	ldr	r1, [pc, #332]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ba6:	7efb      	ldrb	r3, [r7, #27]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bac:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4a4f      	ldr	r2, [pc, #316]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc4:	4b4a      	ldr	r3, [pc, #296]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4947      	ldr	r1, [pc, #284]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004be2:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4940      	ldr	r1, [pc, #256]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004c00:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	4938      	ldr	r1, [pc, #224]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8004c12:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d148      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004c34:	4b2e      	ldr	r3, [pc, #184]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d138      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e042      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004c60:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	4920      	ldr	r1, [pc, #128]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	491c      	ldr	r1, [pc, #112]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8a:	f7fd fd83 	bl	8002794 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c92:	f7fd fd7f 	bl	8002794 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b64      	cmp	r3, #100	; 0x64
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e020      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004cb0:	e009      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00f      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	4904      	ldr	r1, [pc, #16]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	42420440 	.word	0x42420440
 8004cfc:	42420070 	.word	0x42420070

08004d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e041      	b.n	8004d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f839 	bl	8004d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 f9bc 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e03f      	b.n	8004e48 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_TIM_Base_Start_IT+0xa4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x62>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x62>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <HAL_TIM_Base_Start_IT+0xa8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x62>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <HAL_TIM_Base_Start_IT+0xac>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x62>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a14      	ldr	r2, [pc, #80]	; (8004e60 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d111      	bne.n	8004e36 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d010      	beq.n	8004e46 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e34:	e007      	b.n	8004e46 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00

08004e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d122      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d11b      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0202 	mvn.w	r2, #2
 8004e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f8ed 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8e0 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f8ef 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d122      	bne.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d11b      	bne.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0204 	mvn.w	r2, #4
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8c3 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8b6 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f8c5 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d122      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0208 	mvn.w	r2, #8
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f899 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f88c 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f89b 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0210 	mvn.w	r2, #16
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2208      	movs	r2, #8
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f86f 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f862 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f871 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0201 	mvn.w	r2, #1
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fd f934 	bl	8002250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d10e      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d107      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8c9 	bl	80051a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d10e      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d107      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f835 	bl	80050aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b20      	cmp	r3, #32
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0220 	mvn.w	r2, #32
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f894 	bl	8005194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2d      	ldr	r2, [pc, #180]	; (8005184 <TIM_Base_SetConfig+0xc8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00f      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00b      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <TIM_Base_SetConfig+0xcc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a29      	ldr	r2, [pc, #164]	; (800518c <TIM_Base_SetConfig+0xd0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a28      	ldr	r2, [pc, #160]	; (8005190 <TIM_Base_SetConfig+0xd4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <TIM_Base_SetConfig+0xc8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_Base_SetConfig+0x72>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x72>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <TIM_Base_SetConfig+0xcc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x72>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <TIM_Base_SetConfig+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x72>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <TIM_Base_SetConfig+0xd4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a07      	ldr	r2, [pc, #28]	; (8005184 <TIM_Base_SetConfig+0xc8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00

08005194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ca:	2b84      	cmp	r3, #132	; 0x84
 80051cc:	d005      	beq.n	80051da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	3303      	adds	r3, #3
 80051d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr

080051e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051ea:	f000 ffed 	bl	80061c8 <vTaskStartScheduler>
  
  return osOK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f6:	b089      	sub	sp, #36	; 0x24
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <osThreadCreate+0x54>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01c      	beq.n	8005248 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685c      	ldr	r4, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681d      	ldr	r5, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691e      	ldr	r6, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ffc9 	bl	80051b8 <makeFreeRtosPriority>
 8005226:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005230:	9202      	str	r2, [sp, #8]
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	9100      	str	r1, [sp, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	4632      	mov	r2, r6
 800523a:	4629      	mov	r1, r5
 800523c:	4620      	mov	r0, r4
 800523e:	f000 fe05 	bl	8005e4c <xTaskCreateStatic>
 8005242:	4603      	mov	r3, r0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e01c      	b.n	8005282 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685c      	ldr	r4, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005254:	b29e      	uxth	r6, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ffab 	bl	80051b8 <makeFreeRtosPriority>
 8005262:	4602      	mov	r2, r0
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	9200      	str	r2, [sp, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4632      	mov	r2, r6
 8005270:	4629      	mov	r1, r5
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fe46 	bl	8005f04 <xTaskCreate>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d001      	beq.n	8005282 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	e000      	b.n	8005284 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005282:	68fb      	ldr	r3, [r7, #12]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800528c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <osDelay+0x16>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	e000      	b.n	80052a4 <osDelay+0x18>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 ff5b 	bl	8006160 <vTaskDelay>
  
  return osOK;
 80052aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00f      	beq.n	80052e6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10a      	bne.n	80052e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2203      	movs	r2, #3
 80052d2:	9200      	str	r2, [sp, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2100      	movs	r1, #0
 80052d8:	2001      	movs	r0, #1
 80052da:	f000 f95d 	bl	8005598 <xQueueGenericCreateStatic>
 80052de:	4603      	mov	r3, r0
 80052e0:	e016      	b.n	8005310 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e014      	b.n	8005310 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d110      	bne.n	800530e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80052ec:	2203      	movs	r2, #3
 80052ee:	2100      	movs	r1, #0
 80052f0:	2001      	movs	r0, #1
 80052f2:	f000 f9c8 	bl	8005686 <xQueueGenericCreate>
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <osSemaphoreCreate+0x56>
 80052fe:	2300      	movs	r3, #0
 8005300:	2200      	movs	r2, #0
 8005302:	2100      	movs	r1, #0
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fa1b 	bl	8005740 <xQueueGenericSend>
      return sema;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	e000      	b.n	8005310 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800530e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b085      	sub	sp, #20
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d011      	beq.n	800534e <osMessageCreate+0x36>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2400      	movs	r4, #0
 8005344:	9400      	str	r4, [sp, #0]
 8005346:	f000 f927 	bl	8005598 <xQueueGenericCreateStatic>
 800534a:	4603      	mov	r3, r0
 800534c:	e008      	b.n	8005360 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	4619      	mov	r1, r3
 800535a:	f000 f994 	bl	8005686 <xQueueGenericCreate>
 800535e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bd90      	pop	{r4, r7, pc}

08005368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f103 0208 	add.w	r2, r3, #8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f103 0208 	add.w	r2, r3, #8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f103 0208 	add.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d103      	bne.n	8005424 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e00c      	b.n	800543e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3308      	adds	r3, #8
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e002      	b.n	8005432 <vListInsert+0x2e>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	d2f6      	bcs.n	800542c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
}
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6852      	ldr	r2, [r2, #4]
 8005494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d103      	bne.n	80054a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	1e5a      	subs	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr
	...

080054c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054f2:	f001 fc6b 	bl	8006dcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	68f9      	ldr	r1, [r7, #12]
 8005500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	3b01      	subs	r3, #1
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005528:	fb01 f303 	mul.w	r3, r1, r3
 800552c:	441a      	add	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	22ff      	movs	r2, #255	; 0xff
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	22ff      	movs	r2, #255	; 0xff
 800553e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d114      	bne.n	8005572 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01a      	beq.n	8005586 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3310      	adds	r3, #16
 8005554:	4618      	mov	r0, r3
 8005556:	f001 f87d 	bl	8006654 <xTaskRemoveFromEventList>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d012      	beq.n	8005586 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <xQueueGenericReset+0xcc>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	e009      	b.n	8005586 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3310      	adds	r3, #16
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fef6 	bl	8005368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3324      	adds	r3, #36	; 0x24
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fef1 	bl	8005368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005586:	f001 fc51 	bl	8006e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800558a:	2301      	movs	r3, #1
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	; 0x38
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <xQueueGenericCreateStatic+0x52>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <xQueueGenericCreateStatic+0x56>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueGenericCreateStatic+0x58>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	623b      	str	r3, [r7, #32]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <xQueueGenericCreateStatic+0x7e>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueGenericCreateStatic+0x82>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueGenericCreateStatic+0x84>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61fb      	str	r3, [r7, #28]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005636:	2348      	movs	r3, #72	; 0x48
 8005638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b48      	cmp	r3, #72	; 0x48
 800563e:	d00a      	beq.n	8005656 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	61bb      	str	r3, [r7, #24]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005668:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f843 	bl	8005702 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800567e:	4618      	mov	r0, r3
 8005680:	3730      	adds	r7, #48	; 0x30
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005686:	b580      	push	{r7, lr}
 8005688:	b08a      	sub	sp, #40	; 0x28
 800568a:	af02      	add	r7, sp, #8
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	613b      	str	r3, [r7, #16]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e004      	b.n	80056c6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3348      	adds	r3, #72	; 0x48
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 fc7e 	bl	8006fcc <pvPortMalloc>
 80056d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00f      	beq.n	80056f8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	3348      	adds	r3, #72	; 0x48
 80056dc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056e6:	79fa      	ldrb	r2, [r7, #7]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f805 	bl	8005702 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056f8:	69bb      	ldr	r3, [r7, #24]
	}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e002      	b.n	8005724 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005730:	2101      	movs	r1, #1
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f7ff fec8 	bl	80054c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08e      	sub	sp, #56	; 0x38
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800574e:	2300      	movs	r3, #0
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xQueueGenericSend+0x32>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d103      	bne.n	8005780 <xQueueGenericSend+0x40>
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <xQueueGenericSend+0x44>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueGenericSend+0x46>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xQueueGenericSend+0x60>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d103      	bne.n	80057ae <xQueueGenericSend+0x6e>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <xQueueGenericSend+0x72>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <xQueueGenericSend+0x74>
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <xQueueGenericSend+0x8e>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	623b      	str	r3, [r7, #32]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ce:	f001 f901 	bl	80069d4 <xTaskGetSchedulerState>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xQueueGenericSend+0x9e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <xQueueGenericSend+0xa2>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <xQueueGenericSend+0xa4>
 80057e2:	2300      	movs	r3, #0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <xQueueGenericSend+0xbe>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	61fb      	str	r3, [r7, #28]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057fe:	f001 fae5 	bl	8006dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <xQueueGenericSend+0xd4>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d129      	bne.n	8005868 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800581a:	f000 fa07 	bl	8005c2c <prvCopyDataToQueue>
 800581e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	3324      	adds	r3, #36	; 0x24
 800582c:	4618      	mov	r0, r3
 800582e:	f000 ff11 	bl	8006654 <xTaskRemoveFromEventList>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005838:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <xQueueGenericSend+0x1f8>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	e00a      	b.n	8005860 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <xQueueGenericSend+0x1f8>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005860:	f001 fae4 	bl	8006e2c <vPortExitCritical>
				return pdPASS;
 8005864:	2301      	movs	r3, #1
 8005866:	e063      	b.n	8005930 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800586e:	f001 fadd 	bl	8006e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005872:	2300      	movs	r3, #0
 8005874:	e05c      	b.n	8005930 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800587c:	f107 0314 	add.w	r3, r7, #20
 8005880:	4618      	mov	r0, r3
 8005882:	f000 ff49 	bl	8006718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005886:	2301      	movs	r3, #1
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800588a:	f001 facf 	bl	8006e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800588e:	f000 fcfb 	bl	8006288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005892:	f001 fa9b 	bl	8006dcc <vPortEnterCritical>
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800589c:	b25b      	sxtb	r3, r3
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d103      	bne.n	80058ac <xQueueGenericSend+0x16c>
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058b2:	b25b      	sxtb	r3, r3
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d103      	bne.n	80058c2 <xQueueGenericSend+0x182>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058c2:	f001 fab3 	bl	8006e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058c6:	1d3a      	adds	r2, r7, #4
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 ff38 	bl	8006744 <xTaskCheckForTimeOut>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d124      	bne.n	8005924 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058dc:	f000 fa9e 	bl	8005e1c <prvIsQueueFull>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	3310      	adds	r3, #16
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fe8c 	bl	800660c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f6:	f000 fa29 	bl	8005d4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058fa:	f000 fcd3 	bl	80062a4 <xTaskResumeAll>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	f47f af7c 	bne.w	80057fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <xQueueGenericSend+0x1f8>)
 8005908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	e772      	b.n	80057fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591a:	f000 fa17 	bl	8005d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800591e:	f000 fcc1 	bl	80062a4 <xTaskResumeAll>
 8005922:	e76c      	b.n	80057fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005926:	f000 fa11 	bl	8005d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800592a:	f000 fcbb 	bl	80062a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800592e:	2300      	movs	r3, #0
		}
	}
}
 8005930:	4618      	mov	r0, r3
 8005932:	3738      	adds	r7, #56	; 0x38
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08e      	sub	sp, #56	; 0x38
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <xQueueGenericSendFromISR+0x3c>
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <xQueueGenericSendFromISR+0x40>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <xQueueGenericSendFromISR+0x42>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	623b      	str	r3, [r7, #32]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d103      	bne.n	80059a6 <xQueueGenericSendFromISR+0x6a>
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <xQueueGenericSendFromISR+0x6e>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueGenericSendFromISR+0x70>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61fb      	str	r3, [r7, #28]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059c6:	f001 fac3 	bl	8006f50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059ca:	f3ef 8211 	mrs	r2, BASEPRI
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	61ba      	str	r2, [r7, #24]
 80059e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <xQueueGenericSendFromISR+0xbc>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d12c      	bne.n	8005a52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a08:	f000 f910 	bl	8005c2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d112      	bne.n	8005a3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	3324      	adds	r3, #36	; 0x24
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fe16 	bl	8006654 <xTaskRemoveFromEventList>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00e      	beq.n	8005a4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a40:	3301      	adds	r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	b25a      	sxtb	r2, r3
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a50:	e001      	b.n	8005a56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3738      	adds	r7, #56	; 0x38
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08c      	sub	sp, #48	; 0x30
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <xQueueReceive+0x30>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	623b      	str	r3, [r7, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <xQueueReceive+0x3e>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <xQueueReceive+0x42>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueReceive+0x44>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueReceive+0x5e>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61fb      	str	r3, [r7, #28]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aca:	f000 ff83 	bl	80069d4 <xTaskGetSchedulerState>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xQueueReceive+0x6e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <xQueueReceive+0x72>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <xQueueReceive+0x74>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueReceive+0x8e>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	61bb      	str	r3, [r7, #24]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005afa:	f001 f967 	bl	8006dcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01f      	beq.n	8005b4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0e:	f000 f8f7 	bl	8005d00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	1e5a      	subs	r2, r3, #1
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00f      	beq.n	8005b42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	3310      	adds	r3, #16
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fd94 	bl	8006654 <xTaskRemoveFromEventList>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b32:	4b3d      	ldr	r3, [pc, #244]	; (8005c28 <xQueueReceive+0x1bc>)
 8005b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b42:	f001 f973 	bl	8006e2c <vPortExitCritical>
				return pdPASS;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e069      	b.n	8005c1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b50:	f001 f96c 	bl	8006e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e062      	b.n	8005c1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5e:	f107 0310 	add.w	r3, r7, #16
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fdd8 	bl	8006718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b6c:	f001 f95e 	bl	8006e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b70:	f000 fb8a 	bl	8006288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b74:	f001 f92a 	bl	8006dcc <vPortEnterCritical>
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b7e:	b25b      	sxtb	r3, r3
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d103      	bne.n	8005b8e <xQueueReceive+0x122>
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b94:	b25b      	sxtb	r3, r3
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9a:	d103      	bne.n	8005ba4 <xQueueReceive+0x138>
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba4:	f001 f942 	bl	8006e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba8:	1d3a      	adds	r2, r7, #4
 8005baa:	f107 0310 	add.w	r3, r7, #16
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fdc7 	bl	8006744 <xTaskCheckForTimeOut>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d123      	bne.n	8005c04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bbe:	f000 f917 	bl	8005df0 <prvIsQueueEmpty>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d017      	beq.n	8005bf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fd1b 	bl	800660c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd8:	f000 f8b8 	bl	8005d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bdc:	f000 fb62 	bl	80062a4 <xTaskResumeAll>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d189      	bne.n	8005afa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xQueueReceive+0x1bc>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	e780      	b.n	8005afa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfa:	f000 f8a7 	bl	8005d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfe:	f000 fb51 	bl	80062a4 <xTaskResumeAll>
 8005c02:	e77a      	b.n	8005afa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c06:	f000 f8a1 	bl	8005d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0a:	f000 fb4b 	bl	80062a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c10:	f000 f8ee 	bl	8005df0 <prvIsQueueEmpty>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f43f af6f 	beq.w	8005afa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d14d      	bne.n	8005cee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 feda 	bl	8006a10 <xTaskPriorityDisinherit>
 8005c5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	e043      	b.n	8005cee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d119      	bne.n	8005ca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6898      	ldr	r0, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	461a      	mov	r2, r3
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	f001 fba4 	bl	80073c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d32b      	bcc.n	8005cee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	609a      	str	r2, [r3, #8]
 8005c9e:	e026      	b.n	8005cee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68d8      	ldr	r0, [r3, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f001 fb8a 	bl	80073c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	425b      	negs	r3, r3
 8005cba:	441a      	add	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d207      	bcs.n	8005cdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	441a      	add	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d105      	bne.n	8005cee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d018      	beq.n	8005d44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d303      	bcc.n	8005d34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	f001 fb40 	bl	80073c4 <memcpy>
	}
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d54:	f001 f83a 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d60:	e011      	b.n	8005d86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d012      	beq.n	8005d90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3324      	adds	r3, #36	; 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fc70 	bl	8006654 <xTaskRemoveFromEventList>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d7a:	f000 fd45 	bl	8006808 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dce9      	bgt.n	8005d62 <prvUnlockQueue+0x16>
 8005d8e:	e000      	b.n	8005d92 <prvUnlockQueue+0x46>
					break;
 8005d90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d9a:	f001 f847 	bl	8006e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d9e:	f001 f815 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005da8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005daa:	e011      	b.n	8005dd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d012      	beq.n	8005dda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3310      	adds	r3, #16
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fc4b 	bl	8006654 <xTaskRemoveFromEventList>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dc4:	f000 fd20 	bl	8006808 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dce9      	bgt.n	8005dac <prvUnlockQueue+0x60>
 8005dd8:	e000      	b.n	8005ddc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	22ff      	movs	r2, #255	; 0xff
 8005de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005de4:	f001 f822 	bl	8006e2c <vPortExitCritical>
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005df8:	f000 ffe8 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e001      	b.n	8005e0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e0e:	f001 f80d 	bl	8006e2c <vPortExitCritical>

	return xReturn;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e24:	f000 ffd2 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d102      	bne.n	8005e3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e001      	b.n	8005e3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e3e:	f000 fff5 	bl	8006e2c <vPortExitCritical>

	return xReturn;
 8005e42:	68fb      	ldr	r3, [r7, #12]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	; 0x38
 8005e50:	af04      	add	r7, sp, #16
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	623b      	str	r3, [r7, #32]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	61fb      	str	r3, [r7, #28]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e92:	2354      	movs	r3, #84	; 0x54
 8005e94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b54      	cmp	r3, #84	; 0x54
 8005e9a:	d00a      	beq.n	8005eb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61bb      	str	r3, [r7, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01e      	beq.n	8005ef6 <xTaskCreateStatic+0xaa>
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01b      	beq.n	8005ef6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	9302      	str	r3, [sp, #8]
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f850 	bl	8005f8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef0:	f000 f8cc 	bl	800608c <prvAddNewTaskToReadyList>
 8005ef4:	e001      	b.n	8005efa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005efa:	697b      	ldr	r3, [r7, #20]
	}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3728      	adds	r7, #40	; 0x28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08c      	sub	sp, #48	; 0x30
 8005f08:	af04      	add	r7, sp, #16
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 f857 	bl	8006fcc <pvPortMalloc>
 8005f1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f26:	2054      	movs	r0, #84	; 0x54
 8005f28:	f001 f850 	bl	8006fcc <pvPortMalloc>
 8005f2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
 8005f3a:	e005      	b.n	8005f48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f001 f909 	bl	8007154 <vPortFree>
 8005f42:	e001      	b.n	8005f48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d017      	beq.n	8005f7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9303      	str	r3, [sp, #12]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	9302      	str	r3, [sp, #8]
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f80e 	bl	8005f8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f72:	69f8      	ldr	r0, [r7, #28]
 8005f74:	f000 f88a 	bl	800608c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	e002      	b.n	8005f84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f84:	69bb      	ldr	r3, [r7, #24]
	}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f023 0307 	bic.w	r3, r3, #7
 8005fb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	617b      	str	r3, [r7, #20]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	e012      	b.n	8006002 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	7819      	ldrb	r1, [r3, #0]
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	3334      	adds	r3, #52	; 0x34
 8005fec:	460a      	mov	r2, r1
 8005fee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d006      	beq.n	800600a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	3301      	adds	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b0f      	cmp	r3, #15
 8006006:	d9e9      	bls.n	8005fdc <prvInitialiseNewTask+0x4e>
 8006008:	e000      	b.n	800600c <prvInitialiseNewTask+0x7e>
		{
			break;
 800600a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	2b06      	cmp	r3, #6
 8006018:	d901      	bls.n	800601e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800601a:	2306      	movs	r3, #6
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2200      	movs	r2, #0
 800602e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	3304      	adds	r3, #4
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff f9b6 	bl	80053a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	3318      	adds	r3, #24
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff f9b1 	bl	80053a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006048:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	f1c3 0207 	rsb	r2, r3, #7
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006058:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	2200      	movs	r2, #0
 800605e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	69b8      	ldr	r0, [r7, #24]
 800606e:	f000 fdbb 	bl	8006be8 <pxPortInitialiseStack>
 8006072:	4602      	mov	r2, r0
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006082:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006084:	bf00      	nop
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006094:	f000 fe9a 	bl	8006dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006098:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <prvAddNewTaskToReadyList+0xb8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	4a29      	ldr	r2, [pc, #164]	; (8006144 <prvAddNewTaskToReadyList+0xb8>)
 80060a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060a2:	4b29      	ldr	r3, [pc, #164]	; (8006148 <prvAddNewTaskToReadyList+0xbc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060aa:	4a27      	ldr	r2, [pc, #156]	; (8006148 <prvAddNewTaskToReadyList+0xbc>)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b0:	4b24      	ldr	r3, [pc, #144]	; (8006144 <prvAddNewTaskToReadyList+0xb8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d110      	bne.n	80060da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060b8:	f000 fbca 	bl	8006850 <prvInitialiseTaskLists>
 80060bc:	e00d      	b.n	80060da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060be:	4b23      	ldr	r3, [pc, #140]	; (800614c <prvAddNewTaskToReadyList+0xc0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060c6:	4b20      	ldr	r3, [pc, #128]	; (8006148 <prvAddNewTaskToReadyList+0xbc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d802      	bhi.n	80060da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060d4:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <prvAddNewTaskToReadyList+0xbc>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <prvAddNewTaskToReadyList+0xc4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3301      	adds	r3, #1
 80060e0:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <prvAddNewTaskToReadyList+0xc4>)
 80060e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <prvAddNewTaskToReadyList+0xc8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	4a18      	ldr	r2, [pc, #96]	; (8006154 <prvAddNewTaskToReadyList+0xc8>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <prvAddNewTaskToReadyList+0xcc>)
 8006104:	441a      	add	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7ff f956 	bl	80053be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006112:	f000 fe8b 	bl	8006e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006116:	4b0d      	ldr	r3, [pc, #52]	; (800614c <prvAddNewTaskToReadyList+0xc0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00e      	beq.n	800613c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <prvAddNewTaskToReadyList+0xbc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	429a      	cmp	r2, r3
 800612a:	d207      	bcs.n	800613c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <prvAddNewTaskToReadyList+0xd0>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20001b9c 	.word	0x20001b9c
 8006148:	20001a9c 	.word	0x20001a9c
 800614c:	20001ba8 	.word	0x20001ba8
 8006150:	20001bb8 	.word	0x20001bb8
 8006154:	20001ba4 	.word	0x20001ba4
 8006158:	20001aa0 	.word	0x20001aa0
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d017      	beq.n	80061a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006172:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <vTaskDelay+0x60>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <vTaskDelay+0x30>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	60bb      	str	r3, [r7, #8]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006190:	f000 f87a 	bl	8006288 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006194:	2100      	movs	r1, #0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fcc0 	bl	8006b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800619c:	f000 f882 	bl	80062a4 <xTaskResumeAll>
 80061a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d107      	bne.n	80061b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <vTaskDelay+0x64>)
 80061aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20001bc4 	.word	0x20001bc4
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061d6:	463a      	mov	r2, r7
 80061d8:	1d39      	adds	r1, r7, #4
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fb fc82 	bl	8001ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	9202      	str	r2, [sp, #8]
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	2300      	movs	r3, #0
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2300      	movs	r3, #0
 80061f4:	460a      	mov	r2, r1
 80061f6:	491e      	ldr	r1, [pc, #120]	; (8006270 <vTaskStartScheduler+0xa8>)
 80061f8:	481e      	ldr	r0, [pc, #120]	; (8006274 <vTaskStartScheduler+0xac>)
 80061fa:	f7ff fe27 	bl	8005e4c <xTaskCreateStatic>
 80061fe:	4603      	mov	r3, r0
 8006200:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <vTaskStartScheduler+0xb0>)
 8006202:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <vTaskStartScheduler+0xb0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e001      	b.n	8006216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d116      	bne.n	800624a <vTaskStartScheduler+0x82>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	613b      	str	r3, [r7, #16]
}
 800622e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <vTaskStartScheduler+0xb4>)
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <vTaskStartScheduler+0xb8>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <vTaskStartScheduler+0xbc>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006244:	f000 fd50 	bl	8006ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006248:	e00e      	b.n	8006268 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d10a      	bne.n	8006268 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	60fb      	str	r3, [r7, #12]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vTaskStartScheduler+0x9e>
}
 8006268:	bf00      	nop
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	080074ec 	.word	0x080074ec
 8006274:	08006821 	.word	0x08006821
 8006278:	20001bc0 	.word	0x20001bc0
 800627c:	20001bbc 	.word	0x20001bbc
 8006280:	20001ba8 	.word	0x20001ba8
 8006284:	20001ba0 	.word	0x20001ba0

08006288 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <vTaskSuspendAll+0x18>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	4a03      	ldr	r2, [pc, #12]	; (80062a0 <vTaskSuspendAll+0x18>)
 8006294:	6013      	str	r3, [r2, #0]
}
 8006296:	bf00      	nop
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20001bc4 	.word	0x20001bc4

080062a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062b2:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <xTaskResumeAll+0x114>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	603b      	str	r3, [r7, #0]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062d0:	f000 fd7c 	bl	8006dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062d4:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <xTaskResumeAll+0x114>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3b01      	subs	r3, #1
 80062da:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <xTaskResumeAll+0x114>)
 80062dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062de:	4b36      	ldr	r3, [pc, #216]	; (80063b8 <xTaskResumeAll+0x114>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d161      	bne.n	80063aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062e6:	4b35      	ldr	r3, [pc, #212]	; (80063bc <xTaskResumeAll+0x118>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d05d      	beq.n	80063aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ee:	e02e      	b.n	800634e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062f0:	4b33      	ldr	r3, [pc, #204]	; (80063c0 <xTaskResumeAll+0x11c>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3318      	adds	r3, #24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff f8b9 	bl	8005474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3304      	adds	r3, #4
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff f8b4 	bl	8005474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <xTaskResumeAll+0x120>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <xTaskResumeAll+0x120>)
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a27      	ldr	r2, [pc, #156]	; (80063c8 <xTaskResumeAll+0x124>)
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7ff f842 	bl	80053be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	4b23      	ldr	r3, [pc, #140]	; (80063cc <xTaskResumeAll+0x128>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <xTaskResumeAll+0x12c>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800634e:	4b1c      	ldr	r3, [pc, #112]	; (80063c0 <xTaskResumeAll+0x11c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1cc      	bne.n	80062f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800635c:	f000 fb16 	bl	800698c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006360:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <xTaskResumeAll+0x130>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d010      	beq.n	800638e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800636c:	f000 f836 	bl	80063dc <xTaskIncrementTick>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006376:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <xTaskResumeAll+0x12c>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f1      	bne.n	800636c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006388:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <xTaskResumeAll+0x130>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <xTaskResumeAll+0x12c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006396:	2301      	movs	r3, #1
 8006398:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <xTaskResumeAll+0x134>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063aa:	f000 fd3f 	bl	8006e2c <vPortExitCritical>

	return xAlreadyYielded;
 80063ae:	68bb      	ldr	r3, [r7, #8]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20001bc4 	.word	0x20001bc4
 80063bc:	20001b9c 	.word	0x20001b9c
 80063c0:	20001b5c 	.word	0x20001b5c
 80063c4:	20001ba4 	.word	0x20001ba4
 80063c8:	20001aa0 	.word	0x20001aa0
 80063cc:	20001a9c 	.word	0x20001a9c
 80063d0:	20001bb0 	.word	0x20001bb0
 80063d4:	20001bac 	.word	0x20001bac
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e6:	4b51      	ldr	r3, [pc, #324]	; (800652c <xTaskIncrementTick+0x150>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f040 808d 	bne.w	800650a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063f0:	4b4f      	ldr	r3, [pc, #316]	; (8006530 <xTaskIncrementTick+0x154>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3301      	adds	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063f8:	4a4d      	ldr	r2, [pc, #308]	; (8006530 <xTaskIncrementTick+0x154>)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d120      	bne.n	8006446 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006404:	4b4b      	ldr	r3, [pc, #300]	; (8006534 <xTaskIncrementTick+0x158>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <xTaskIncrementTick+0x48>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	603b      	str	r3, [r7, #0]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <xTaskIncrementTick+0x46>
 8006424:	4b43      	ldr	r3, [pc, #268]	; (8006534 <xTaskIncrementTick+0x158>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	4b43      	ldr	r3, [pc, #268]	; (8006538 <xTaskIncrementTick+0x15c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a41      	ldr	r2, [pc, #260]	; (8006534 <xTaskIncrementTick+0x158>)
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	4a41      	ldr	r2, [pc, #260]	; (8006538 <xTaskIncrementTick+0x15c>)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	4b40      	ldr	r3, [pc, #256]	; (800653c <xTaskIncrementTick+0x160>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	4a3f      	ldr	r2, [pc, #252]	; (800653c <xTaskIncrementTick+0x160>)
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	f000 faa3 	bl	800698c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006446:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <xTaskIncrementTick+0x164>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	429a      	cmp	r2, r3
 800644e:	d34d      	bcc.n	80064ec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006450:	4b38      	ldr	r3, [pc, #224]	; (8006534 <xTaskIncrementTick+0x158>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <xTaskIncrementTick+0x82>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <xTaskIncrementTick+0x84>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006464:	4b36      	ldr	r3, [pc, #216]	; (8006540 <xTaskIncrementTick+0x164>)
 8006466:	f04f 32ff 	mov.w	r2, #4294967295
 800646a:	601a      	str	r2, [r3, #0]
					break;
 800646c:	e03e      	b.n	80064ec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800646e:	4b31      	ldr	r3, [pc, #196]	; (8006534 <xTaskIncrementTick+0x158>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d203      	bcs.n	800648e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006486:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <xTaskIncrementTick+0x164>)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6013      	str	r3, [r2, #0]
						break;
 800648c:	e02e      	b.n	80064ec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3304      	adds	r3, #4
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe ffee 	bl	8005474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3318      	adds	r3, #24
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe ffe5 	bl	8005474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	2201      	movs	r2, #1
 80064b0:	409a      	lsls	r2, r3
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <xTaskIncrementTick+0x168>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <xTaskIncrementTick+0x168>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <xTaskIncrementTick+0x16c>)
 80064ca:	441a      	add	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f7fe ff73 	bl	80053be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064dc:	4b1b      	ldr	r3, [pc, #108]	; (800654c <xTaskIncrementTick+0x170>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d3b4      	bcc.n	8006450 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064e6:	2301      	movs	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ea:	e7b1      	b.n	8006450 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064ec:	4b17      	ldr	r3, [pc, #92]	; (800654c <xTaskIncrementTick+0x170>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4915      	ldr	r1, [pc, #84]	; (8006548 <xTaskIncrementTick+0x16c>)
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d907      	bls.n	8006514 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e004      	b.n	8006514 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800650a:	4b11      	ldr	r3, [pc, #68]	; (8006550 <xTaskIncrementTick+0x174>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3301      	adds	r3, #1
 8006510:	4a0f      	ldr	r2, [pc, #60]	; (8006550 <xTaskIncrementTick+0x174>)
 8006512:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006514:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <xTaskIncrementTick+0x178>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006520:	697b      	ldr	r3, [r7, #20]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20001bc4 	.word	0x20001bc4
 8006530:	20001ba0 	.word	0x20001ba0
 8006534:	20001b54 	.word	0x20001b54
 8006538:	20001b58 	.word	0x20001b58
 800653c:	20001bb4 	.word	0x20001bb4
 8006540:	20001bbc 	.word	0x20001bbc
 8006544:	20001ba4 	.word	0x20001ba4
 8006548:	20001aa0 	.word	0x20001aa0
 800654c:	20001a9c 	.word	0x20001a9c
 8006550:	20001bac 	.word	0x20001bac
 8006554:	20001bb0 	.word	0x20001bb0

08006558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800655e:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <vTaskSwitchContext+0xa0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006566:	4b25      	ldr	r3, [pc, #148]	; (80065fc <vTaskSwitchContext+0xa4>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800656c:	e03f      	b.n	80065ee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800656e:	4b23      	ldr	r3, [pc, #140]	; (80065fc <vTaskSwitchContext+0xa4>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006574:	4b22      	ldr	r3, [pc, #136]	; (8006600 <vTaskSwitchContext+0xa8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	fab3 f383 	clz	r3, r3
 8006580:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006582:	7afb      	ldrb	r3, [r7, #11]
 8006584:	f1c3 031f 	rsb	r3, r3, #31
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	491e      	ldr	r1, [pc, #120]	; (8006604 <vTaskSwitchContext+0xac>)
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	607b      	str	r3, [r7, #4]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <vTaskSwitchContext+0x5a>
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4a11      	ldr	r2, [pc, #68]	; (8006604 <vTaskSwitchContext+0xac>)
 80065c0:	4413      	add	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3308      	adds	r3, #8
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d104      	bne.n	80065e4 <vTaskSwitchContext+0x8c>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	4a07      	ldr	r2, [pc, #28]	; (8006608 <vTaskSwitchContext+0xb0>)
 80065ec:	6013      	str	r3, [r2, #0]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	20001bc4 	.word	0x20001bc4
 80065fc:	20001bb0 	.word	0x20001bb0
 8006600:	20001ba4 	.word	0x20001ba4
 8006604:	20001aa0 	.word	0x20001aa0
 8006608:	20001a9c 	.word	0x20001a9c

0800660c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <vTaskPlaceOnEventList+0x44>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3318      	adds	r3, #24
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fe fee2 	bl	8005404 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006640:	2101      	movs	r1, #1
 8006642:	6838      	ldr	r0, [r7, #0]
 8006644:	f000 fa6a 	bl	8006b1c <prvAddCurrentTaskToDelayedList>
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20001a9c 	.word	0x20001a9c

08006654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	60fb      	str	r3, [r7, #12]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3318      	adds	r3, #24
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe fef5 	bl	8005474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <xTaskRemoveFromEventList+0xac>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11c      	bne.n	80066cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3304      	adds	r3, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe feec 	bl	8005474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	2201      	movs	r2, #1
 80066a2:	409a      	lsls	r2, r3
 80066a4:	4b17      	ldr	r3, [pc, #92]	; (8006704 <xTaskRemoveFromEventList+0xb0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	4a16      	ldr	r2, [pc, #88]	; (8006704 <xTaskRemoveFromEventList+0xb0>)
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4a13      	ldr	r2, [pc, #76]	; (8006708 <xTaskRemoveFromEventList+0xb4>)
 80066bc:	441a      	add	r2, r3
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3304      	adds	r3, #4
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f7fe fe7a 	bl	80053be <vListInsertEnd>
 80066ca:	e005      	b.n	80066d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3318      	adds	r3, #24
 80066d0:	4619      	mov	r1, r3
 80066d2:	480e      	ldr	r0, [pc, #56]	; (800670c <xTaskRemoveFromEventList+0xb8>)
 80066d4:	f7fe fe73 	bl	80053be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <xTaskRemoveFromEventList+0xbc>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d905      	bls.n	80066f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <xTaskRemoveFromEventList+0xc0>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e001      	b.n	80066f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066f6:	697b      	ldr	r3, [r7, #20]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20001bc4 	.word	0x20001bc4
 8006704:	20001ba4 	.word	0x20001ba4
 8006708:	20001aa0 	.word	0x20001aa0
 800670c:	20001b5c 	.word	0x20001b5c
 8006710:	20001a9c 	.word	0x20001a9c
 8006714:	20001bb0 	.word	0x20001bb0

08006718 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <vTaskInternalSetTimeOutState+0x24>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <vTaskInternalSetTimeOutState+0x28>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	605a      	str	r2, [r3, #4]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20001bb4 	.word	0x20001bb4
 8006740:	20001ba0 	.word	0x20001ba0

08006744 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	613b      	str	r3, [r7, #16]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60fb      	str	r3, [r7, #12]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006786:	f000 fb21 	bl	8006dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <xTaskCheckForTimeOut+0xbc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d102      	bne.n	80067aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	e023      	b.n	80067f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b15      	ldr	r3, [pc, #84]	; (8006804 <xTaskCheckForTimeOut+0xc0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d007      	beq.n	80067c6 <xTaskCheckForTimeOut+0x82>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d302      	bcc.n	80067c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e015      	b.n	80067f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d20b      	bcs.n	80067e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff9b 	bl	8006718 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	e004      	b.n	80067f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067ee:	2301      	movs	r3, #1
 80067f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067f2:	f000 fb1b 	bl	8006e2c <vPortExitCritical>

	return xReturn;
 80067f6:	69fb      	ldr	r3, [r7, #28]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20001ba0 	.word	0x20001ba0
 8006804:	20001bb4 	.word	0x20001bb4

08006808 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800680c:	4b03      	ldr	r3, [pc, #12]	; (800681c <vTaskMissedYield+0x14>)
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
}
 8006812:	bf00      	nop
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20001bb0 	.word	0x20001bb0

08006820 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006828:	f000 f852 	bl	80068d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <prvIdleTask+0x28>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d9f9      	bls.n	8006828 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <prvIdleTask+0x2c>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006844:	e7f0      	b.n	8006828 <prvIdleTask+0x8>
 8006846:	bf00      	nop
 8006848:	20001aa0 	.word	0x20001aa0
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006856:	2300      	movs	r3, #0
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	e00c      	b.n	8006876 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4a12      	ldr	r2, [pc, #72]	; (80068b0 <prvInitialiseTaskLists+0x60>)
 8006868:	4413      	add	r3, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fd7c 	bl	8005368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3301      	adds	r3, #1
 8006874:	607b      	str	r3, [r7, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d9ef      	bls.n	800685c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800687c:	480d      	ldr	r0, [pc, #52]	; (80068b4 <prvInitialiseTaskLists+0x64>)
 800687e:	f7fe fd73 	bl	8005368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006882:	480d      	ldr	r0, [pc, #52]	; (80068b8 <prvInitialiseTaskLists+0x68>)
 8006884:	f7fe fd70 	bl	8005368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006888:	480c      	ldr	r0, [pc, #48]	; (80068bc <prvInitialiseTaskLists+0x6c>)
 800688a:	f7fe fd6d 	bl	8005368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800688e:	480c      	ldr	r0, [pc, #48]	; (80068c0 <prvInitialiseTaskLists+0x70>)
 8006890:	f7fe fd6a 	bl	8005368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006894:	480b      	ldr	r0, [pc, #44]	; (80068c4 <prvInitialiseTaskLists+0x74>)
 8006896:	f7fe fd67 	bl	8005368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <prvInitialiseTaskLists+0x78>)
 800689c:	4a05      	ldr	r2, [pc, #20]	; (80068b4 <prvInitialiseTaskLists+0x64>)
 800689e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <prvInitialiseTaskLists+0x7c>)
 80068a2:	4a05      	ldr	r2, [pc, #20]	; (80068b8 <prvInitialiseTaskLists+0x68>)
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20001aa0 	.word	0x20001aa0
 80068b4:	20001b2c 	.word	0x20001b2c
 80068b8:	20001b40 	.word	0x20001b40
 80068bc:	20001b5c 	.word	0x20001b5c
 80068c0:	20001b70 	.word	0x20001b70
 80068c4:	20001b88 	.word	0x20001b88
 80068c8:	20001b54 	.word	0x20001b54
 80068cc:	20001b58 	.word	0x20001b58

080068d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068d6:	e019      	b.n	800690c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068d8:	f000 fa78 	bl	8006dcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <prvCheckTasksWaitingTermination+0x50>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe fdc3 	bl	8005474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <prvCheckTasksWaitingTermination+0x54>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	4a0b      	ldr	r2, [pc, #44]	; (8006924 <prvCheckTasksWaitingTermination+0x54>)
 80068f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <prvCheckTasksWaitingTermination+0x58>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <prvCheckTasksWaitingTermination+0x58>)
 8006900:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006902:	f000 fa93 	bl	8006e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f810 	bl	800692c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <prvCheckTasksWaitingTermination+0x58>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e1      	bne.n	80068d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20001b70 	.word	0x20001b70
 8006924:	20001b9c 	.word	0x20001b9c
 8006928:	20001b84 	.word	0x20001b84

0800692c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800693a:	2b00      	cmp	r3, #0
 800693c:	d108      	bne.n	8006950 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fc06 	bl	8007154 <vPortFree>
				vPortFree( pxTCB );
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc03 	bl	8007154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800694e:	e018      	b.n	8006982 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006956:	2b01      	cmp	r3, #1
 8006958:	d103      	bne.n	8006962 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fbfa 	bl	8007154 <vPortFree>
	}
 8006960:	e00f      	b.n	8006982 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006968:	2b02      	cmp	r3, #2
 800696a:	d00a      	beq.n	8006982 <prvDeleteTCB+0x56>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <prvDeleteTCB+0x54>
	}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006992:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <prvResetNextTaskUnblockTime+0x40>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <prvResetNextTaskUnblockTime+0x14>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <prvResetNextTaskUnblockTime+0x16>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069a6:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <prvResetNextTaskUnblockTime+0x44>)
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069ae:	e008      	b.n	80069c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <prvResetNextTaskUnblockTime+0x40>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <prvResetNextTaskUnblockTime+0x44>)
 80069c0:	6013      	str	r3, [r2, #0]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr
 80069cc:	20001b54 	.word	0x20001b54
 80069d0:	20001bbc 	.word	0x20001bbc

080069d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069da:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <xTaskGetSchedulerState+0x34>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d102      	bne.n	80069e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069e2:	2301      	movs	r3, #1
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	e008      	b.n	80069fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e8:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <xTaskGetSchedulerState+0x38>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069f0:	2302      	movs	r3, #2
 80069f2:	607b      	str	r3, [r7, #4]
 80069f4:	e001      	b.n	80069fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069f6:	2300      	movs	r3, #0
 80069f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069fa:	687b      	ldr	r3, [r7, #4]
	}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20001ba8 	.word	0x20001ba8
 8006a0c:	20001bc4 	.word	0x20001bc4

08006a10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d06e      	beq.n	8006b04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a26:	4b3a      	ldr	r3, [pc, #232]	; (8006b10 <xTaskPriorityDisinherit+0x100>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d00a      	beq.n	8006a46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	60bb      	str	r3, [r7, #8]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a68:	1e5a      	subs	r2, r3, #1
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d044      	beq.n	8006b04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d140      	bne.n	8006b04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fcf4 	bl	8005474 <uxListRemove>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d115      	bne.n	8006abe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	491f      	ldr	r1, [pc, #124]	; (8006b14 <xTaskPriorityDisinherit+0x104>)
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xTaskPriorityDisinherit+0xae>
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	2201      	movs	r2, #1
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43da      	mvns	r2, r3
 8006ab4:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <xTaskPriorityDisinherit+0x108>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <xTaskPriorityDisinherit+0x108>)
 8006abc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	f1c3 0207 	rsb	r2, r3, #7
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <xTaskPriorityDisinherit+0x108>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	4a0d      	ldr	r2, [pc, #52]	; (8006b18 <xTaskPriorityDisinherit+0x108>)
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4a08      	ldr	r2, [pc, #32]	; (8006b14 <xTaskPriorityDisinherit+0x104>)
 8006af2:	441a      	add	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f7fe fc5f 	bl	80053be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b04:	697b      	ldr	r3, [r7, #20]
	}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20001a9c 	.word	0x20001a9c
 8006b14:	20001aa0 	.word	0x20001aa0
 8006b18:	20001ba4 	.word	0x20001ba4

08006b1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b26:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b2c:	4b28      	ldr	r3, [pc, #160]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fc9e 	bl	8005474 <uxListRemove>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b3e:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	2201      	movs	r2, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	4b21      	ldr	r3, [pc, #132]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4013      	ands	r3, r2
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d10a      	bne.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b64:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	481a      	ldr	r0, [pc, #104]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b6e:	f7fe fc26 	bl	80053be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b72:	e026      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b7c:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d209      	bcs.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b8c:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7fe fc33 	bl	8005404 <vListInsert>
}
 8006b9e:	e010      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe fc29 	bl	8005404 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d202      	bcs.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bbc:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6013      	str	r3, [r2, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20001ba0 	.word	0x20001ba0
 8006bd0:	20001a9c 	.word	0x20001a9c
 8006bd4:	20001ba4 	.word	0x20001ba4
 8006bd8:	20001b88 	.word	0x20001b88
 8006bdc:	20001b58 	.word	0x20001b58
 8006be0:	20001b54 	.word	0x20001b54
 8006be4:	20001bbc 	.word	0x20001bbc

08006be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b04      	subs	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3b04      	subs	r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0201 	bic.w	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3b04      	subs	r3, #4
 8006c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <pxPortInitialiseStack+0x54>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b14      	subs	r3, #20
 8006c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3b20      	subs	r3, #32
 8006c2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr
 8006c3c:	08006c41 	.word	0x08006c41

08006c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <prvTaskExitError+0x54>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d00a      	beq.n	8006c6a <prvTaskExitError+0x2a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <prvTaskExitError+0x28>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	60bb      	str	r3, [r7, #8]
}
 8006c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c7e:	bf00      	nop
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0fc      	beq.n	8006c80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2000000c 	.word	0x2000000c
	...

08006ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <pxCurrentTCBConst2>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	6808      	ldr	r0, [r1, #0]
 8006ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006caa:	f380 8809 	msr	PSP, r0
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8811 	msr	BASEPRI, r0
 8006cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006cbe:	4770      	bx	lr

08006cc0 <pxCurrentTCBConst2>:
 8006cc0:	20001a9c 	.word	0x20001a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop

08006cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006cc8:	4806      	ldr	r0, [pc, #24]	; (8006ce4 <prvPortStartFirstTask+0x1c>)
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f380 8808 	msr	MSP, r0
 8006cd2:	b662      	cpsie	i
 8006cd4:	b661      	cpsie	f
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	df00      	svc	0
 8006ce0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ce2:	bf00      	nop
 8006ce4:	e000ed08 	.word	0xe000ed08

08006ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cee:	4b32      	ldr	r3, [pc, #200]	; (8006db8 <xPortStartScheduler+0xd0>)
 8006cf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4b2a      	ldr	r3, [pc, #168]	; (8006dbc <xPortStartScheduler+0xd4>)
 8006d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d18:	2207      	movs	r2, #7
 8006d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d1c:	e009      	b.n	8006d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d1e:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	d0ef      	beq.n	8006d1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1c3 0307 	rsb	r3, r3, #7
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d00a      	beq.n	8006d60 <xPortStartScheduler+0x78>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60bb      	str	r3, [r7, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d72:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d96:	f000 f8b9 	bl	8006f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <xPortStartScheduler+0xe0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006da0:	f7ff ff92 	bl	8006cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006da4:	f7ff fbd8 	bl	8006558 <vTaskSwitchContext>
	prvTaskExitError();
 8006da8:	f7ff ff4a 	bl	8006c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	e000e400 	.word	0xe000e400
 8006dbc:	20001bc8 	.word	0x20001bc8
 8006dc0:	20001bcc 	.word	0x20001bcc
 8006dc4:	e000ed20 	.word	0xe000ed20
 8006dc8:	2000000c 	.word	0x2000000c

08006dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
}
 8006de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <vPortEnterCritical+0x58>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	4a0d      	ldr	r2, [pc, #52]	; (8006e24 <vPortEnterCritical+0x58>)
 8006dee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <vPortEnterCritical+0x58>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d10f      	bne.n	8006e18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <vPortEnterCritical+0x5c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	603b      	str	r3, [r7, #0]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <vPortEnterCritical+0x4a>
	}
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <vPortExitCritical+0x24>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	607b      	str	r3, [r7, #4]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d105      	bne.n	8006e6e <vPortExitCritical+0x42>
 8006e62:	2300      	movs	r3, #0
 8006e64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f383 8811 	msr	BASEPRI, r3
}
 8006e6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr
 8006e78:	2000000c 	.word	0x2000000c
 8006e7c:	00000000 	.word	0x00000000

08006e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e90:	6010      	str	r0, [r2, #0]
 8006e92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e9a:	f380 8811 	msr	BASEPRI, r0
 8006e9e:	f7ff fb5b 	bl	8006558 <vTaskSwitchContext>
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	6808      	ldr	r0, [r1, #0]
 8006eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eb6:	f380 8809 	msr	PSP, r0
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	4770      	bx	lr

08006ec0 <pxCurrentTCBConst>:
 8006ec0:	20001a9c 	.word	0x20001a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	607b      	str	r3, [r7, #4]
}
 8006ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ee2:	f7ff fa7b 	bl	80063dc <xTaskIncrementTick>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <SysTick_Handler+0x40>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f383 8811 	msr	BASEPRI, r3
}
 8006efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <vPortSetupTimerInterrupt+0x30>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <vPortSetupTimerInterrupt+0x34>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <vPortSetupTimerInterrupt+0x38>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <vPortSetupTimerInterrupt+0x3c>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <vPortSetupTimerInterrupt+0x40>)
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f2e:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <vPortSetupTimerInterrupt+0x30>)
 8006f30:	2207      	movs	r2, #7
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	e000e010 	.word	0xe000e010
 8006f40:	e000e018 	.word	0xe000e018
 8006f44:	20000000 	.word	0x20000000
 8006f48:	10624dd3 	.word	0x10624dd3
 8006f4c:	e000e014 	.word	0xe000e014

08006f50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f56:	f3ef 8305 	mrs	r3, IPSR
 8006f5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b0f      	cmp	r3, #15
 8006f60:	d914      	bls.n	8006f8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f62:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <vPortValidateInterruptPriority+0x6c>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <vPortValidateInterruptPriority+0x70>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	7afa      	ldrb	r2, [r7, #11]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d20a      	bcs.n	8006f8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	607b      	str	r3, [r7, #4]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <vPortValidateInterruptPriority+0x74>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <vPortValidateInterruptPriority+0x78>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d90a      	bls.n	8006fb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	603b      	str	r3, [r7, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <vPortValidateInterruptPriority+0x60>
	}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr
 8006fbc:	e000e3f0 	.word	0xe000e3f0
 8006fc0:	20001bc8 	.word	0x20001bc8
 8006fc4:	e000ed0c 	.word	0xe000ed0c
 8006fc8:	20001bcc 	.word	0x20001bcc

08006fcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fd8:	f7ff f956 	bl	8006288 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fdc:	4b58      	ldr	r3, [pc, #352]	; (8007140 <pvPortMalloc+0x174>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fe4:	f000 f910 	bl	8007208 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fe8:	4b56      	ldr	r3, [pc, #344]	; (8007144 <pvPortMalloc+0x178>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f040 808e 	bne.w	8007112 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01d      	beq.n	8007038 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4413      	add	r3, r2
 8007002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d014      	beq.n	8007038 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f023 0307 	bic.w	r3, r3, #7
 8007014:	3308      	adds	r3, #8
 8007016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <pvPortMalloc+0x6c>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	617b      	str	r3, [r7, #20]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d069      	beq.n	8007112 <pvPortMalloc+0x146>
 800703e:	4b42      	ldr	r3, [pc, #264]	; (8007148 <pvPortMalloc+0x17c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d864      	bhi.n	8007112 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007048:	4b40      	ldr	r3, [pc, #256]	; (800714c <pvPortMalloc+0x180>)
 800704a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800704c:	4b3f      	ldr	r3, [pc, #252]	; (800714c <pvPortMalloc+0x180>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007052:	e004      	b.n	800705e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d903      	bls.n	8007070 <pvPortMalloc+0xa4>
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f1      	bne.n	8007054 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007070:	4b33      	ldr	r3, [pc, #204]	; (8007140 <pvPortMalloc+0x174>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007076:	429a      	cmp	r2, r3
 8007078:	d04b      	beq.n	8007112 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2208      	movs	r2, #8
 8007080:	4413      	add	r3, r2
 8007082:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	1ad2      	subs	r2, r2, r3
 8007094:	2308      	movs	r3, #8
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	429a      	cmp	r2, r3
 800709a:	d91f      	bls.n	80070dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800709c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <pvPortMalloc+0xf8>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	613b      	str	r3, [r7, #16]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	1ad2      	subs	r2, r2, r3
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070d6:	69b8      	ldr	r0, [r7, #24]
 80070d8:	f000 f8f8 	bl	80072cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070dc:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <pvPortMalloc+0x17c>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <pvPortMalloc+0x17c>)
 80070e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ea:	4b17      	ldr	r3, [pc, #92]	; (8007148 <pvPortMalloc+0x17c>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <pvPortMalloc+0x184>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d203      	bcs.n	80070fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <pvPortMalloc+0x17c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a15      	ldr	r2, [pc, #84]	; (8007150 <pvPortMalloc+0x184>)
 80070fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	4b10      	ldr	r3, [pc, #64]	; (8007144 <pvPortMalloc+0x178>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	431a      	orrs	r2, r3
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007112:	f7ff f8c7 	bl	80062a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <pvPortMalloc+0x16a>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <pvPortMalloc+0x168>
	return pvReturn;
 8007136:	69fb      	ldr	r3, [r7, #28]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20002bd8 	.word	0x20002bd8
 8007144:	20002be4 	.word	0x20002be4
 8007148:	20002bdc 	.word	0x20002bdc
 800714c:	20002bd0 	.word	0x20002bd0
 8007150:	20002be0 	.word	0x20002be0

08007154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d048      	beq.n	80071f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007166:	2308      	movs	r3, #8
 8007168:	425b      	negs	r3, r3
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4413      	add	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	4b21      	ldr	r3, [pc, #132]	; (8007200 <vPortFree+0xac>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vPortFree+0x44>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60fb      	str	r3, [r7, #12]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <vPortFree+0x62>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60bb      	str	r3, [r7, #8]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	4b11      	ldr	r3, [pc, #68]	; (8007200 <vPortFree+0xac>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d019      	beq.n	80071f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d115      	bne.n	80071f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <vPortFree+0xac>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071dc:	f7ff f854 	bl	8006288 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <vPortFree+0xb0>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4413      	add	r3, r2
 80071ea:	4a06      	ldr	r2, [pc, #24]	; (8007204 <vPortFree+0xb0>)
 80071ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ee:	6938      	ldr	r0, [r7, #16]
 80071f0:	f000 f86c 	bl	80072cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071f4:	f7ff f856 	bl	80062a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071f8:	bf00      	nop
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20002be4 	.word	0x20002be4
 8007204:	20002bdc 	.word	0x20002bdc

08007208 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800720e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007212:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007214:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <prvHeapInit+0xac>)
 8007216:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00c      	beq.n	800723c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3307      	adds	r3, #7
 8007226:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0307 	bic.w	r3, r3, #7
 800722e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <prvHeapInit+0xac>)
 8007238:	4413      	add	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007240:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <prvHeapInit+0xb0>)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <prvHeapInit+0xb0>)
 8007248:	2200      	movs	r2, #0
 800724a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007254:	2208      	movs	r2, #8
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <prvHeapInit+0xb4>)
 8007268:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <prvHeapInit+0xb4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007272:	4b12      	ldr	r3, [pc, #72]	; (80072bc <prvHeapInit+0xb4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	1ad2      	subs	r2, r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <prvHeapInit+0xb4>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <prvHeapInit+0xb8>)
 8007296:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <prvHeapInit+0xbc>)
 800729e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <prvHeapInit+0xc0>)
 80072a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072a6:	601a      	str	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20001bd0 	.word	0x20001bd0
 80072b8:	20002bd0 	.word	0x20002bd0
 80072bc:	20002bd8 	.word	0x20002bd8
 80072c0:	20002be0 	.word	0x20002be0
 80072c4:	20002bdc 	.word	0x20002bdc
 80072c8:	20002be4 	.word	0x20002be4

080072cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072d4:	4b27      	ldr	r3, [pc, #156]	; (8007374 <prvInsertBlockIntoFreeList+0xa8>)
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	e002      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x14>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d8f7      	bhi.n	80072da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	4413      	add	r3, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d108      	bne.n	800730e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	441a      	add	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	441a      	add	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d118      	bne.n	8007354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <prvInsertBlockIntoFreeList+0xac>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d00d      	beq.n	800734a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	441a      	add	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e008      	b.n	800735c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <prvInsertBlockIntoFreeList+0xac>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e003      	b.n	800735c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d002      	beq.n	800736a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr
 8007374:	20002bd0 	.word	0x20002bd0
 8007378:	20002bd8 	.word	0x20002bd8

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	2600      	movs	r6, #0
 8007380:	4d0c      	ldr	r5, [pc, #48]	; (80073b4 <__libc_init_array+0x38>)
 8007382:	4c0d      	ldr	r4, [pc, #52]	; (80073b8 <__libc_init_array+0x3c>)
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	f000 f830 	bl	80073f0 <_init>
 8007390:	2600      	movs	r6, #0
 8007392:	4d0a      	ldr	r5, [pc, #40]	; (80073bc <__libc_init_array+0x40>)
 8007394:	4c0a      	ldr	r4, [pc, #40]	; (80073c0 <__libc_init_array+0x44>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	08007534 	.word	0x08007534
 80073b8:	08007534 	.word	0x08007534
 80073bc:	08007534 	.word	0x08007534
 80073c0:	08007538 	.word	0x08007538

080073c4 <memcpy>:
 80073c4:	440a      	add	r2, r1
 80073c6:	4291      	cmp	r1, r2
 80073c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073cc:	d100      	bne.n	80073d0 <memcpy+0xc>
 80073ce:	4770      	bx	lr
 80073d0:	b510      	push	{r4, lr}
 80073d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d6:	4291      	cmp	r1, r2
 80073d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073dc:	d1f9      	bne.n	80073d2 <memcpy+0xe>
 80073de:	bd10      	pop	{r4, pc}

080073e0 <memset>:
 80073e0:	4603      	mov	r3, r0
 80073e2:	4402      	add	r2, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr
